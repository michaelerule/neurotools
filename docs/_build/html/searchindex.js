Search.setIndex({"docnames": ["_obsolete/functions", "_obsolete/getfftw", "_obsolete/gpu", "_obsolete/gpu.cl", "_obsolete/gpu.cl.device", "_obsolete/gpu.cl.function", "_obsolete/gpu.cl.matrix", "_obsolete/gpu.cpu", "_obsolete/gpu.cpu.util", "_obsolete/gpu.cu", "_obsolete/gpu.cu.convolution", "_obsolete/gpu.cu.device", "_obsolete/gpu.cu.function", "_obsolete/gpu.cu.gpufun", "_obsolete/gpu.cu.graph", "_obsolete/gpu.cu.logic", "_obsolete/gpu.cu.matrix", "_obsolete/gpu.cu.plot", "_obsolete/gpu.cu.sequence", "_obsolete/gpu.cu.statistics", "_obsolete/graphics", "_obsolete/graphics.color", "_obsolete/graphics.image", "_obsolete/graphics.matplotlib", "_obsolete/graphics.plot", "_obsolete/graphics.pygame", "_obsolete/jobs", "_obsolete/jobs.cache", "_obsolete/jobs.closure", "_obsolete/jobs.decorator", "_obsolete/jobs.filenames", "_obsolete/jobs.initialize_system_cache", "_obsolete/jobs.parallel", "_obsolete/linalg", "_obsolete/linalg.arguments", "_obsolete/linalg.matrix", "_obsolete/linalg.operators", "_obsolete/models", "_obsolete/models.izh", "_obsolete/models.lif", "_obsolete/models.rbm", "_obsolete/models.rbm.rbm", "_obsolete/models.rbm.rbm_helper", "_obsolete/models.rbm.rbm_sample", "_obsolete/models.rbm.rbm_utils", "_obsolete/models.rbm.rbm_utils.rbm", "_obsolete/models.rbm.rbm_utils.stutils", "_obsolete/modules", "_obsolete/neurotools", "_obsolete/neurotools.dependencies", "_obsolete/neurotools.encoding", "_obsolete/neurotools.encoding.Huffman", "_obsolete/neurotools.encoding.NaryHuffman", "_obsolete/neurotools.functions", "_obsolete/neurotools.getfftw", "_obsolete/neurotools.gpu", "_obsolete/neurotools.gpu.cl", "_obsolete/neurotools.gpu.cl.device", "_obsolete/neurotools.gpu.cl.function", "_obsolete/neurotools.gpu.cl.matrix", "_obsolete/neurotools.gpu.cpu", "_obsolete/neurotools.gpu.cpu.util", "_obsolete/neurotools.gpu.cu", "_obsolete/neurotools.gpu.cu.convolution", "_obsolete/neurotools.gpu.cu.device", "_obsolete/neurotools.gpu.cu.function", "_obsolete/neurotools.gpu.cu.gpufun", "_obsolete/neurotools.gpu.cu.graph", "_obsolete/neurotools.gpu.cu.logic", "_obsolete/neurotools.gpu.cu.matrix", "_obsolete/neurotools.gpu.cu.plot", "_obsolete/neurotools.gpu.cu.sequence", "_obsolete/neurotools.gpu.cu.statistics", "_obsolete/neurotools.graphics", "_obsolete/neurotools.graphics.color", "_obsolete/neurotools.graphics.colormaps", "_obsolete/neurotools.graphics.dendron", "_obsolete/neurotools.graphics.fabio_maps", "_obsolete/neurotools.graphics.image", "_obsolete/neurotools.graphics.matplotlib", "_obsolete/neurotools.graphics.plot", "_obsolete/neurotools.graphics.pygame", "_obsolete/neurotools.graphics.ztransform_plot_helpers", "_obsolete/neurotools.hdfmat", "_obsolete/neurotools.jobs", "_obsolete/neurotools.jobs.cache", "_obsolete/neurotools.jobs.closure", "_obsolete/neurotools.jobs.filenames", "_obsolete/neurotools.jobs.initialize_system_cache", "_obsolete/neurotools.jobs.ndecorator", "_obsolete/neurotools.jobs.parallel", "_obsolete/neurotools.linalg", "_obsolete/neurotools.linalg.arguments", "_obsolete/neurotools.linalg.matrix", "_obsolete/neurotools.linalg.operators", "_obsolete/neurotools.models", "_obsolete/neurotools.models.izh", "_obsolete/neurotools.models.lif", "_obsolete/neurotools.models.rbm", "_obsolete/neurotools.models.rbm.rbm", "_obsolete/neurotools.models.rbm.rbm_helper", "_obsolete/neurotools.models.rbm.rbm_sample", "_obsolete/neurotools.models.rbm.rbm_utils", "_obsolete/neurotools.models.rbm.rbm_utils.rbm", "_obsolete/neurotools.models.rbm.rbm_utils.stutils", "_obsolete/neurotools.nlab", "_obsolete/neurotools.obsolete", "_obsolete/neurotools.obsolete.encoding", "_obsolete/neurotools.obsolete.encoding.Huffman", "_obsolete/neurotools.obsolete.encoding.NaryHuffman", "_obsolete/neurotools.obsolete.gpu", "_obsolete/neurotools.obsolete.gpu.cl", "_obsolete/neurotools.obsolete.gpu.cl.device", "_obsolete/neurotools.obsolete.gpu.cl.function", "_obsolete/neurotools.obsolete.gpu.cl.matrix", "_obsolete/neurotools.obsolete.gpu.cpu", "_obsolete/neurotools.obsolete.gpu.cpu.util", "_obsolete/neurotools.obsolete.gpu.cu", "_obsolete/neurotools.obsolete.gpu.cu.convolution", "_obsolete/neurotools.obsolete.gpu.cu.device", "_obsolete/neurotools.obsolete.gpu.cu.function", "_obsolete/neurotools.obsolete.gpu.cu.gpufun", "_obsolete/neurotools.obsolete.gpu.cu.graph", "_obsolete/neurotools.obsolete.gpu.cu.logic", "_obsolete/neurotools.obsolete.gpu.cu.matrix", "_obsolete/neurotools.obsolete.gpu.cu.plot", "_obsolete/neurotools.obsolete.gpu.cu.sequence", "_obsolete/neurotools.obsolete.gpu.cu.statistics", "_obsolete/neurotools.obsolete.models", "_obsolete/neurotools.obsolete.models.izh", "_obsolete/neurotools.obsolete.models.lif", "_obsolete/neurotools.obsolete.opto", "_obsolete/neurotools.obsolete.rbm", "_obsolete/neurotools.obsolete.rbm.rbm", "_obsolete/neurotools.obsolete.rbm.rbm_helper", "_obsolete/neurotools.obsolete.rbm.rbm_sample", "_obsolete/neurotools.obsolete.rbm.rbm_utils", "_obsolete/neurotools.obsolete.rbm.rbm_utils.rbm", "_obsolete/neurotools.obsolete.rbm.rbm_utils.stutils", "_obsolete/neurotools.opto", "_obsolete/neurotools.signal", "_obsolete/neurotools.signal.coherence", "_obsolete/neurotools.signal.conv", "_obsolete/neurotools.signal.linenoise", "_obsolete/neurotools.signal.morlet", "_obsolete/neurotools.signal.morlet_coherence", "_obsolete/neurotools.signal.multitaper", "_obsolete/neurotools.signal.ppc", "_obsolete/neurotools.signal.resonator", "_obsolete/neurotools.signal.savitskygolay", "_obsolete/neurotools.signal.sde", "_obsolete/neurotools.signal.signal", "_obsolete/neurotools.spatial", "_obsolete/neurotools.spatial.array", "_obsolete/neurotools.spatial.dct", "_obsolete/neurotools.spatial.distance", "_obsolete/neurotools.spatial.fftzeros", "_obsolete/neurotools.spatial.geometry", "_obsolete/neurotools.spatial.kernels", "_obsolete/neurotools.spatial.masking", "_obsolete/neurotools.spatial.phase", "_obsolete/neurotools.spatial.points", "_obsolete/neurotools.spatial.spatialPSD", "_obsolete/neurotools.spatial.spiking", "_obsolete/neurotools.spatial.triangulation", "_obsolete/neurotools.spatial.wave_parametric_models", "_obsolete/neurotools.spikes", "_obsolete/neurotools.spikes.spikes", "_obsolete/neurotools.spikes.waveform", "_obsolete/neurotools.stats", "_obsolete/neurotools.stats.GLMFit", "_obsolete/neurotools.stats.Gaussian", "_obsolete/neurotools.stats.circular", "_obsolete/neurotools.stats.convolutional", "_obsolete/neurotools.stats.density", "_obsolete/neurotools.stats.distributions", "_obsolete/neurotools.stats.entropy", "_obsolete/neurotools.stats.fast_kde", "_obsolete/neurotools.stats.gaussian (Case Conflict 1)", "_obsolete/neurotools.stats.gaussian (Case Conflict 2)", "_obsolete/neurotools.stats.gaussian (Case Conflict 3)", "_obsolete/neurotools.stats.gaussian (Case Conflict 4)", "_obsolete/neurotools.stats.gaussian (Case Conflict 5)", "_obsolete/neurotools.stats.gaussian (Case Conflict 6)", "_obsolete/neurotools.stats.gaussian (Case Conflict 7)", "_obsolete/neurotools.stats.gaussian (Case Conflict 8)", "_obsolete/neurotools.stats.gaussian (Case Conflict)", "_obsolete/neurotools.stats.glm", "_obsolete/neurotools.stats.gmm", "_obsolete/neurotools.stats.grid_search", "_obsolete/neurotools.stats.history_basis", "_obsolete/neurotools.stats.hmm", "_obsolete/neurotools.stats.information", "_obsolete/neurotools.stats.kent_reimann", "_obsolete/neurotools.stats.lessons", "_obsolete/neurotools.stats.matzner_bar-gad_PLoS_2015", "_obsolete/neurotools.stats.mcint", "_obsolete/neurotools.stats.minimize", "_obsolete/neurotools.stats.mixtures", "_obsolete/neurotools.stats.modefind", "_obsolete/neurotools.stats.mvg", "_obsolete/neurotools.stats.pvalues", "_obsolete/neurotools.stats.regressions", "_obsolete/neurotools.stats.sde", "_obsolete/neurotools.stats.spatiotemporal_glm_utils", "_obsolete/neurotools.stats.stats", "_obsolete/neurotools.system", "_obsolete/neurotools.text", "_obsolete/neurotools.tools", "_obsolete/neurotools.util", "_obsolete/neurotools.util.dependencies", "_obsolete/neurotools.util.functions", "_obsolete/neurotools.util.getfftw", "_obsolete/neurotools.util.hdfmat", "_obsolete/neurotools.util.string", "_obsolete/neurotools.util.system", "_obsolete/neurotools.util.time", "_obsolete/neurotools.util.tools", "_obsolete/nlab", "_obsolete/opto", "_obsolete/signal", "_obsolete/signal.coherence", "_obsolete/signal.conv", "_obsolete/signal.linenoise", "_obsolete/signal.morlet", "_obsolete/signal.morlet_coherence", "_obsolete/signal.multitaper", "_obsolete/signal.ppc", "_obsolete/signal.resonator", "_obsolete/signal.savitskygolay", "_obsolete/signal.signal", "_obsolete/spatial", "_obsolete/spatial.array", "_obsolete/spatial.dct", "_obsolete/spatial.distance", "_obsolete/spatial.fftzeros", "_obsolete/spatial.kernels", "_obsolete/spatial.phase", "_obsolete/spatial.spatialPSD", "_obsolete/spatial.spiking", "_obsolete/spatial.triangulation", "_obsolete/spatial.wave_parametric_models", "_obsolete/spikes.spikes", "_obsolete/spikes.waveform", "_obsolete/stats.GLMFit", "_obsolete/stats.Gaussian", "_obsolete/stats.circular", "_obsolete/stats.convolutional", "_obsolete/stats.density", "_obsolete/stats.distributions", "_obsolete/stats.entropy", "_obsolete/stats.fast_kde", "_obsolete/stats.glm", "_obsolete/stats.gmm", "_obsolete/stats.history_basis", "_obsolete/stats.hmm", "_obsolete/stats.information", "_obsolete/stats.kent_reimann", "_obsolete/stats.lessons", "_obsolete/stats.matzner_bar-gad_PLoS_2015", "_obsolete/stats.mcint", "_obsolete/stats.minimize", "_obsolete/stats.mixtures", "_obsolete/stats.modefind", "_obsolete/stats.mvg", "_obsolete/stats.pvalues", "_obsolete/stats.regressions", "_obsolete/stats.sde", "_obsolete/stats.spatiotemporal_glm_utils", "_obsolete/stats.stats", "dependencies", "index", "modules", "neurotools", "neurotools.graphics", "neurotools.graphics.color", "neurotools.graphics.colormaps", "neurotools.graphics.dendron", "neurotools.graphics.fabio_maps", "neurotools.graphics.image", "neurotools.graphics.matplotlib", "neurotools.graphics.plot", "neurotools.graphics.pygame", "neurotools.graphics.ztransform_plot_helpers", "neurotools.jobs", "neurotools.jobs.cache", "neurotools.jobs.closure", "neurotools.jobs.filenames", "neurotools.jobs.initialize_system_cache", "neurotools.jobs.ndecorator", "neurotools.jobs.parallel", "neurotools.linalg", "neurotools.linalg.arguments", "neurotools.linalg.matrix", "neurotools.linalg.operators", "neurotools.nlab", "neurotools.obsolete", "neurotools.obsolete.encoding", "neurotools.obsolete.encoding.Huffman", "neurotools.obsolete.encoding.NaryHuffman", "neurotools.obsolete.gpu", "neurotools.obsolete.gpu.cl", "neurotools.obsolete.gpu.cl.device", "neurotools.obsolete.gpu.cl.function", "neurotools.obsolete.gpu.cl.matrix", "neurotools.obsolete.gpu.cpu", "neurotools.obsolete.gpu.cpu.util", "neurotools.obsolete.gpu.cu", "neurotools.obsolete.gpu.cu.convolution", "neurotools.obsolete.gpu.cu.device", "neurotools.obsolete.gpu.cu.function", "neurotools.obsolete.gpu.cu.gpufun", "neurotools.obsolete.gpu.cu.graph", "neurotools.obsolete.gpu.cu.logic", "neurotools.obsolete.gpu.cu.matrix", "neurotools.obsolete.gpu.cu.plot", "neurotools.obsolete.gpu.cu.sequence", "neurotools.obsolete.gpu.cu.statistics", "neurotools.obsolete.models", "neurotools.obsolete.models.izh", "neurotools.obsolete.models.lif", "neurotools.obsolete.opto", "neurotools.obsolete.rbm", "neurotools.obsolete.rbm.rbm", "neurotools.obsolete.rbm.rbm_helper", "neurotools.obsolete.rbm.rbm_sample", "neurotools.obsolete.rbm.rbm_utils", "neurotools.obsolete.rbm.rbm_utils.rbm", "neurotools.obsolete.rbm.rbm_utils.stutils", "neurotools.signal", "neurotools.signal.coherence", "neurotools.signal.conv", "neurotools.signal.morlet", "neurotools.signal.multitaper", "neurotools.signal.ppc", "neurotools.signal.savitskygolay", "neurotools.signal.sde", "neurotools.spatial", "neurotools.spatial.array", "neurotools.spatial.dct", "neurotools.spatial.distance", "neurotools.spatial.fftzeros", "neurotools.spatial.geometry", "neurotools.spatial.kernels", "neurotools.spatial.masking", "neurotools.spatial.phase", "neurotools.spatial.points", "neurotools.spatial.spiking", "neurotools.spatial.triangulation", "neurotools.spikes", "neurotools.spikes.spikes", "neurotools.spikes.waveform", "neurotools.stats", "neurotools.stats.circular", "neurotools.stats.convolutional", "neurotools.stats.density", "neurotools.stats.distributions", "neurotools.stats.fast_kde", "neurotools.stats.gaussian", "neurotools.stats.glm", "neurotools.stats.grid_search", "neurotools.stats.hmm", "neurotools.stats.information", "neurotools.stats.mcint", "neurotools.stats.minimize", "neurotools.stats.mixtures", "neurotools.stats.modefind", "neurotools.stats.pvalues", "neurotools.stats.regressions", "neurotools.util", "neurotools.util.dependencies", "neurotools.util.functions", "neurotools.util.getfftw", "neurotools.util.hdfmat", "neurotools.util.string", "neurotools.util.system", "neurotools.util.time", "neurotools.util.tools"], "filenames": ["_obsolete/functions.rst", "_obsolete/getfftw.rst", "_obsolete/gpu.rst", "_obsolete/gpu.cl.rst", "_obsolete/gpu.cl.device.rst", "_obsolete/gpu.cl.function.rst", "_obsolete/gpu.cl.matrix.rst", "_obsolete/gpu.cpu.rst", "_obsolete/gpu.cpu.util.rst", "_obsolete/gpu.cu.rst", "_obsolete/gpu.cu.convolution.rst", "_obsolete/gpu.cu.device.rst", "_obsolete/gpu.cu.function.rst", "_obsolete/gpu.cu.gpufun.rst", "_obsolete/gpu.cu.graph.rst", "_obsolete/gpu.cu.logic.rst", "_obsolete/gpu.cu.matrix.rst", "_obsolete/gpu.cu.plot.rst", "_obsolete/gpu.cu.sequence.rst", "_obsolete/gpu.cu.statistics.rst", "_obsolete/graphics.rst", "_obsolete/graphics.color.rst", "_obsolete/graphics.image.rst", "_obsolete/graphics.matplotlib.rst", "_obsolete/graphics.plot.rst", "_obsolete/graphics.pygame.rst", "_obsolete/jobs.rst", "_obsolete/jobs.cache.rst", "_obsolete/jobs.closure.rst", "_obsolete/jobs.decorator.rst", "_obsolete/jobs.filenames.rst", "_obsolete/jobs.initialize_system_cache.rst", "_obsolete/jobs.parallel.rst", "_obsolete/linalg.rst", "_obsolete/linalg.arguments.rst", "_obsolete/linalg.matrix.rst", "_obsolete/linalg.operators.rst", "_obsolete/models.rst", "_obsolete/models.izh.rst", "_obsolete/models.lif.rst", "_obsolete/models.rbm.rst", "_obsolete/models.rbm.rbm.rst", "_obsolete/models.rbm.rbm_helper.rst", "_obsolete/models.rbm.rbm_sample.rst", "_obsolete/models.rbm.rbm_utils.rst", "_obsolete/models.rbm.rbm_utils.rbm.rst", "_obsolete/models.rbm.rbm_utils.stutils.rst", "_obsolete/modules.rst", "_obsolete/neurotools.rst", "_obsolete/neurotools.dependencies.rst", "_obsolete/neurotools.encoding.rst", "_obsolete/neurotools.encoding.Huffman.rst", "_obsolete/neurotools.encoding.NaryHuffman.rst", "_obsolete/neurotools.functions.rst", "_obsolete/neurotools.getfftw.rst", "_obsolete/neurotools.gpu.rst", "_obsolete/neurotools.gpu.cl.rst", "_obsolete/neurotools.gpu.cl.device.rst", "_obsolete/neurotools.gpu.cl.function.rst", "_obsolete/neurotools.gpu.cl.matrix.rst", "_obsolete/neurotools.gpu.cpu.rst", "_obsolete/neurotools.gpu.cpu.util.rst", "_obsolete/neurotools.gpu.cu.rst", "_obsolete/neurotools.gpu.cu.convolution.rst", "_obsolete/neurotools.gpu.cu.device.rst", "_obsolete/neurotools.gpu.cu.function.rst", "_obsolete/neurotools.gpu.cu.gpufun.rst", "_obsolete/neurotools.gpu.cu.graph.rst", "_obsolete/neurotools.gpu.cu.logic.rst", "_obsolete/neurotools.gpu.cu.matrix.rst", "_obsolete/neurotools.gpu.cu.plot.rst", "_obsolete/neurotools.gpu.cu.sequence.rst", "_obsolete/neurotools.gpu.cu.statistics.rst", "_obsolete/neurotools.graphics.rst", "_obsolete/neurotools.graphics.color.rst", "_obsolete/neurotools.graphics.colormaps.rst", "_obsolete/neurotools.graphics.dendron.rst", "_obsolete/neurotools.graphics.fabio_maps.rst", "_obsolete/neurotools.graphics.image.rst", "_obsolete/neurotools.graphics.matplotlib.rst", "_obsolete/neurotools.graphics.plot.rst", "_obsolete/neurotools.graphics.pygame.rst", "_obsolete/neurotools.graphics.ztransform_plot_helpers.rst", "_obsolete/neurotools.hdfmat.rst", "_obsolete/neurotools.jobs.rst", "_obsolete/neurotools.jobs.cache.rst", "_obsolete/neurotools.jobs.closure.rst", "_obsolete/neurotools.jobs.filenames.rst", "_obsolete/neurotools.jobs.initialize_system_cache.rst", "_obsolete/neurotools.jobs.ndecorator.rst", "_obsolete/neurotools.jobs.parallel.rst", "_obsolete/neurotools.linalg.rst", "_obsolete/neurotools.linalg.arguments.rst", "_obsolete/neurotools.linalg.matrix.rst", "_obsolete/neurotools.linalg.operators.rst", "_obsolete/neurotools.models.rst", "_obsolete/neurotools.models.izh.rst", "_obsolete/neurotools.models.lif.rst", "_obsolete/neurotools.models.rbm.rst", "_obsolete/neurotools.models.rbm.rbm.rst", "_obsolete/neurotools.models.rbm.rbm_helper.rst", "_obsolete/neurotools.models.rbm.rbm_sample.rst", "_obsolete/neurotools.models.rbm.rbm_utils.rst", "_obsolete/neurotools.models.rbm.rbm_utils.rbm.rst", "_obsolete/neurotools.models.rbm.rbm_utils.stutils.rst", "_obsolete/neurotools.nlab.rst", "_obsolete/neurotools.obsolete.rst", "_obsolete/neurotools.obsolete.encoding.rst", "_obsolete/neurotools.obsolete.encoding.Huffman.rst", "_obsolete/neurotools.obsolete.encoding.NaryHuffman.rst", "_obsolete/neurotools.obsolete.gpu.rst", "_obsolete/neurotools.obsolete.gpu.cl.rst", "_obsolete/neurotools.obsolete.gpu.cl.device.rst", "_obsolete/neurotools.obsolete.gpu.cl.function.rst", "_obsolete/neurotools.obsolete.gpu.cl.matrix.rst", "_obsolete/neurotools.obsolete.gpu.cpu.rst", "_obsolete/neurotools.obsolete.gpu.cpu.util.rst", "_obsolete/neurotools.obsolete.gpu.cu.rst", "_obsolete/neurotools.obsolete.gpu.cu.convolution.rst", "_obsolete/neurotools.obsolete.gpu.cu.device.rst", "_obsolete/neurotools.obsolete.gpu.cu.function.rst", "_obsolete/neurotools.obsolete.gpu.cu.gpufun.rst", "_obsolete/neurotools.obsolete.gpu.cu.graph.rst", "_obsolete/neurotools.obsolete.gpu.cu.logic.rst", "_obsolete/neurotools.obsolete.gpu.cu.matrix.rst", "_obsolete/neurotools.obsolete.gpu.cu.plot.rst", "_obsolete/neurotools.obsolete.gpu.cu.sequence.rst", "_obsolete/neurotools.obsolete.gpu.cu.statistics.rst", "_obsolete/neurotools.obsolete.models.rst", "_obsolete/neurotools.obsolete.models.izh.rst", "_obsolete/neurotools.obsolete.models.lif.rst", "_obsolete/neurotools.obsolete.opto.rst", "_obsolete/neurotools.obsolete.rbm.rst", "_obsolete/neurotools.obsolete.rbm.rbm.rst", "_obsolete/neurotools.obsolete.rbm.rbm_helper.rst", "_obsolete/neurotools.obsolete.rbm.rbm_sample.rst", "_obsolete/neurotools.obsolete.rbm.rbm_utils.rst", "_obsolete/neurotools.obsolete.rbm.rbm_utils.rbm.rst", "_obsolete/neurotools.obsolete.rbm.rbm_utils.stutils.rst", "_obsolete/neurotools.opto.rst", "_obsolete/neurotools.signal.rst", "_obsolete/neurotools.signal.coherence.rst", "_obsolete/neurotools.signal.conv.rst", "_obsolete/neurotools.signal.linenoise.rst", "_obsolete/neurotools.signal.morlet.rst", "_obsolete/neurotools.signal.morlet_coherence.rst", "_obsolete/neurotools.signal.multitaper.rst", "_obsolete/neurotools.signal.ppc.rst", "_obsolete/neurotools.signal.resonator.rst", "_obsolete/neurotools.signal.savitskygolay.rst", "_obsolete/neurotools.signal.sde.rst", "_obsolete/neurotools.signal.signal.rst", "_obsolete/neurotools.spatial.rst", "_obsolete/neurotools.spatial.array.rst", "_obsolete/neurotools.spatial.dct.rst", "_obsolete/neurotools.spatial.distance.rst", "_obsolete/neurotools.spatial.fftzeros.rst", "_obsolete/neurotools.spatial.geometry.rst", "_obsolete/neurotools.spatial.kernels.rst", "_obsolete/neurotools.spatial.masking.rst", "_obsolete/neurotools.spatial.phase.rst", "_obsolete/neurotools.spatial.points.rst", "_obsolete/neurotools.spatial.spatialPSD.rst", "_obsolete/neurotools.spatial.spiking.rst", "_obsolete/neurotools.spatial.triangulation.rst", "_obsolete/neurotools.spatial.wave_parametric_models.rst", "_obsolete/neurotools.spikes.rst", "_obsolete/neurotools.spikes.spikes.rst", "_obsolete/neurotools.spikes.waveform.rst", "_obsolete/neurotools.stats.rst", "_obsolete/neurotools.stats.GLMFit.rst", "_obsolete/neurotools.stats.Gaussian.rst", "_obsolete/neurotools.stats.circular.rst", "_obsolete/neurotools.stats.convolutional.rst", "_obsolete/neurotools.stats.density.rst", "_obsolete/neurotools.stats.distributions.rst", "_obsolete/neurotools.stats.entropy.rst", "_obsolete/neurotools.stats.fast_kde.rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 1).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 2).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 3).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 4).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 5).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 6).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 7).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict 8).rst", "_obsolete/neurotools.stats.gaussian (Case Conflict).rst", "_obsolete/neurotools.stats.glm.rst", "_obsolete/neurotools.stats.gmm.rst", "_obsolete/neurotools.stats.grid_search.rst", "_obsolete/neurotools.stats.history_basis.rst", "_obsolete/neurotools.stats.hmm.rst", "_obsolete/neurotools.stats.information.rst", "_obsolete/neurotools.stats.kent_reimann.rst", "_obsolete/neurotools.stats.lessons.rst", "_obsolete/neurotools.stats.matzner_bar-gad_PLoS_2015.rst", "_obsolete/neurotools.stats.mcint.rst", "_obsolete/neurotools.stats.minimize.rst", "_obsolete/neurotools.stats.mixtures.rst", "_obsolete/neurotools.stats.modefind.rst", "_obsolete/neurotools.stats.mvg.rst", "_obsolete/neurotools.stats.pvalues.rst", "_obsolete/neurotools.stats.regressions.rst", "_obsolete/neurotools.stats.sde.rst", "_obsolete/neurotools.stats.spatiotemporal_glm_utils.rst", "_obsolete/neurotools.stats.stats.rst", "_obsolete/neurotools.system.rst", "_obsolete/neurotools.text.rst", "_obsolete/neurotools.tools.rst", "_obsolete/neurotools.util.rst", "_obsolete/neurotools.util.dependencies.rst", "_obsolete/neurotools.util.functions.rst", "_obsolete/neurotools.util.getfftw.rst", "_obsolete/neurotools.util.hdfmat.rst", "_obsolete/neurotools.util.string.rst", "_obsolete/neurotools.util.system.rst", "_obsolete/neurotools.util.time.rst", "_obsolete/neurotools.util.tools.rst", "_obsolete/nlab.rst", "_obsolete/opto.rst", "_obsolete/signal.rst", "_obsolete/signal.coherence.rst", "_obsolete/signal.conv.rst", "_obsolete/signal.linenoise.rst", "_obsolete/signal.morlet.rst", "_obsolete/signal.morlet_coherence.rst", "_obsolete/signal.multitaper.rst", "_obsolete/signal.ppc.rst", "_obsolete/signal.resonator.rst", "_obsolete/signal.savitskygolay.rst", "_obsolete/signal.signal.rst", "_obsolete/spatial.rst", "_obsolete/spatial.array.rst", "_obsolete/spatial.dct.rst", "_obsolete/spatial.distance.rst", "_obsolete/spatial.fftzeros.rst", "_obsolete/spatial.kernels.rst", "_obsolete/spatial.phase.rst", "_obsolete/spatial.spatialPSD.rst", "_obsolete/spatial.spiking.rst", "_obsolete/spatial.triangulation.rst", "_obsolete/spatial.wave_parametric_models.rst", "_obsolete/spikes.spikes.rst", "_obsolete/spikes.waveform.rst", "_obsolete/stats.GLMFit.rst", "_obsolete/stats.Gaussian.rst", "_obsolete/stats.circular.rst", "_obsolete/stats.convolutional.rst", "_obsolete/stats.density.rst", "_obsolete/stats.distributions.rst", "_obsolete/stats.entropy.rst", "_obsolete/stats.fast_kde.rst", "_obsolete/stats.glm.rst", "_obsolete/stats.gmm.rst", "_obsolete/stats.history_basis.rst", "_obsolete/stats.hmm.rst", "_obsolete/stats.information.rst", "_obsolete/stats.kent_reimann.rst", "_obsolete/stats.lessons.rst", "_obsolete/stats.matzner_bar-gad_PLoS_2015.rst", "_obsolete/stats.mcint.rst", "_obsolete/stats.minimize.rst", "_obsolete/stats.mixtures.rst", "_obsolete/stats.modefind.rst", "_obsolete/stats.mvg.rst", "_obsolete/stats.pvalues.rst", "_obsolete/stats.regressions.rst", "_obsolete/stats.sde.rst", "_obsolete/stats.spatiotemporal_glm_utils.rst", "_obsolete/stats.stats.rst", "dependencies.rst", "index.rst", "modules.rst", "neurotools.rst", "neurotools.graphics.rst", "neurotools.graphics.color.rst", "neurotools.graphics.colormaps.rst", "neurotools.graphics.dendron.rst", "neurotools.graphics.fabio_maps.rst", "neurotools.graphics.image.rst", "neurotools.graphics.matplotlib.rst", "neurotools.graphics.plot.rst", "neurotools.graphics.pygame.rst", "neurotools.graphics.ztransform_plot_helpers.rst", "neurotools.jobs.rst", "neurotools.jobs.cache.rst", "neurotools.jobs.closure.rst", "neurotools.jobs.filenames.rst", "neurotools.jobs.initialize_system_cache.rst", "neurotools.jobs.ndecorator.rst", "neurotools.jobs.parallel.rst", "neurotools.linalg.rst", "neurotools.linalg.arguments.rst", "neurotools.linalg.matrix.rst", "neurotools.linalg.operators.rst", "neurotools.nlab.rst", "neurotools.obsolete.rst", "neurotools.obsolete.encoding.rst", "neurotools.obsolete.encoding.Huffman.rst", "neurotools.obsolete.encoding.NaryHuffman.rst", "neurotools.obsolete.gpu.rst", "neurotools.obsolete.gpu.cl.rst", "neurotools.obsolete.gpu.cl.device.rst", "neurotools.obsolete.gpu.cl.function.rst", "neurotools.obsolete.gpu.cl.matrix.rst", "neurotools.obsolete.gpu.cpu.rst", "neurotools.obsolete.gpu.cpu.util.rst", "neurotools.obsolete.gpu.cu.rst", "neurotools.obsolete.gpu.cu.convolution.rst", "neurotools.obsolete.gpu.cu.device.rst", "neurotools.obsolete.gpu.cu.function.rst", "neurotools.obsolete.gpu.cu.gpufun.rst", "neurotools.obsolete.gpu.cu.graph.rst", "neurotools.obsolete.gpu.cu.logic.rst", "neurotools.obsolete.gpu.cu.matrix.rst", "neurotools.obsolete.gpu.cu.plot.rst", "neurotools.obsolete.gpu.cu.sequence.rst", "neurotools.obsolete.gpu.cu.statistics.rst", "neurotools.obsolete.models.rst", "neurotools.obsolete.models.izh.rst", "neurotools.obsolete.models.lif.rst", "neurotools.obsolete.opto.rst", "neurotools.obsolete.rbm.rst", "neurotools.obsolete.rbm.rbm.rst", "neurotools.obsolete.rbm.rbm_helper.rst", "neurotools.obsolete.rbm.rbm_sample.rst", "neurotools.obsolete.rbm.rbm_utils.rst", "neurotools.obsolete.rbm.rbm_utils.rbm.rst", "neurotools.obsolete.rbm.rbm_utils.stutils.rst", "neurotools.signal.rst", "neurotools.signal.coherence.rst", "neurotools.signal.conv.rst", "neurotools.signal.morlet.rst", "neurotools.signal.multitaper.rst", "neurotools.signal.ppc.rst", "neurotools.signal.savitskygolay.rst", "neurotools.signal.sde.rst", "neurotools.spatial.rst", "neurotools.spatial.array.rst", "neurotools.spatial.dct.rst", "neurotools.spatial.distance.rst", "neurotools.spatial.fftzeros.rst", "neurotools.spatial.geometry.rst", "neurotools.spatial.kernels.rst", "neurotools.spatial.masking.rst", "neurotools.spatial.phase.rst", "neurotools.spatial.points.rst", "neurotools.spatial.spiking.rst", "neurotools.spatial.triangulation.rst", "neurotools.spikes.rst", "neurotools.spikes.spikes.rst", "neurotools.spikes.waveform.rst", "neurotools.stats.rst", "neurotools.stats.circular.rst", "neurotools.stats.convolutional.rst", "neurotools.stats.density.rst", "neurotools.stats.distributions.rst", "neurotools.stats.fast_kde.rst", "neurotools.stats.gaussian.rst", "neurotools.stats.glm.rst", "neurotools.stats.grid_search.rst", "neurotools.stats.hmm.rst", "neurotools.stats.information.rst", "neurotools.stats.mcint.rst", "neurotools.stats.minimize.rst", "neurotools.stats.mixtures.rst", "neurotools.stats.modefind.rst", "neurotools.stats.pvalues.rst", "neurotools.stats.regressions.rst", "neurotools.util.rst", "neurotools.util.dependencies.rst", "neurotools.util.functions.rst", "neurotools.util.getfftw.rst", "neurotools.util.hdfmat.rst", "neurotools.util.string.rst", "neurotools.util.system.rst", "neurotools.util.time.rst", "neurotools.util.tools.rst"], "titles": ["functions module", "getfftw module", "gpu package", "gpu.cl package", "gpu.cl.device module", "gpu.cl.function module", "gpu.cl.matrix module", "gpu.cpu package", "gpu.cpu.util module", "gpu.cu package", "gpu.cu.convolution module", "gpu.cu.device module", "gpu.cu.function module", "gpu.cu.gpufun module", "gpu.cu.graph module", "gpu.cu.logic module", "gpu.cu.matrix module", "gpu.cu.plot module", "gpu.cu.sequence module", "gpu.cu.statistics module", "graphics package", "graphics.color module", "graphics.image module", "graphics.matplotlib module", "graphics.plot module", "graphics.pygame module", "jobs package", "jobs.cache module", "jobs.closure module", "jobs.decorator module", "jobs.filenames module", "jobs.initialize_system_cache module", "jobs.parallel module", "linalg package", "linalg.arguments module", "linalg.matrix module", "linalg.operators module", "models package", "models.izh module", "models.lif module", "models.rbm package", "models.rbm.rbm module", "models.rbm.rbm_helper module", "models.rbm.rbm_sample module", "models.rbm.rbm_utils package", "models.rbm.rbm_utils.rbm module", "models.rbm.rbm_utils.stutils module", "neurotools", "neurotools package", "neurotools.dependencies module", "neurotools.encoding package", "neurotools.encoding.Huffman module", "neurotools.encoding.NaryHuffman module", "neurotools.functions module", "neurotools.getfftw module", "neurotools.gpu package", "neurotools.gpu.cl package", "neurotools.gpu.cl.device module", "neurotools.gpu.cl.function module", "neurotools.gpu.cl.matrix module", "neurotools.gpu.cpu package", "neurotools.gpu.cpu.util module", "neurotools.gpu.cu package", "neurotools.gpu.cu.convolution module", "neurotools.gpu.cu.device module", "neurotools.gpu.cu.function module", "neurotools.gpu.cu.gpufun module", "neurotools.gpu.cu.graph module", "neurotools.gpu.cu.logic module", "neurotools.gpu.cu.matrix module", "neurotools.gpu.cu.plot module", "neurotools.gpu.cu.sequence module", "neurotools.gpu.cu.statistics module", "neurotools.graphics package", "neurotools.graphics.color module", "neurotools.graphics.colormaps module", "neurotools.graphics.dendron module", "neurotools.graphics.fabio_maps module", "neurotools.graphics.image module", "neurotools.graphics.matplotlib module", "neurotools.graphics.plot module", "neurotools.graphics.pygame module", "neurotools.graphics.ztransform_plot_helpers module", "neurotools.hdfmat module", "neurotools.jobs package", "neurotools.jobs.cache module", "neurotools.jobs.closure module", "neurotools.jobs.filenames module", "neurotools.jobs.initialize_system_cache module", "neurotools.jobs.ndecorator module", "neurotools.jobs.parallel module", "neurotools.linalg package", "neurotools.linalg.arguments module", "neurotools.linalg.matrix module", "neurotools.linalg.operators module", "neurotools.models package", "neurotools.models.izh module", "neurotools.models.lif module", "neurotools.models.rbm package", "neurotools.models.rbm.rbm module", "neurotools.models.rbm.rbm_helper module", "neurotools.models.rbm.rbm_sample module", "neurotools.models.rbm.rbm_utils package", "neurotools.models.rbm.rbm_utils.rbm module", "neurotools.models.rbm.rbm_utils.stutils module", "neurotools.nlab module", "neurotools.obsolete package", "neurotools.obsolete.encoding package", "neurotools.obsolete.encoding.Huffman module", "neurotools.obsolete.encoding.NaryHuffman module", "neurotools.obsolete.gpu package", "neurotools.obsolete.gpu.cl package", "neurotools.obsolete.gpu.cl.device module", "neurotools.obsolete.gpu.cl.function module", "neurotools.obsolete.gpu.cl.matrix module", "neurotools.obsolete.gpu.cpu package", "neurotools.obsolete.gpu.cpu.util module", "neurotools.obsolete.gpu.cu package", "neurotools.obsolete.gpu.cu.convolution module", "neurotools.obsolete.gpu.cu.device module", "neurotools.obsolete.gpu.cu.function module", "neurotools.obsolete.gpu.cu.gpufun module", "neurotools.obsolete.gpu.cu.graph module", "neurotools.obsolete.gpu.cu.logic module", "neurotools.obsolete.gpu.cu.matrix module", "neurotools.obsolete.gpu.cu.plot module", "neurotools.obsolete.gpu.cu.sequence module", "neurotools.obsolete.gpu.cu.statistics module", "neurotools.obsolete.models package", "neurotools.obsolete.models.izh module", "neurotools.obsolete.models.lif module", "neurotools.obsolete.opto module", "neurotools.obsolete.rbm package", "neurotools.obsolete.rbm.rbm module", "neurotools.obsolete.rbm.rbm_helper module", "neurotools.obsolete.rbm.rbm_sample module", "neurotools.obsolete.rbm.rbm_utils package", "neurotools.obsolete.rbm.rbm_utils.rbm module", "neurotools.obsolete.rbm.rbm_utils.stutils module", "neurotools.opto module", "neurotools.signal package", "neurotools.signal.coherence module", "neurotools.signal.conv module", "neurotools.signal.linenoise module", "neurotools.signal.morlet module", "neurotools.signal.morlet_coherence module", "neurotools.signal.multitaper module", "neurotools.signal.ppc module", "neurotools.signal.resonator module", "neurotools.signal.savitskygolay module", "neurotools.signal.sde module", "neurotools.signal.signal module", "neurotools.spatial package", "neurotools.spatial.array module", "neurotools.spatial.dct module", "neurotools.spatial.distance module", "neurotools.spatial.fftzeros module", "neurotools.spatial.geometry module", "neurotools.spatial.kernels module", "neurotools.spatial.masking module", "neurotools.spatial.phase module", "neurotools.spatial.points module", "neurotools.spatial.spatialPSD module", "neurotools.spatial.spiking module", "neurotools.spatial.triangulation module", "neurotools.spatial.wave_parametric_models module", "neurotools.spikes package", "neurotools.spikes.spikes module", "neurotools.spikes.waveform module", "neurotools.stats package", "neurotools.stats.GLMFit module", "neurotools.stats.Gaussian module", "neurotools.stats.circular module", "neurotools.stats.convolutional module", "neurotools.stats.density module", "neurotools.stats.distributions module", "neurotools.stats.entropy module", "neurotools.stats.fast_kde module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.gaussian module", "neurotools.stats.glm module", "neurotools.stats.gmm module", "neurotools.stats.grid_search module", "neurotools.stats.history_basis module", "neurotools.stats.hmm module", "neurotools.stats.information module", "neurotools.stats.kent_reimann module", "neurotools.stats.lessons module", "neurotools.stats.matzner_bar-gad_PLoS_2015 module", "neurotools.stats.mcint module", "neurotools.stats.minimize module", "neurotools.stats.mixtures module", "neurotools.stats.modefind module", "neurotools.stats.mvg module", "neurotools.stats.pvalues module", "neurotools.stats.regressions module", "neurotools.stats.sde module", "neurotools.stats.spatiotemporal_glm_utils module", "neurotools.stats.stats module", "neurotools.system module", "neurotools.text module", "neurotools.tools module", "neurotools.util package", "neurotools.util.dependencies module", "neurotools.util.functions module", "neurotools.util.getfftw module", "neurotools.util.hdfmat module", "neurotools.util.string module", "neurotools.util.system module", "neurotools.util.time module", "neurotools.util.tools module", "nlab module", "opto module", "signal package", "signal.coherence module", "signal.conv module", "signal.linenoise module", "signal.morlet module", "signal.morlet_coherence module", "signal.multitaper module", "signal.ppc module", "signal.resonator module", "signal.savitskygolay module", "signal.signal module", "spatial package", "spatial.array module", "spatial.dct module", "spatial.distance module", "spatial.fftzeros module", "spatial.kernels module", "spatial.phase module", "spatial.spatialPSD module", "spatial.spiking module", "spatial.triangulation module", "spatial.wave_parametric_models module", "spikes.spikes module", "spikes.waveform module", "stats.GLMFit module", "stats.Gaussian module", "stats.circular module", "stats.convolutional module", "stats.density module", "stats.distributions module", "stats.entropy module", "stats.fast_kde module", "stats.glm module", "stats.gmm module", "stats.history_basis module", "stats.hmm module", "stats.information module", "stats.kent_reimann module", "stats.lessons module", "stats.matzner_bar-gad_PLoS_2015 module", "stats.mcint module", "stats.minimize module", "stats.mixtures module", "stats.modefind module", "stats.mvg module", "stats.pvalues module", "stats.regressions module", "stats.sde module", "stats.spatiotemporal_glm_utils module", "stats.stats module", "dependencies module", "Neurotools", "neurotools", "neurotools package", "neurotools.graphics package", "neurotools.graphics.color module", "neurotools.graphics.colormaps module", "neurotools.graphics.dendron module", "neurotools.graphics.fabio_maps module", "neurotools.graphics.image module", "neurotools.graphics.matplotlib module", "neurotools.graphics.plot module", "neurotools.graphics.pygame module", "neurotools.graphics.ztransform_plot_helpers module", "neurotools.jobs package", "neurotools.jobs.cache module", "neurotools.jobs.closure module", "neurotools.jobs.filenames module", "neurotools.jobs.initialize_system_cache module", "neurotools.jobs.ndecorator module", "neurotools.jobs.parallel module", "neurotools.linalg package", "neurotools.linalg.arguments module", "neurotools.linalg.matrix module", "neurotools.linalg.operators module", "neurotools.nlab module", "neurotools.obsolete package", "neurotools.obsolete.encoding package", "neurotools.obsolete.encoding.Huffman module", "neurotools.obsolete.encoding.NaryHuffman module", "neurotools.obsolete.gpu package", "neurotools.obsolete.gpu.cl package", "neurotools.obsolete.gpu.cl.device module", "neurotools.obsolete.gpu.cl.function module", "neurotools.obsolete.gpu.cl.matrix module", "neurotools.obsolete.gpu.cpu package", "neurotools.obsolete.gpu.cpu.util module", "neurotools.obsolete.gpu.cu package", "neurotools.obsolete.gpu.cu.convolution module", "neurotools.obsolete.gpu.cu.device module", "neurotools.obsolete.gpu.cu.function module", "neurotools.obsolete.gpu.cu.gpufun module", "neurotools.obsolete.gpu.cu.graph module", "neurotools.obsolete.gpu.cu.logic module", "neurotools.obsolete.gpu.cu.matrix module", "neurotools.obsolete.gpu.cu.plot module", "neurotools.obsolete.gpu.cu.sequence module", "neurotools.obsolete.gpu.cu.statistics module", "neurotools.obsolete.models package", "neurotools.obsolete.models.izh module", "neurotools.obsolete.models.lif module", "neurotools.obsolete.opto module", "neurotools.obsolete.rbm package", "neurotools.obsolete.rbm.rbm module", "neurotools.obsolete.rbm.rbm_helper module", "neurotools.obsolete.rbm.rbm_sample module", "neurotools.obsolete.rbm.rbm_utils package", "neurotools.obsolete.rbm.rbm_utils.rbm module", "neurotools.obsolete.rbm.rbm_utils.stutils module", "neurotools.signal package", "neurotools.signal.coherence module", "neurotools.signal.conv module", "neurotools.signal.morlet module", "neurotools.signal.multitaper module", "neurotools.signal.ppc module", "neurotools.signal.savitskygolay module", "neurotools.signal.sde module", "neurotools.spatial package", "neurotools.spatial.array module", "neurotools.spatial.dct module", "neurotools.spatial.distance module", "neurotools.spatial.fftzeros module", "neurotools.spatial.geometry module", "neurotools.spatial.kernels module", "neurotools.spatial.masking module", "neurotools.spatial.phase module", "neurotools.spatial.points module", "neurotools.spatial.spiking module", "neurotools.spatial.triangulation module", "neurotools.spikes package", "neurotools.spikes.spikes module", "neurotools.spikes.waveform module", "neurotools.stats package", "neurotools.stats.circular module", "neurotools.stats.convolutional module", "neurotools.stats.density module", "neurotools.stats.distributions module", "neurotools.stats.fast_kde module", "neurotools.stats.gaussian module", "neurotools.stats.glm module", "neurotools.stats.grid_search module", "neurotools.stats.hmm module", "neurotools.stats.information module", "neurotools.stats.mcint module", "neurotools.stats.minimize module", "neurotools.stats.mixtures module", "neurotools.stats.modefind module", "neurotools.stats.pvalues module", "neurotools.stats.regressions module", "neurotools.util package", "neurotools.util.dependencies module", "neurotools.util.functions module", "neurotools.util.getfftw module", "neurotools.util.hdfmat module", "neurotools.util.string module", "neurotools.util.system module", "neurotools.util.time module", "neurotools.util.tools module"], "terms": {"python": [12, 13, 23, 27, 28, 30, 32, 79, 85, 86, 87, 90, 105, 120, 121, 214, 215, 216, 217, 218, 220, 230, 271, 280, 285, 286, 287, 290, 295, 310, 311, 374, 375, 376, 377], "modul": [47, 271, 272], "statist": [2, 9, 55, 62, 105, 110, 117, 140, 147, 153, 155, 160, 169, 172, 201, 218, 232, 234, 237, 246, 265, 271, 295, 300, 307, 329, 334, 338, 340, 345, 352, 353, 367], "model": [48, 105, 106, 169, 172, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 198, 218, 246, 248, 252, 255, 262, 271, 273, 295, 296, 352, 353, 355, 358, 359, 360, 361, 365], "comput": [8, 27, 31, 35, 85, 88, 93, 105, 116, 140, 141, 144, 146, 147, 149, 153, 154, 155, 156, 160, 163, 164, 167, 169, 172, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 202, 218, 232, 233, 234, 235, 237, 239, 240, 242, 246, 247, 249, 255, 256, 266, 271, 285, 288, 293, 295, 306, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 345, 347, 348, 350, 352, 353, 354, 356, 358, 361, 362, 368], "neurosci": [199, 263, 271, 366], "much": [13, 15, 105, 121, 123, 173, 196, 218, 247, 260, 271, 295, 311, 313, 354, 363], "packag": [47, 89, 271, 272, 289], "i": [7, 8, 11, 12, 13, 15, 18, 21, 23, 24, 25, 27, 28, 30, 31, 32, 35, 36, 38, 39, 74, 79, 80, 81, 85, 86, 87, 88, 90, 93, 94, 105, 115, 116, 119, 120, 121, 123, 126, 129, 130, 140, 141, 142, 144, 146, 147, 153, 154, 156, 158, 160, 161, 163, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 196, 199, 201, 213, 214, 215, 217, 218, 220, 230, 232, 233, 235, 236, 237, 239, 243, 247, 248, 249, 251, 252, 255, 256, 260, 263, 265, 271, 275, 280, 281, 282, 285, 286, 287, 288, 290, 293, 294, 295, 305, 306, 309, 310, 311, 313, 316, 319, 320, 329, 330, 331, 332, 333, 334, 338, 339, 341, 343, 345, 346, 347, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 373, 374, 375, 377], "research": [105, 218, 271, 295], "code": [8, 12, 13, 21, 27, 28, 31, 32, 35, 39, 74, 85, 86, 88, 90, 93, 105, 116, 120, 121, 130, 147, 154, 156, 177, 201, 218, 220, 233, 235, 251, 265, 271, 275, 285, 286, 288, 290, 293, 295, 306, 310, 311, 320, 334, 339, 341, 357, 367], "unstabl": 271, "refer": [12, 28, 35, 86, 93, 105, 120, 160, 201, 218, 237, 265, 271, 286, 293, 295, 310, 345, 367], "specif": [27, 31, 85, 88, 105, 218, 271, 285, 288, 295], "further": [153, 232, 271, 338], "document": [2, 7, 8, 18, 89, 110, 115, 116, 126, 140, 169, 173, 202, 247, 266, 271, 289, 300, 305, 306, 316, 329, 352, 354, 368], "thi": [8, 11, 12, 13, 15, 21, 23, 24, 27, 28, 31, 32, 35, 36, 39, 74, 79, 80, 85, 86, 88, 90, 93, 94, 105, 116, 119, 120, 121, 123, 130, 140, 141, 142, 144, 146, 147, 153, 154, 155, 156, 158, 160, 167, 168, 169, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 197, 198, 199, 201, 214, 215, 217, 218, 220, 232, 233, 234, 235, 236, 237, 242, 243, 247, 251, 252, 255, 260, 261, 262, 263, 265, 271, 275, 280, 281, 285, 286, 288, 290, 293, 294, 295, 306, 309, 310, 311, 313, 320, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 343, 345, 350, 351, 352, 354, 357, 358, 359, 361, 363, 364, 365, 366, 367, 374, 375, 377], "project": [105, 140, 155, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 234, 255, 271, 295, 329, 340, 358, 361], "confus": 271, "neural": [141, 187, 252, 271, 330, 359], "simul": [38, 105, 129, 150, 218, 271, 295, 319, 336], "depend": [24, 27, 28, 31, 35, 48, 80, 85, 86, 88, 93, 105, 141, 144, 153, 160, 169, 187, 201, 209, 218, 232, 237, 252, 265, 271, 273, 281, 285, 286, 288, 293, 295, 330, 332, 338, 345, 352, 359, 367, 369], "numpi": [0, 12, 21, 27, 30, 32, 35, 74, 85, 87, 90, 93, 105, 120, 140, 153, 156, 164, 169, 174, 187, 189, 198, 211, 217, 218, 232, 235, 240, 248, 252, 262, 271, 275, 285, 287, 290, 293, 295, 310, 329, 338, 341, 348, 352, 355, 359, 360, 365, 371, 377], "scipi": [27, 35, 36, 85, 93, 94, 105, 140, 164, 174, 175, 177, 187, 197, 198, 202, 218, 240, 248, 249, 251, 252, 261, 262, 266, 271, 285, 293, 294, 295, 329, 348, 355, 356, 357, 359, 364, 365, 368], "statsmodel": [169, 187, 252, 271, 352, 359], "panda": 271, "nipi": 271, "The": [12, 21, 27, 28, 30, 31, 32, 35, 36, 39, 74, 76, 85, 86, 87, 88, 90, 93, 94, 105, 120, 130, 140, 141, 146, 147, 153, 156, 160, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 201, 215, 217, 218, 220, 230, 232, 235, 237, 251, 252, 255, 265, 271, 275, 277, 285, 286, 287, 288, 290, 293, 294, 295, 310, 320, 329, 330, 333, 334, 338, 341, 345, 352, 357, 358, 359, 361, 367, 375, 377], "sourc": [0, 3, 8, 10, 11, 12, 14, 17, 18, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 108, 109, 111, 116, 118, 119, 120, 122, 125, 126, 129, 130, 140, 141, 142, 144, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 163, 164, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 196, 197, 198, 199, 201, 202, 211, 213, 214, 215, 216, 217, 220, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 251, 252, 255, 256, 260, 261, 262, 263, 265, 266, 271, 275, 276, 277, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 306, 308, 309, 310, 312, 315, 316, 319, 320, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377], "can": [8, 11, 21, 24, 27, 28, 30, 31, 32, 36, 74, 76, 80, 85, 86, 87, 88, 90, 94, 105, 116, 119, 140, 147, 153, 167, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 197, 217, 218, 220, 230, 232, 242, 246, 247, 256, 261, 271, 275, 277, 281, 285, 286, 287, 288, 290, 294, 295, 306, 309, 329, 334, 338, 350, 352, 353, 354, 358, 362, 364, 377], "brows": 271, "download": [105, 218, 271, 295], "from": [8, 11, 13, 24, 27, 31, 32, 35, 36, 38, 80, 85, 88, 89, 90, 93, 94, 105, 116, 119, 121, 129, 140, 147, 150, 153, 154, 155, 158, 160, 161, 164, 169, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 197, 198, 201, 202, 213, 217, 218, 220, 232, 233, 234, 236, 237, 240, 247, 248, 252, 255, 256, 261, 262, 265, 266, 271, 281, 285, 288, 289, 290, 293, 294, 295, 306, 309, 311, 319, 329, 334, 336, 338, 339, 340, 343, 345, 346, 348, 352, 354, 355, 358, 359, 360, 361, 362, 364, 365, 367, 368, 373, 377], "github": [177, 251, 271, 357], "ha": [24, 27, 31, 80, 85, 88, 105, 140, 141, 147, 153, 154, 160, 187, 218, 232, 233, 237, 252, 271, 281, 285, 288, 295, 329, 330, 334, 338, 339, 345, 359], "been": [27, 31, 85, 88, 105, 140, 147, 154, 187, 218, 233, 252, 271, 285, 288, 295, 329, 334, 339, 359], "review": 271, "prepar": [169, 271, 352], "us": [0, 8, 12, 13, 15, 18, 21, 23, 24, 27, 30, 31, 32, 35, 36, 39, 74, 75, 76, 79, 80, 85, 87, 88, 89, 90, 93, 94, 105, 116, 120, 121, 123, 126, 130, 140, 141, 142, 144, 146, 147, 149, 153, 154, 156, 160, 163, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 196, 197, 199, 201, 202, 211, 214, 217, 218, 220, 232, 233, 235, 237, 239, 242, 243, 246, 247, 248, 249, 251, 252, 255, 256, 260, 261, 263, 265, 266, 271, 275, 276, 277, 280, 281, 285, 287, 288, 289, 290, 293, 294, 295, 306, 310, 311, 313, 316, 320, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 374, 377], "gener": [13, 24, 27, 30, 31, 35, 36, 80, 85, 87, 88, 93, 94, 105, 121, 140, 141, 142, 149, 155, 158, 167, 169, 172, 173, 187, 218, 234, 236, 242, 246, 247, 252, 271, 281, 285, 287, 288, 293, 294, 295, 311, 329, 330, 331, 335, 340, 343, 350, 352, 353, 354, 359], "public": 271, "when": [27, 31, 32, 35, 85, 88, 90, 93, 105, 140, 147, 156, 191, 218, 235, 255, 271, 285, 288, 290, 293, 295, 329, 334, 341, 361], "otherwis": [12, 27, 85, 105, 120, 160, 187, 218, 237, 252, 271, 285, 295, 310, 345, 359], "specifi": [24, 27, 80, 85, 105, 140, 149, 154, 160, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 218, 220, 233, 237, 256, 271, 281, 285, 295, 329, 335, 339, 345, 352, 358, 362], "associ": [105, 147, 218, 220, 271, 295, 334], "content": [47, 105, 218, 271, 272, 295], "licens": 271, "under": [105, 169, 187, 218, 252, 271, 295, 352, 359], "creativ": 271, "common": [0, 23, 32, 79, 90, 105, 175, 187, 202, 211, 218, 249, 252, 266, 271, 280, 290, 295, 356, 359, 368, 371], "attribut": [89, 220, 271, 289], "non": [27, 28, 35, 85, 86, 89, 93, 105, 140, 153, 173, 187, 191, 201, 214, 218, 232, 247, 252, 255, 265, 271, 285, 286, 289, 293, 295, 329, 338, 354, 359, 361, 367, 374], "commerci": 271, "share": [11, 31, 88, 119, 271, 288, 309], "alik": 271, "3": [0, 21, 27, 28, 30, 36, 38, 74, 76, 85, 86, 87, 94, 105, 109, 129, 140, 141, 149, 153, 158, 164, 169, 187, 189, 191, 201, 211, 215, 218, 220, 232, 236, 240, 252, 255, 265, 271, 275, 277, 285, 286, 287, 294, 295, 299, 319, 329, 330, 335, 338, 343, 348, 352, 359, 360, 361, 367, 371, 375], "0": [13, 15, 21, 24, 25, 27, 35, 36, 38, 39, 74, 76, 77, 80, 81, 85, 93, 94, 105, 121, 123, 129, 130, 140, 141, 144, 146, 153, 154, 156, 158, 160, 163, 168, 169, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 198, 201, 202, 214, 217, 218, 220, 232, 233, 235, 236, 237, 239, 243, 247, 248, 249, 252, 255, 260, 262, 265, 266, 271, 275, 277, 278, 281, 282, 285, 293, 294, 295, 311, 313, 319, 320, 329, 330, 332, 333, 338, 339, 341, 343, 345, 347, 351, 352, 354, 355, 356, 358, 359, 361, 363, 365, 367, 368, 374, 377], "full": [27, 85, 105, 140, 168, 218, 243, 271, 285, 295, 329, 351], "index": [12, 32, 90, 105, 120, 140, 146, 153, 156, 161, 169, 173, 189, 217, 218, 232, 235, 247, 271, 290, 295, 310, 329, 333, 338, 341, 346, 352, 354, 360, 377], "signal": [24, 35, 38, 39, 47, 48, 80, 93, 105, 129, 130, 152, 153, 156, 160, 167, 168, 173, 218, 231, 232, 235, 237, 242, 243, 247, 271, 272, 273, 281, 293, 295, 319, 320, 337, 338, 341, 345, 350, 351, 354], "stat": [47, 48, 105, 140, 218, 271, 272, 273, 295, 329], "spatial": [47, 48, 271, 272, 273], "spike": [38, 39, 47, 48, 129, 130, 140, 147, 152, 173, 174, 187, 231, 247, 248, 252, 271, 272, 273, 319, 320, 329, 334, 337, 354, 355, 359], "graphic": [47, 48, 271, 272, 273], "linalg": [47, 48, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 271, 272, 273, 352, 358], "job": [47, 48, 271, 272, 273], "util": [2, 7, 13, 23, 47, 48, 55, 60, 79, 110, 115, 121, 158, 163, 236, 239, 271, 272, 273, 280, 300, 305, 311, 343, 347], "subpackag": [47, 272], "submodul": [2, 47, 55, 110, 272, 300], "obsolet": [47, 48, 142, 272, 273, 331], "nlab": [35, 47, 48, 93, 272, 273, 293], "random": [13, 47, 48, 105, 121, 140, 147, 201, 218, 265, 272, 273, 295, 311, 329, 334, 367], "beta": [47, 48, 105, 141, 218, 272, 273, 295, 330], "binomi": [47, 48, 105, 218, 272, 273, 295], "chisquar": [47, 48, 105, 218, 272, 273, 295], "choic": [47, 48, 105, 218, 272, 273, 295], "dirichlet": [36, 47, 48, 94, 105, 218, 272, 273, 294, 295], "exponenti": [0, 8, 13, 39, 47, 48, 105, 116, 121, 130, 150, 158, 187, 202, 211, 218, 236, 252, 266, 272, 273, 295, 306, 311, 320, 336, 343, 359, 368, 371], "f": [0, 8, 12, 13, 15, 24, 27, 28, 32, 39, 47, 48, 80, 85, 86, 89, 90, 105, 116, 120, 121, 123, 130, 140, 141, 144, 146, 147, 149, 153, 160, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 196, 209, 211, 214, 217, 218, 232, 237, 247, 255, 260, 272, 273, 281, 285, 286, 289, 290, 295, 306, 310, 311, 313, 320, 329, 330, 332, 333, 334, 335, 338, 345, 354, 358, 361, 363, 369, 371, 374, 377], "gamma": [47, 48, 105, 218, 272, 273, 295], "geometr": [47, 48, 105, 218, 272, 273, 295], "get_stat": [47, 48, 105, 218, 272, 273, 295], "gumbel": [47, 48, 105, 218, 272, 273, 295], "hypergeometr": [47, 48, 105, 218, 272, 273, 295], "laplac": [47, 48, 105, 191, 218, 255, 272, 273, 295, 361], "logist": [47, 48, 105, 187, 218, 252, 272, 273, 295, 359], "lognorm": [47, 48, 105, 218, 272, 273, 295], "logseri": [47, 48, 105, 218, 272, 273, 295], "multinomi": [47, 48, 105, 218, 272, 273, 295], "multivariate_norm": [47, 48, 105, 218, 272, 273, 295], "negative_binomi": [47, 48, 105, 218, 272, 273, 295], "noncentral_chisquar": [47, 48, 105, 218, 272, 273, 295], "noncentral_f": [47, 48, 105, 218, 272, 273, 295], "normal": [8, 13, 32, 36, 47, 48, 90, 94, 105, 116, 121, 140, 153, 158, 167, 168, 169, 175, 187, 218, 232, 236, 242, 243, 249, 252, 272, 273, 290, 294, 295, 306, 311, 329, 338, 343, 350, 351, 352, 356, 359], "pareto": [47, 48, 105, 218, 272, 273, 295], "permut": [47, 48, 105, 217, 218, 272, 273, 295, 377], "poisson": [47, 48, 105, 169, 175, 187, 191, 192, 198, 218, 249, 252, 255, 256, 262, 272, 273, 295, 352, 356, 359, 361, 362, 365], "power": [47, 48, 105, 146, 160, 202, 218, 237, 266, 272, 273, 295, 333, 345, 368], "rand": [13, 47, 48, 105, 121, 217, 218, 272, 273, 295, 311, 377], "randint": [47, 48, 105, 191, 218, 255, 272, 273, 295, 361], "randn": [35, 47, 48, 93, 105, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 202, 218, 260, 266, 272, 273, 293, 295, 358, 363, 368], "random_integ": [47, 48, 105, 218, 272, 273, 295], "random_sampl": [47, 48, 105, 218, 272, 273, 295], "rayleigh": [47, 48, 105, 218, 272, 273, 295], "seed": [47, 48, 105, 218, 272, 273, 295], "set_stat": [47, 48, 105, 218, 272, 273, 295], "shuffl": [35, 47, 48, 93, 105, 169, 218, 272, 273, 293, 295, 352], "standard_cauchi": [47, 48, 105, 218, 272, 273, 295], "standard_exponenti": [47, 48, 105, 218, 272, 273, 295], "standard_gamma": [47, 48, 105, 218, 272, 273, 295], "standard_norm": [47, 48, 105, 218, 272, 273, 295], "standard_t": [47, 48, 105, 218, 272, 273, 295], "triangular": [24, 35, 47, 48, 80, 93, 105, 218, 272, 273, 281, 293, 295], "uniform": [13, 47, 48, 105, 121, 140, 191, 218, 255, 272, 273, 295, 311, 329, 361], "vonmis": [47, 48, 105, 172, 218, 246, 272, 273, 295, 353], "wald": [47, 48, 105, 218, 272, 273, 295], "weibul": [47, 48, 105, 218, 272, 273, 295], "zipf": [47, 48, 105, 218, 272, 273, 295], "color": [20, 24, 25, 48, 73, 75, 76, 77, 80, 81, 105, 218, 273, 274, 276, 277, 278, 281, 282, 295], "rgb2hex": [20, 21, 48, 73, 74, 273, 274, 275], "hex2rgb": [20, 21, 48, 73, 74, 273, 274, 275], "hsv2rgb": [20, 21, 48, 73, 74, 273, 274, 275], "light": [20, 21, 24, 48, 73, 74, 80, 273, 274, 275, 281], "luminance_matrix": [20, 21, 48, 73, 74, 273, 274, 275], "match_lumin": [20, 21, 48, 73, 74, 273, 274, 275], "rotat": [20, 21, 24, 35, 36, 48, 73, 74, 80, 93, 94, 140, 147, 156, 168, 235, 243, 273, 274, 275, 281, 293, 294, 329, 334, 341, 351], "rgbtohcl": [20, 21, 48, 73, 74, 273, 274, 275], "hue_angl": [20, 21, 48, 73, 74, 273, 274, 275], "hcl2rgb": [20, 21, 48, 73, 74, 273, 274, 275], "circularly_smooth_colormap": [20, 21, 48, 73, 74, 273, 274, 275], "isoluminance1": [20, 21, 48, 73, 74, 273, 274, 275], "isoluminance2": [20, 21, 48, 73, 74, 273, 274, 275], "isoluminance3": [20, 21, 48, 73, 74, 273, 274, 275], "isoluminance4": [20, 21, 48, 73, 74, 273, 274, 275], "lighthu": [20, 21, 48, 73, 74, 273, 274, 275], "darkhu": [20, 21, 48, 73, 74, 273, 274, 275], "medhu": [20, 21, 48, 73, 74, 273, 274, 275], "radl2rgb": [20, 21, 48, 73, 74, 273, 274, 275], "radl2rgblut": [20, 21, 48, 73, 74, 273, 274, 275], "complexhlarr2rgb": [20, 21, 48, 73, 74, 273, 274, 275], "color_boxplot": [20, 21, 48, 73, 74, 273, 274, 275], "hex_pack_bgr": [20, 21, 48, 73, 74, 273, 274, 275], "code_to_16bit": [20, 21, 48, 73, 74, 273, 274, 275], "bit16_rgb_to_tupl": [20, 21, 48, 73, 74, 273, 274, 275], "enumerate_fast_color": [20, 21, 48, 73, 74, 273, 274, 275], "tuple_to_bit16": [20, 21, 48, 73, 74, 273, 274, 275], "tuple_to_bit24": [20, 21, 48, 73, 74, 273, 274, 275], "bit16_print_color": [20, 21, 48, 73, 74, 273, 274, 275], "show_fast_pallet": [20, 21, 48, 73, 74, 273, 274, 275], "show_complete_fast_pallet": [20, 21, 48, 73, 74, 273, 274, 275], "show_complete_fastest_pallet": [20, 21, 48, 73, 74, 273, 274, 275], "show_hex_pallet": [20, 21, 48, 73, 74, 273, 274, 275], "colormap": [21, 24, 48, 73, 74, 77, 80, 273, 274, 275, 278, 281], "test_colormap": [48, 73, 75, 273, 274, 276], "dendron": [48, 73, 273, 274], "list_lik": [48, 73, 76, 273, 274, 277], "get_depth": [48, 73, 76, 273, 274, 277], "count_nod": [48, 73, 76, 273, 274, 277], "inorder_travers": [48, 73, 76, 273, 274, 277], "plot_bracket": [48, 73, 76, 273, 274, 277], "plot_brackets_polar": [48, 73, 76, 273, 274, 277], "fabio_map": [48, 73, 75, 273, 274, 276], "imag": [18, 20, 24, 25, 48, 73, 80, 81, 126, 154, 177, 201, 233, 251, 265, 273, 274, 281, 282, 316, 339, 357, 367], "median_cent": [20, 22, 48, 73, 78, 273, 274, 279], "mean_cent": [20, 22, 48, 73, 78, 273, 274, 279], "unit": [13, 20, 22, 24, 38, 39, 48, 73, 78, 80, 105, 121, 129, 130, 140, 153, 156, 160, 167, 169, 174, 218, 232, 235, 237, 242, 248, 273, 274, 279, 281, 295, 311, 319, 320, 329, 338, 341, 345, 350, 352, 355], "visualize_deriv": [20, 22, 48, 73, 78, 273, 274, 279], "matplotlib": [20, 24, 48, 73, 75, 77, 80, 105, 156, 164, 218, 235, 240, 273, 274, 276, 278, 281, 295, 341, 348], "hide_toolbar": [20, 23, 48, 73, 79, 273, 274, 280], "start": [12, 20, 23, 24, 25, 48, 73, 79, 80, 81, 105, 120, 140, 218, 273, 274, 280, 281, 282, 295, 310, 329], "draw_arrai": [20, 23, 25, 48, 73, 79, 81, 273, 274, 280, 282], "plot": [2, 9, 20, 22, 23, 35, 39, 48, 55, 62, 73, 78, 79, 93, 105, 110, 117, 130, 156, 164, 172, 199, 202, 218, 235, 240, 246, 263, 266, 273, 274, 279, 280, 293, 295, 300, 307, 320, 341, 348, 353, 366, 368], "simpleaxi": [20, 24, 35, 48, 73, 80, 93, 273, 274, 281, 293], "rightaxi": [20, 24, 48, 73, 80, 273, 274, 281], "simpleraxi": [20, 24, 48, 73, 80, 273, 274, 281], "simplerright": [20, 24, 48, 73, 80, 273, 274, 281], "noaxi": [20, 24, 48, 73, 80, 273, 274, 281], "nicebp": [20, 24, 48, 73, 80, 273, 274, 281], "colored_boxplot": [20, 24, 48, 73, 80, 273, 274, 281], "nicei": [20, 24, 48, 73, 80, 273, 274, 281], "nicex": [20, 24, 48, 73, 80, 273, 274, 281], "nicexi": [20, 24, 48, 73, 80, 273, 274, 281], "positivex": [20, 24, 48, 73, 80, 273, 274, 281], "positivei": [20, 24, 48, 73, 80, 273, 274, 281], "positivexi": [20, 24, 48, 73, 80, 273, 274, 281], "xylim": [20, 24, 48, 73, 80, 273, 274, 281], "noclip": [20, 24, 48, 73, 80, 273, 274, 281], "notick": [20, 24, 48, 73, 80, 273, 274, 281], "nox": [20, 24, 48, 73, 80, 273, 274, 281], "noi": [20, 24, 48, 73, 80, 273, 274, 281], "noxyax": [20, 24, 48, 73, 80, 273, 274, 281], "noxlabel": [20, 24, 48, 73, 80, 273, 274, 281], "noylabel": [20, 24, 48, 73, 80, 273, 274, 281], "nolabel": [20, 24, 48, 73, 80, 273, 274, 281], "righti": [20, 24, 48, 73, 80, 273, 274, 281], "uniti": [20, 24, 48, 73, 80, 273, 274, 281], "unitx": [20, 24, 48, 73, 80, 273, 274, 281], "force_aspect": [20, 24, 35, 48, 73, 80, 93, 273, 274, 281, 293], "get_aspect": [20, 24, 48, 73, 80, 273, 274, 281], "match_image_aspect": [20, 24, 48, 73, 80, 273, 274, 281], "unitax": [20, 24, 48, 73, 80, 273, 274, 281], "adjustmap": [20, 24, 48, 73, 80, 273, 274, 281], "get_ax_s": [20, 24, 48, 73, 80, 273, 274, 281], "get_ax_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "get_ax_pixel_ratio": [20, 24, 48, 73, 80, 273, 274, 281], "pixels_to_xunit": [20, 24, 48, 73, 80, 273, 274, 281], "yunits_to_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "xunits_to_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "pixels_to_yunit": [20, 24, 48, 73, 80, 273, 274, 281], "pixels_to_xfigureunit": [20, 24, 48, 73, 80, 273, 274, 281], "pixels_to_yfigureunit": [20, 24, 48, 73, 80, 273, 274, 281], "xfigureunits_to_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "yfigureunits_to_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "px2x": [20, 24, 48, 73, 80, 273, 274, 281], "px2y": [20, 24, 48, 73, 80, 273, 274, 281], "adjust_ylabel_spac": [20, 24, 48, 73, 80, 273, 274, 281], "adjust_xlabel_spac": [20, 24, 48, 73, 80, 273, 274, 281], "get_bbox": [20, 24, 48, 73, 80, 273, 274, 281], "nudge_axis_y_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "adjust_axis_height_pixel": [20, 24, 48, 73, 80, 273, 274, 281], "nudge_axis_i": [20, 24, 48, 73, 80, 273, 274, 281], "nudge_axis_x": [20, 24, 48, 73, 80, 273, 274, 281], "expand_axis_x": [20, 24, 48, 73, 80, 273, 274, 281], "expand_axis_i": [20, 24, 48, 73, 80, 273, 274, 281], "nudge_axis_baselin": [20, 24, 48, 73, 80, 273, 274, 281], "nudge_axis_left": [20, 24, 48, 73, 80, 273, 274, 281], "zoombox": [20, 24, 48, 73, 80, 273, 274, 281], "fudgex": [20, 24, 48, 73, 80, 273, 274, 281], "fudgei": [20, 24, 48, 73, 80, 273, 274, 281], "fudgexi": [20, 24, 48, 73, 80, 273, 274, 281], "shade_edg": [20, 24, 48, 73, 80, 273, 274, 281], "ybartext": [20, 24, 48, 73, 80, 273, 274, 281], "xbartext": [20, 24, 48, 73, 80, 273, 274, 281], "nice_legend": [20, 24, 48, 73, 80, 273, 274, 281], "right_legend": [20, 24, 48, 73, 80, 273, 274, 281], "left_legend": [20, 24, 48, 73, 80, 273, 274, 281], "base_legend": [20, 24, 48, 73, 80, 273, 274, 281], "rangeto": [20, 24, 48, 73, 80, 273, 274, 281], "rangeov": [20, 24, 48, 73, 80, 273, 274, 281], "cleartop": [20, 24, 48, 73, 80, 273, 274, 281], "plotcwt": [20, 24, 48, 73, 80, 273, 274, 281], "plotwtphas": [20, 24, 48, 73, 80, 273, 274, 281], "wtpshow": [20, 24, 48, 73, 80, 273, 274, 281], "plotwtphasefig": [20, 24, 48, 73, 80, 273, 274, 281], "domask": [20, 24, 48, 73, 80, 273, 274, 281], "fsize": [20, 24, 48, 73, 80, 273, 274, 281], "handlersquar": [20, 24, 48, 73, 80, 273, 274, 281], "plot_complex": [20, 24, 48, 73, 80, 273, 274, 281], "animate_complex": [20, 24, 48, 73, 80, 273, 274, 281], "good_colorbar": [20, 24, 48, 73, 80, 273, 274, 281], "complex_axi": [20, 24, 48, 73, 80, 273, 274, 281], "subfigurelabel": [20, 24, 48, 73, 80, 273, 274, 281], "sigbar": [20, 24, 48, 73, 80, 273, 274, 281], "hsigbar": [20, 24, 48, 73, 80, 273, 274, 281], "savefigur": [20, 24, 48, 73, 80, 273, 274, 281], "clean_y_rang": [20, 24, 48, 73, 80, 273, 274, 281], "round_to_precis": [20, 24, 48, 73, 80, 273, 274, 281], "ceil_to_precis": [20, 24, 48, 73, 80, 273, 274, 281], "floor_to_precis": [20, 24, 48, 73, 80, 273, 274, 281], "expand_y_rang": [20, 24, 48, 73, 80, 273, 274, 281], "gaussian2d_covellips": [20, 24, 48, 73, 80, 273, 274, 281], "stderrplot": [20, 24, 48, 73, 80, 273, 274, 281], "yscalebar": [20, 24, 48, 73, 80, 273, 274, 281], "xscalebar": [20, 24, 48, 73, 80, 273, 274, 281], "addspik": [20, 24, 48, 73, 80, 273, 274, 281], "unit_crosshair": [20, 24, 48, 73, 80, 273, 274, 281], "covariance_crosshair": [20, 24, 48, 73, 80, 273, 274, 281], "draw_circl": [20, 24, 48, 73, 80, 273, 274, 281], "simple_arrow": [20, 24, 48, 73, 80, 273, 274, 281], "inhibition_arrow": [20, 24, 48, 73, 80, 273, 274, 281], "figurebox": [20, 24, 48, 73, 80, 273, 274, 281], "more_xtick": [20, 24, 48, 73, 80, 273, 274, 281], "more_ytick": [20, 24, 48, 73, 80, 273, 274, 281], "border_width": [20, 24, 48, 73, 80, 273, 274, 281], "broken_step": [20, 24, 48, 73, 80, 273, 274, 281], "label": [20, 24, 48, 73, 80, 105, 169, 201, 218, 265, 273, 274, 281, 295, 352, 367], "flathist": [20, 24, 48, 73, 80, 273, 274, 281], "barcompar": [20, 24, 48, 73, 80, 273, 274, 281], "shellmean": [20, 24, 48, 73, 80, 273, 274, 281], "trendlin": [20, 24, 48, 73, 80, 273, 274, 281], "shellplot": [20, 24, 48, 73, 80, 273, 274, 281], "arrow_between": [20, 24, 48, 73, 80, 273, 274, 281], "splitz": [20, 24, 48, 73, 80, 273, 274, 281], "plotz": [20, 24, 48, 73, 80, 273, 274, 281], "save_limit": [20, 24, 48, 73, 80, 273, 274, 281], "restore_limit": [20, 24, 48, 73, 80, 273, 274, 281], "mock_legend": [20, 24, 48, 73, 80, 273, 274, 281], "xtickpad": [20, 24, 48, 73, 80, 273, 274, 281], "ytickpad": [20, 24, 48, 73, 80, 273, 274, 281], "xticklen": [20, 24, 48, 73, 80, 273, 274, 281], "yticklen": [20, 24, 48, 73, 80, 273, 274, 281], "xin": [20, 24, 48, 73, 80, 187, 252, 273, 274, 281, 359], "yin": [20, 24, 48, 73, 80, 273, 274, 281], "lighten": [20, 24, 48, 73, 80, 273, 274, 281], "darken": [20, 24, 48, 73, 80, 273, 274, 281], "axvstrip": [20, 24, 48, 73, 80, 273, 274, 281], "widths_to_edg": [20, 24, 48, 73, 80, 273, 274, 281], "center": [20, 24, 36, 48, 73, 80, 94, 105, 140, 153, 156, 158, 169, 174, 187, 218, 232, 235, 236, 248, 252, 273, 274, 281, 294, 295, 329, 338, 341, 343, 352, 355, 359], "widths_to_cent": [20, 24, 48, 73, 80, 273, 274, 281], "axvband": [20, 24, 48, 73, 80, 273, 274, 281], "zerohlin": [20, 24, 48, 73, 80, 273, 274, 281], "zerovlin": [20, 24, 48, 73, 80, 273, 274, 281], "boxplot_signific": [20, 24, 48, 73, 80, 273, 274, 281], "pikeplot": [20, 24, 48, 73, 80, 273, 274, 281], "pygam": [20, 48, 73, 273, 274], "enable_vsync": [20, 25, 48, 73, 81, 273, 274, 282], "ztransform_plot_help": [48, 73, 273, 274], "cach": [26, 28, 30, 31, 48, 84, 86, 87, 88, 89, 105, 146, 217, 218, 273, 284, 286, 287, 288, 289, 295, 333, 377], "function_hash_with_subroutin": [26, 27, 48, 84, 85, 273, 284, 285], "get_sourc": [26, 27, 48, 84, 85, 273, 284, 285], "function_hash_no_subroutin": [26, 27, 48, 84, 85, 273, 284, 285], "base64hash": [26, 27, 48, 84, 85, 273, 284, 285], "base64hash2byt": [26, 27, 48, 84, 85, 273, 284, 285], "function_signatur": [26, 27, 48, 84, 85, 273, 284, 285], "signature_to_file_str": [26, 27, 48, 84, 85, 273, 284, 285], "file_string_to_signatur": [26, 27, 48, 84, 85, 273, 284, 285], "human_encod": [26, 27, 48, 84, 85, 273, 284, 285], "human_decod": [26, 27, 48, 84, 85, 273, 284, 285], "get_cache_path": [26, 27, 48, 84, 85, 273, 284, 285], "locate_cach": [26, 27, 48, 84, 85, 273, 284, 285], "validate_for_matfil": [26, 27, 48, 84, 85, 273, 284, 285], "validate_for_numpi": [26, 27, 48, 84, 85, 273, 284, 285], "read_cache_entri": [26, 27, 48, 84, 85, 273, 284, 285], "disk_cach": [26, 27, 48, 84, 85, 273, 284, 285], "hierarchical_cach": [26, 27, 48, 84, 85, 273, 284, 285], "closur": [26, 48, 84, 273, 284], "is_immut": [26, 28, 48, 84, 86, 273, 284, 286], "is_probably_saf": [26, 28, 48, 84, 86, 273, 284, 286], "csv": [26, 28, 48, 84, 86, 273, 284, 286], "inspect_function_closur": [26, 28, 48, 84, 86, 273, 284, 286], "verify_function_closur": [26, 28, 48, 84, 86, 273, 284, 286], "get_subroutin": [26, 28, 48, 84, 86, 273, 284, 286], "filenam": [18, 26, 27, 48, 84, 85, 126, 273, 284, 285, 316], "validate_argument_signatur": [26, 30, 48, 84, 87, 273, 284, 287], "is_dangerous_filenam": [26, 30, 48, 84, 87, 273, 284, 287], "check_filenam": [26, 30, 48, 84, 87, 273, 284, 287], "initialize_system_cach": [26, 48, 84, 273, 284], "purge_ram_cach": [26, 31, 48, 84, 88, 273, 284, 288], "purge_ssd_cach": [26, 31, 48, 84, 88, 273, 284, 288], "du": [26, 31, 38, 48, 84, 88, 129, 273, 284, 288, 319], "reset_ramdisk": [26, 31, 48, 84, 88, 273, 284, 288], "launch_cache_synchron": [26, 31, 48, 84, 88, 273, 284, 288], "initialize_cach": [26, 31, 48, 84, 88, 273, 284, 288], "cache_test": [26, 31, 48, 84, 88, 273, 284, 288], "ndecor": [31, 48, 84, 88, 273, 284, 288], "listit": [48, 84, 89, 273, 284, 289], "tupleit": [48, 84, 89, 273, 284, 289], "sanit": [48, 84, 89, 273, 284, 289], "summarize_funct": [48, 84, 89, 273, 284, 289], "argument_signatur": [27, 48, 84, 85, 89, 273, 284, 285, 289], "print_signatur": [48, 84, 89, 273, 284, 289], "time": [18, 24, 27, 32, 36, 38, 39, 48, 80, 84, 85, 89, 90, 94, 105, 126, 129, 130, 140, 141, 144, 146, 147, 150, 153, 155, 156, 158, 160, 167, 168, 169, 173, 174, 187, 191, 197, 199, 202, 209, 218, 232, 234, 235, 236, 237, 242, 243, 247, 248, 252, 255, 261, 263, 266, 273, 281, 284, 285, 289, 290, 294, 295, 316, 319, 320, 329, 330, 332, 333, 334, 336, 338, 340, 341, 343, 345, 350, 351, 352, 354, 355, 359, 361, 364, 366, 368, 369], "clear_memo": [48, 84, 89, 273, 284, 289], "memoiz": [13, 27, 31, 48, 84, 85, 88, 89, 121, 273, 284, 285, 288, 289, 311], "unwrap": [48, 84, 89, 140, 160, 237, 273, 284, 289, 329, 345], "parallel": [15, 26, 48, 84, 123, 214, 273, 284, 313, 374], "parmap": [26, 32, 48, 84, 90, 273, 284, 290], "pararraymap": [26, 32, 48, 84, 90, 273, 284, 290], "parmap_dict": [26, 32, 48, 84, 90, 273, 284, 290], "function_fingerprint": [26, 32, 48, 84, 90, 273, 284, 290], "eval_from_cach": [26, 32, 48, 84, 90, 273, 284, 290], "parallel_indirect_wrapp": [26, 32, 48, 84, 90, 273, 284, 290], "parallel_cached_wrapp": [26, 32, 48, 84, 90, 273, 284, 290], "parimap": [26, 32, 48, 84, 90, 273, 284, 290], "close_pool": [26, 32, 48, 84, 90, 273, 284, 290], "reset_pool": [26, 32, 48, 84, 90, 273, 284, 290], "parallel_error_handl": [26, 32, 48, 84, 90, 273, 284, 290], "argument": [8, 12, 24, 27, 28, 30, 32, 33, 48, 80, 85, 86, 87, 89, 90, 91, 105, 116, 120, 140, 144, 164, 187, 189, 217, 218, 220, 230, 240, 252, 273, 281, 285, 286, 287, 289, 290, 291, 295, 306, 310, 329, 332, 348, 359, 360, 377], "issquar": [33, 34, 48, 91, 92, 273, 291, 292], "iscolumn": [33, 34, 48, 91, 92, 273, 291, 292], "isrow": [33, 34, 48, 91, 92, 273, 291, 292], "asrow": [33, 34, 48, 91, 92, 273, 291, 292], "ascolumn": [33, 34, 48, 91, 92, 273, 291, 292], "assquar": [33, 34, 48, 91, 92, 273, 291, 292], "assertsquar": [33, 34, 48, 91, 92, 273, 291, 292], "assertcolumn": [33, 34, 48, 91, 92, 273, 291, 292], "assertrow": [33, 34, 48, 91, 92, 273, 291, 292], "assertvector": [33, 34, 48, 91, 92, 273, 291, 292], "asvector": [33, 34, 48, 91, 92, 273, 291, 292], "scalar": [0, 8, 21, 24, 33, 34, 35, 48, 74, 80, 91, 92, 93, 105, 116, 147, 169, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 201, 211, 214, 218, 247, 248, 252, 265, 273, 275, 281, 291, 292, 293, 295, 306, 334, 352, 354, 355, 358, 359, 360, 367, 371, 374], "assertfinit": [33, 34, 48, 91, 92, 273, 291, 292], "assertr": [33, 34, 48, 91, 92, 273, 291, 292], "assertfiniter": [33, 34, 48, 91, 92, 273, 291, 292], "assertshap": [33, 34, 48, 91, 92, 273, 291, 292], "matrix": [2, 3, 8, 9, 18, 24, 33, 36, 48, 55, 56, 62, 80, 91, 94, 105, 110, 111, 116, 117, 126, 140, 141, 146, 160, 169, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 218, 237, 247, 251, 252, 255, 273, 281, 291, 294, 295, 300, 301, 306, 307, 316, 329, 330, 333, 345, 352, 354, 357, 358, 359, 361], "triu_el": [33, 35, 48, 91, 93, 273, 291, 293], "tril_el": [33, 35, 48, 91, 93, 273, 291, 293], "column": [33, 35, 38, 48, 91, 93, 129, 153, 156, 187, 214, 232, 235, 252, 273, 291, 293, 319, 338, 341, 359, 374], "row": [8, 12, 33, 35, 48, 91, 93, 105, 116, 120, 153, 156, 164, 218, 232, 235, 240, 273, 291, 293, 295, 306, 310, 338, 341, 348], "rcond": [33, 35, 48, 91, 93, 273, 291, 293], "check_finite_r": [33, 35, 48, 91, 93, 273, 291, 293], "check_covmat": [33, 35, 48, 91, 93, 273, 291, 293], "check_covmat_fast": [33, 35, 48, 91, 93, 273, 291, 293], "real_eig": [33, 35, 48, 91, 93, 273, 291, 293], "psd_eig": [33, 35, 48, 91, 93, 273, 291, 293], "logdet": [33, 35, 48, 91, 93, 273, 291, 293], "solt": [33, 35, 48, 91, 93, 273, 291, 293], "rsolt": [33, 35, 48, 91, 93, 273, 291, 293], "rsolv": [33, 35, 48, 91, 93, 273, 291, 293], "qf": [33, 35, 48, 91, 93, 273, 291, 293], "abserr": [33, 35, 48, 91, 93, 273, 291, 293], "errmx": [33, 35, 48, 91, 93, 273, 291, 293], "cholupd": [33, 35, 48, 91, 93, 273, 291, 293], "cholupdate_ey": [33, 35, 48, 91, 93, 273, 291, 293], "cartesian_product": [33, 35, 48, 91, 93, 273, 291, 293], "nearpdhigham": [33, 35, 48, 91, 93, 273, 291, 293], "nearpsdrebonatojackel": [33, 35, 48, 91, 93, 273, 291, 293], "cinv": [33, 35, 48, 91, 93, 273, 291, 293], "csolv": [33, 35, 48, 91, 93, 273, 291, 293], "wheremax": [33, 35, 48, 91, 93, 273, 291, 293], "wheremin": [33, 35, 48, 91, 93, 273, 291, 293], "reglstsq": [33, 35, 48, 91, 93, 273, 291, 293], "ldistanc": [33, 35, 48, 91, 93, 273, 291, 293], "llasso": [33, 35, 48, 91, 93, 273, 291, 293], "rmatrix": [33, 35, 48, 91, 93, 273, 291, 293], "ldiv": [2, 7, 8, 33, 35, 48, 91, 93, 110, 115, 116, 273, 291, 293, 300, 305, 306], "rdiv": [33, 35, 48, 91, 93, 273, 291, 293], "autopredict": [33, 35, 48, 91, 93, 273, 291, 293], "kronsum": [33, 35, 48, 91, 93, 273, 291, 293], "top_v": [33, 35, 48, 91, 93, 273, 291, 293], "normedcovari": [33, 35, 48, 91, 93, 273, 291, 293], "maxeig": [33, 35, 48, 91, 93, 273, 291, 293], "selector_matrix": [33, 35, 48, 91, 93, 273, 291, 293], "laplace_kernel": [33, 35, 48, 91, 93, 152, 158, 231, 236, 273, 291, 293, 337, 343], "match_covari": [33, 35, 48, 91, 93, 273, 291, 293], "oper": [8, 12, 13, 33, 35, 48, 91, 93, 116, 120, 121, 140, 160, 169, 173, 191, 217, 237, 247, 255, 273, 291, 293, 306, 310, 311, 329, 345, 352, 354, 361, 377], "adjacency1d": [33, 36, 48, 91, 94, 273, 291, 294], "laplacian1d_circular": [33, 36, 48, 91, 94, 273, 291, 294], "adjacency2d": [33, 36, 48, 91, 94, 273, 291, 294], "laplacian2d": [33, 36, 48, 91, 94, 273, 291, 294], "adjacency2d_circular": [33, 36, 48, 91, 94, 273, 291, 294], "adjacency2d_rot": [33, 36, 48, 91, 94, 273, 291, 294], "laplacian1d": [33, 36, 48, 91, 94, 273, 291, 294], "laplacianft1d": [33, 36, 48, 91, 94, 273, 291, 294], "wienerft1d": [33, 36, 48, 91, 94, 273, 291, 294], "diffuseft1d": [33, 36, 48, 91, 94, 273, 291, 294], "flatcov": [33, 36, 48, 91, 94, 273, 291, 294], "delta": [33, 36, 48, 91, 94, 147, 161, 187, 201, 252, 265, 273, 291, 294, 334, 346, 359, 367], "differenti": [33, 36, 39, 48, 91, 94, 130, 140, 149, 153, 156, 178, 179, 180, 181, 182, 183, 184, 185, 186, 232, 235, 273, 291, 294, 320, 329, 335, 338, 341, 358], "integr": [33, 36, 39, 48, 91, 94, 130, 158, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 236, 249, 252, 255, 260, 273, 291, 294, 320, 343, 356, 358, 359, 361, 363], "covfrom": [33, 36, 48, 91, 94, 273, 291, 294], "oucov": [33, 36, 48, 91, 94, 273, 291, 294], "gaussian1dbluroper": [33, 36, 48, 91, 94, 273, 291, 294], "circular1dbluroper": [33, 36, 48, 91, 94, 273, 291, 294], "separable_guassian_blur": [33, 36, 48, 91, 94, 273, 291, 294], "gaussian2dbluroper": [33, 36, 48, 91, 94, 273, 291, 294], "cosine_kernel": [33, 36, 48, 91, 94, 152, 158, 169, 187, 231, 236, 252, 273, 291, 294, 337, 343, 352, 359], "log_cosine_basi": [33, 36, 48, 91, 94, 152, 158, 169, 187, 231, 236, 252, 273, 291, 294, 337, 343, 352, 359], "make_cosine_basi": [33, 36, 48, 91, 94, 152, 158, 169, 187, 231, 236, 252, 273, 291, 294, 337, 343, 352, 359], "encod": [27, 48, 85, 106, 140, 153, 161, 232, 273, 285, 296, 329, 338, 346], "gpu": [48, 106, 273, 296], "opto": [48, 106, 273, 296], "coher": [48, 140, 144, 146, 153, 160, 173, 220, 232, 237, 247, 273, 329, 332, 333, 338, 345, 354], "morlet_population_synchrony_spectrum": [48, 140, 141, 273, 329, 330], "population_eigencoher": [48, 140, 141, 273, 329, 330], "population_coherence_matrix": [48, 140, 141, 273, 329, 330], "multitaper_coher": [48, 140, 141, 273, 329, 330], "sliding_multitaper_coher": [48, 140, 141, 273, 329, 330], "sliding_multitaper_coherence_parallel": [48, 140, 141, 273, 329, 330], "coherence_pvalu": [48, 140, 141, 273, 329, 330], "multitaper_multitrial_coher": [48, 140, 141, 273, 329, 330], "conv": [48, 140, 220, 273, 329], "reflect2d": [48, 140, 142, 273, 329, 331], "reflect2d_1": [48, 140, 142, 273, 329, 331], "mirror2d": [48, 140, 142, 152, 156, 231, 235, 273, 329, 331, 337, 341], "convolve2dct": [48, 140, 142, 273, 329, 331], "separable2d": [48, 140, 142, 273, 329, 331], "gausskern2d": [48, 140, 142, 273, 329, 331], "gausskern1d": [48, 140, 142, 273, 329, 331], "morlet": [48, 140, 141, 220, 273, 329, 330], "normalized_morlet": [48, 140, 144, 273, 329, 332], "prepare_wavelet_fft_basi": [48, 140, 144, 273, 329, 332], "fft_cwt": [48, 140, 144, 273, 329, 332], "logfreq": [48, 140, 144, 273, 329, 332], "prepare_wavelet_fft_basis_logspac": [48, 140, 144, 273, 329, 332], "population_synchrony_spectrum": [48, 140, 144, 273, 329, 332], "fft_cwt_transpos": [48, 140, 144, 273, 329, 332], "fft_cwt_transposed_logspac": [48, 140, 144, 273, 329, 332], "multitap": [48, 140, 141, 147, 220, 273, 329, 330, 334], "dpss_cach": [48, 140, 146, 273, 329, 333], "multitaper_spectrum": [48, 140, 146, 273, 329, 333], "multitaper_squared_spectrum": [48, 140, 146, 273, 329, 333], "sliding_multitaper_spectrum": [48, 140, 146, 273, 329, 333], "multitaper_population_eigencoher": [48, 140, 146, 273, 329, 333], "ppc": [48, 140, 220, 273, 329], "phase_random": [48, 140, 147, 273, 329, 334], "fftppc_bias": [48, 140, 147, 273, 329, 334], "fftppc": [48, 140, 147, 273, 329, 334], "fftppc_biased_multitap": [48, 140, 147, 273, 329, 334], "fftppc_multitap": [48, 140, 147, 273, 329, 334], "discard_spikes_closer_than_delta": [48, 140, 147, 273, 329, 334], "pairwise_phase_consist": [48, 140, 147, 273, 329, 334], "estimate_bias_in_uncorrected_ppc": [48, 140, 147, 273, 329, 334], "phase_randomized_bias_correct": [48, 140, 147, 273, 329, 334], "ppc_chance_level": [48, 140, 147, 273, 329, 334], "ppc_phase_randomize_chance_level_sampl": [48, 140, 147, 273, 329, 334], "savitskygolai": [48, 140, 220, 273, 329], "sgord": [48, 140, 149, 273, 329, 335], "sgkern": [48, 140, 149, 273, 329, 335], "sgkernv": [48, 140, 149, 273, 329, 335], "sgkerna": [48, 140, 149, 273, 329, 335], "sgkernj": [48, 140, 149, 273, 329, 335], "sgfilt": [48, 140, 149, 273, 329, 335], "sgfiltv": [48, 140, 149, 273, 329, 335], "sgfilta": [48, 140, 149, 273, 329, 335], "sgfiltj": [48, 140, 149, 273, 329, 335], "sgsmooth": [48, 140, 149, 273, 329, 335], "sgdifferenti": [48, 140, 149, 273, 329, 335], "sgacceler": [48, 140, 149, 273, 329, 335], "sgjerk": [48, 140, 149, 273, 329, 335], "sde": [48, 140, 273, 329], "sample_wiener_process": [48, 140, 150, 273, 329, 336], "sample_ou_process": [48, 140, 150, 273, 329, 336], "geometric_window": [48, 140, 273, 329], "gaussian_kernel": [48, 140, 273, 329], "gaussian_smooth": [48, 140, 273, 329], "circular_gaussian_smooth": [48, 140, 273, 329], "circular_gaussian_smooth_2d": [48, 140, 273, 329], "linear_cosine_basi": [48, 140, 273, 329], "circular_cosine_basi": [48, 140, 273, 329], "unitscal": [48, 140, 273, 329], "topercentil": [48, 140, 273, 329], "local_maxima": [48, 140, 273, 329], "local_minima": [48, 140, 273, 329], "amp": [48, 140, 154, 233, 273, 329, 339], "get_snip": [48, 140, 273, 329], "triggered_averag": [48, 140, 273, 329], "get_triggered_stat": [48, 140, 273, 329], "padout": [48, 140, 273, 329], "padin": [48, 140, 273, 329], "nonnegative_bandpass_filt": [48, 140, 273, 329], "pad_sign": [48, 140, 273, 329], "bandpass_filt": [48, 140, 273, 329], "box_filt": [48, 140, 273, 329], "median_filt": [48, 140, 273, 329], "percentile_filt": [48, 140, 273, 329], "variance_filt": [48, 140, 273, 329], "rewrap": [48, 140, 273, 329], "pdiff": [48, 140, 273, 329], "pghilbert": [48, 140, 273, 329], "fudge_deriv": [48, 140, 273, 329], "ifreq": [48, 140, 273, 329], "ang": [48, 140, 273, 329], "randband": [48, 140, 273, 329], "arenear": [48, 140, 273, 329], "aresaf": [48, 140, 273, 329], "get_edg": [48, 140, 273, 329], "set_edg": [48, 140, 273, 329], "remove_gap": [48, 140, 273, 329], "remove_short": [48, 140, 273, 329], "phase_rot": [48, 140, 273, 329], "fm_mod": [48, 140, 273, 329], "piec": [48, 105, 140, 218, 273, 295, 329], "stats_block": [48, 140, 273, 329], "mean_block": [48, 140, 273, 329], "var_block": [48, 140, 273, 329], "median_block": [48, 140, 273, 329], "phase_randomize_from_amplitud": [48, 140, 273, 329], "estimate_pad": [48, 140, 273, 329], "lowpass_filt": [48, 140, 273, 329], "highpass_filt": [48, 140, 273, 329], "fdiff": [48, 140, 273, 329], "interpolate_nan": [48, 140, 273, 329], "interpolate_nan_quadrat": [48, 140, 273, 329], "killspik": [48, 140, 273, 329], "peak_within": [48, 140, 273, 329], "local_peak_within": [48, 140, 273, 329], "zeromean": [48, 140, 273, 329], "zscore": [48, 140, 217, 273, 329, 377], "gaussian": [0, 21, 24, 36, 48, 74, 80, 94, 105, 140, 142, 156, 158, 169, 172, 173, 177, 191, 201, 211, 218, 235, 236, 246, 247, 251, 255, 265, 273, 275, 281, 294, 295, 329, 331, 341, 343, 352, 353, 354, 357, 361, 367, 371], "deltaovermean": [48, 140, 273, 329], "unit_length": [48, 140, 273, 329], "sign_preserving_amplitude_demodul": [48, 140, 273, 329], "autocorrel": [48, 140, 147, 173, 247, 273, 329, 334, 354], "upsampl": [48, 140, 153, 232, 273, 329, 338], "linfilt": [48, 140, 273, 329], "span": [24, 36, 48, 80, 94, 140, 158, 167, 169, 187, 236, 242, 252, 273, 281, 294, 329, 343, 350, 352, 359], "make_lag": [48, 140, 273, 329], "zgrid": [48, 140, 273, 329], "nice_interp": [48, 140, 273, 329], "fftacorr1d": [48, 140, 273, 329], "fftsta": [48, 140, 273, 329], "interpmax1d": [48, 140, 273, 329], "spaced_deriv": [48, 140, 273, 329], "drop_nonfinit": [48, 140, 273, 329], "split_into_group": [48, 140, 273, 329], "invert_uniform": [48, 140, 273, 329], "virtual_reference_line_noise_remov": [48, 140, 273, 329], "band_stop_line_noise_remov": [48, 140, 273, 329], "ndargmax": [48, 140, 273, 329], "complex_to_nan": [48, 140, 273, 329], "make_rebroadcast_slic": [48, 140, 273, 329], "arrai": [0, 8, 12, 13, 21, 24, 25, 27, 35, 36, 38, 48, 74, 80, 81, 85, 93, 94, 105, 116, 120, 121, 129, 140, 142, 144, 147, 149, 152, 154, 155, 156, 158, 160, 161, 163, 164, 167, 168, 169, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 196, 198, 199, 202, 211, 217, 218, 231, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 247, 251, 252, 255, 256, 260, 262, 263, 266, 273, 275, 281, 282, 285, 293, 294, 295, 306, 310, 311, 319, 329, 331, 332, 334, 335, 337, 339, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 365, 366, 368, 371, 377], "array_average_amplitud": [48, 152, 153, 231, 232, 273, 337, 338], "array_kuramoto": [48, 152, 153, 231, 232, 273, 337, 338], "array_synchroni": [48, 152, 153, 231, 232, 273, 337, 338], "array_kuramoto_standard_devi": [48, 152, 153, 231, 232, 273, 337, 338], "array_synchrony_standard_devi": [48, 152, 153, 231, 232, 273, 337, 338], "array_phase_gradi": [48, 152, 153, 231, 232, 273, 337, 338], "array_count_cent": [48, 152, 153, 231, 232, 273, 337, 338], "array_count_crit": [48, 152, 153, 231, 232, 273, 337, 338], "array_phasegradient_loc": [48, 152, 153, 231, 232, 273, 337, 338], "array_phasegradient_planar": [48, 152, 153, 231, 232, 273, 337, 338], "array_phasegradient_magnitude_sigma": [48, 152, 153, 231, 232, 273, 337, 338], "array_phasegradient_magnitude_cv": [48, 152, 153, 231, 232, 273, 337, 338], "array_phasegradient_pgd_threshold": [48, 152, 153, 231, 232, 273, 337, 338], "array_wavelength_pgd_threshold": [48, 152, 153, 231, 232, 273, 337, 338], "array_wavelength_local_pgd_threshold": [48, 152, 153, 231, 232, 273, 337, 338], "array_speed_pgd_threshold": [48, 152, 153, 231, 232, 273, 337, 338], "array_speed_loc": [48, 152, 153, 231, 232, 273, 337, 338], "array_wavelength_loc": [48, 152, 153, 231, 232, 273, 337, 338], "array_wavelength_planar": [48, 152, 153, 231, 232, 273, 337, 338], "array_synchrony_pgd": [48, 152, 153, 231, 232, 273, 337, 338], "array_synchrony_pgd_standard_devi": [48, 152, 153, 231, 232, 273, 337, 338], "array_kuramoto_pgd": [48, 152, 153, 231, 232, 273, 337, 338], "array_kuramoto_pgd_standard_devi": [48, 152, 153, 231, 232, 273, 337, 338], "trim_arrai": [48, 152, 153, 231, 232, 273, 337, 338], "trim_array_as_if": [48, 152, 153, 231, 232, 273, 337, 338], "pack_array_data": [48, 152, 153, 231, 232, 273, 337, 338], "dct": [48, 152, 231, 273, 337], "get_mask_antialias": [48, 152, 154, 231, 233, 273, 337, 339], "get_mask": [48, 152, 154, 231, 233, 273, 337, 339], "dct_cut": [48, 152, 154, 231, 233, 273, 337, 339], "outer_complex": [48, 152, 154, 231, 233, 273, 337, 339], "dct_cut_antialia": [48, 152, 154, 231, 233, 273, 337, 339], "dct_cut_downsampl": [48, 152, 154, 231, 233, 273, 337, 339], "dct_upsampl": [48, 152, 154, 231, 233, 273, 337, 339], "iterated_upsampl": [48, 152, 154, 231, 233, 273, 337, 339], "dct_upsample_notrim": [48, 152, 154, 231, 233, 273, 337, 339], "distanc": [18, 24, 35, 48, 80, 93, 105, 126, 152, 156, 161, 202, 218, 231, 235, 266, 273, 281, 293, 295, 316, 337, 341, 346, 368], "get_pair_dist": [48, 152, 155, 231, 234, 273, 337, 340], "distance_angular_devi": [48, 152, 155, 231, 234, 273, 337, 340], "get_averaged_angular_dist": [48, 152, 155, 231, 234, 273, 337, 340], "get_length_constant_tri": [48, 152, 155, 231, 234, 273, 337, 340], "get_average_synchrony_length_constant_parallel": [48, 152, 155, 231, 234, 273, 337, 340], "synchrony_length_constant_areas_summari": [48, 152, 155, 231, 234, 273, 337, 340], "fftzero": [48, 152, 154, 231, 233, 273, 337, 339], "plot_phase_gradi": [48, 152, 156, 231, 235, 273, 337, 341], "plot_phase_direct": [48, 152, 156, 231, 235, 273, 337, 341], "dphidx": [48, 152, 156, 231, 235, 273, 337, 341], "dphidi": [48, 152, 156, 231, 235, 273, 337, 341], "get_phase_gradient_as_complex": [48, 152, 156, 231, 235, 273, 337, 341], "getpeaks2d": [48, 152, 156, 231, 235, 273, 337, 341], "coalesc": [48, 152, 156, 164, 231, 235, 240, 273, 337, 341, 348], "coalesce_point": [48, 152, 156, 231, 235, 273, 337, 341], "find_critical_point": [48, 152, 156, 231, 235, 273, 337, 341], "plot_critical_point": [48, 152, 156, 231, 235, 273, 337, 341], "find_critical_potential_point": [48, 152, 156, 231, 235, 273, 337, 341], "grad": [48, 152, 156, 231, 235, 273, 337, 341], "quickgrad": [48, 152, 156, 231, 235, 273, 337, 341], "getp": [48, 152, 156, 231, 235, 273, 337, 341], "get_critical_spectra": [48, 152, 156, 231, 235, 273, 337, 341], "plot_critical_spectra": [48, 152, 156, 231, 235, 273, 337, 341], "cut_array_data": [48, 152, 156, 231, 235, 273, 337, 341], "geometri": [48, 152, 273, 337], "kernel": [2, 9, 11, 12, 13, 21, 35, 36, 48, 74, 93, 94, 110, 117, 119, 120, 121, 140, 142, 149, 152, 153, 177, 187, 231, 232, 251, 252, 273, 275, 293, 294, 300, 307, 309, 310, 311, 329, 331, 335, 337, 338, 357, 359], "laplacian": [22, 35, 36, 48, 78, 93, 94, 152, 158, 231, 236, 273, 279, 293, 294, 337, 343], "gaussian_2d_kernel": [48, 152, 158, 231, 236, 273, 337, 343], "absorbing_gaussian": [48, 152, 158, 231, 236, 273, 337, 343], "absorbing_laplacian": [48, 152, 158, 231, 236, 273, 337, 343], "magicsharp": [48, 152, 158, 231, 236, 273, 337, 343], "magickernel": [48, 152, 158, 231, 236, 273, 337, 343], "continuum_kernel": [48, 152, 158, 231, 236, 273, 337, 343], "log_spline_basi": [48, 152, 158, 231, 236, 273, 337, 343], "exponential_basi": [48, 152, 158, 231, 236, 273, 337, 343], "diffusion_basi": [48, 152, 158, 231, 236, 273, 337, 343], "iterative_orthogonalize_basi": [48, 152, 158, 231, 236, 273, 337, 343], "mask": [21, 36, 48, 74, 94, 152, 154, 220, 233, 273, 275, 294, 337, 339], "phase": [24, 36, 48, 80, 94, 140, 147, 152, 153, 154, 156, 158, 187, 231, 232, 233, 235, 236, 252, 273, 281, 294, 329, 334, 337, 338, 339, 341, 343, 359], "population_kuramoto": [48, 152, 160, 231, 237, 273, 337, 345], "population_synchroni": [48, 152, 160, 231, 237, 273, 337, 345], "population_polar_std": [48, 152, 160, 231, 237, 273, 337, 345], "population_average_amplitud": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_dispers": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_concentr": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_precis": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_phase_dispers": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_phase_std": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_amplitude_std": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_amplitude_dispers": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_phase_precis": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_amplitude_precis": [48, 152, 160, 231, 237, 273, 337, 345], "population_signal_descript": [48, 152, 160, 231, 237, 273, 337, 345], "population_synchrony_linear": [48, 152, 160, 231, 237, 273, 337, 345], "population_phase_coher": [48, 152, 160, 231, 237, 273, 337, 345], "analytic_signal_coher": [48, 152, 160, 231, 237, 273, 337, 345], "population_sliding_signal_coher": [48, 152, 160, 231, 237, 273, 337, 345], "sliding_population_signal_coher": [48, 152, 160, 231, 237, 273, 337, 345], "population_normalized_sliding_signal_coher": [48, 152, 160, 231, 237, 273, 337, 345], "population_phase_relative_sliding_kuramoto": [48, 152, 160, 231, 237, 273, 337, 345], "population_median_phase_veloc": [48, 152, 160, 231, 237, 273, 337, 345], "population_median_frequ": [48, 152, 160, 231, 237, 273, 337, 345], "point": [0, 8, 24, 35, 48, 80, 93, 105, 116, 140, 141, 152, 153, 154, 156, 160, 163, 164, 167, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 198, 199, 201, 202, 211, 214, 217, 218, 231, 232, 233, 235, 237, 239, 240, 242, 248, 249, 251, 252, 255, 262, 263, 265, 266, 273, 281, 293, 295, 306, 329, 330, 337, 338, 339, 341, 345, 347, 348, 350, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 371, 374, 377], "p2c": [48, 152, 161, 209, 217, 273, 337, 346, 369, 377], "c2p": [48, 152, 161, 209, 217, 273, 337, 346, 369, 377], "to_xypoint": [48, 152, 161, 273, 337, 346], "closest": [48, 152, 161, 273, 337, 346], "pair_neighbor": [48, 152, 161, 273, 337, 346], "paired_dist": [48, 152, 161, 273, 337, 346], "interp_bin": [48, 152, 163, 231, 239, 273, 337, 347], "triangul": [48, 152, 231, 273, 337], "z2xy": [48, 152, 164, 231, 240, 273, 337, 348], "uniquerow": [48, 152, 164, 231, 240, 273, 337, 348], "trianglestoedg": [48, 152, 164, 231, 240, 273, 337, 348], "edgesnearbi": [48, 152, 164, 231, 240, 273, 337, 348], "plot_edg": [48, 152, 164, 231, 240, 273, 337, 348], "plot_triangl": [48, 152, 164, 231, 240, 273, 337, 348], "mergenearbi": [48, 152, 164, 231, 240, 273, 337, 348], "brute_force_local_2d_maxima": [48, 152, 231, 273, 337], "pp_xcorr": [48, 166, 167, 242, 273, 349, 350], "txcorr": [48, 166, 167, 242, 273, 349, 350], "pack_cross_correlation_matrix": [48, 166, 167, 242, 273, 349, 350], "cut_spik": [48, 166, 167, 242, 273, 349, 350], "times_to_rast": [48, 166, 167, 242, 273, 349, 350], "bin_spikes_rast": [48, 166, 167, 242, 273, 349, 350], "bin_spike_tim": [48, 166, 167, 242, 273, 349, 350], "waveform": [48, 166, 273, 349], "realign": [48, 166, 168, 243, 273, 349, 351], "getfwhm": [48, 166, 168, 243, 273, 349, 351], "getpvt": [48, 166, 168, 243, 273, 349, 351], "getwahp": [48, 166, 168, 243, 273, 349, 351], "getpt": [48, 166, 168, 243, 273, 349, 351], "getpthw": [48, 166, 168, 243, 273, 349, 351], "getphp": [48, 166, 168, 243, 273, 349, 351], "minmax": [48, 166, 168, 243, 273, 349, 351], "normalized_waveform": [48, 166, 168, 243, 273, 349, 351], "is_thin": [48, 166, 168, 243, 273, 349, 351], "is_thin_pvt": [48, 166, 168, 243, 273, 349, 351], "process": [11, 31, 32, 35, 36, 48, 88, 90, 93, 94, 105, 119, 140, 144, 150, 154, 166, 167, 168, 187, 191, 199, 218, 220, 233, 242, 243, 252, 255, 263, 273, 288, 290, 293, 294, 295, 309, 329, 332, 336, 339, 349, 350, 351, 359, 361, 366], "circular": [21, 36, 74, 94, 105, 141, 160, 169, 218, 237, 273, 275, 294, 295, 330, 345, 352], "logpolar_gaussian": [172, 246, 273, 352, 353], "complex_gaussian": [172, 246, 273, 352, 353], "logpolar_stat": [172, 246, 273, 352, 353], "abspolar_stat": [172, 246, 273, 352, 353], "squared_first_circular_mo": [172, 246, 273, 352, 353], "fit_vonmis": [172, 246, 273, 352, 353], "convolut": [2, 9, 48, 55, 62, 110, 117, 140, 142, 149, 158, 169, 177, 236, 251, 273, 300, 307, 329, 331, 335, 343, 352, 357], "ccor": [48, 169, 173, 247, 273, 352, 354], "ccm": [48, 169, 173, 247, 273, 352, 354], "blockccm": [48, 169, 173, 247, 273, 352, 354], "sta": [48, 140, 169, 173, 247, 273, 329, 352, 354], "blocksta": [48, 169, 173, 247, 273, 352, 354], "reconstruct": [48, 169, 173, 247, 273, 352, 354], "cspect": [48, 169, 173, 247, 273, 352, 354], "cspectm": [48, 169, 173, 247, 273, 352, 354], "spike_lfp_filt": [48, 169, 173, 247, 273, 352, 354], "spectreconstruct": [48, 169, 173, 247, 273, 352, 354], "create_spectral_model": [48, 169, 173, 247, 273, 352, 354], "construct_lowpass_oper": [48, 169, 173, 247, 273, 352, 354], "autocorrelation_bay": [48, 169, 173, 247, 273, 352, 354], "densiti": [0, 38, 48, 105, 129, 141, 167, 169, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 199, 211, 218, 242, 247, 251, 255, 256, 263, 273, 295, 319, 330, 350, 352, 354, 357, 358, 361, 362, 366, 371], "kdepeak": [48, 169, 174, 248, 273, 352, 355], "knn_1d_densiti": [48, 169, 174, 248, 273, 352, 355], "adaptive_density_grid": [48, 169, 174, 248, 273, 352, 355], "gridhist": [48, 169, 174, 248, 273, 352, 355], "distribut": [0, 12, 13, 31, 48, 88, 105, 120, 121, 140, 141, 147, 153, 160, 169, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 198, 199, 211, 218, 232, 237, 246, 248, 251, 255, 256, 262, 263, 273, 288, 295, 310, 311, 329, 330, 334, 338, 345, 352, 353, 355, 357, 358, 361, 362, 365, 366, 371], "poisson_logpdf": [48, 169, 175, 249, 273, 352, 356], "poisson_pdf": [48, 169, 175, 249, 273, 352, 356], "gaussian_logpdf": [48, 169, 175, 249, 273, 352, 356], "gaussian_pdf": [48, 169, 175, 249, 273, 352, 356], "explogpdf": [48, 169, 175, 249, 273, 352, 356], "sample_categor": [48, 169, 175, 249, 273, 352, 356], "fast_kd": [48, 169, 273, 352], "image_cov": [48, 169, 177, 251, 273, 352, 357], "gaussian_quadratur": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "gaussian_quadrature_logarithm": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_check": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_logpdf": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_pdf": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_sampl": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_multipli": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_multiply_c": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_divid": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_project": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_entropi": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_dkl": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_dkl_cp": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_condit": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_kalman": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_kalman_p_inversea": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_kalman_joint": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "mvg_kalman_joint_p": [178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 352, 358], "glm": [48, 169, 273, 352], "glmpenaltypoisson": [48, 169, 187, 252, 273, 352, 359], "sexp": [0, 48, 169, 187, 209, 211, 252, 273, 352, 359, 369, 371], "sigmoid": [0, 48, 169, 187, 209, 211, 252, 273, 352, 359, 369, 371], "glmpenaltybernoulli": [48, 169, 187, 252, 273, 352, 359], "glmpenaltyl2": [48, 169, 187, 252, 273, 352, 359], "ppglmfit": [48, 169, 187, 252, 273, 352, 359], "fitglm": [48, 169, 187, 252, 273, 352, 359], "crossvalidatedauc": [48, 169, 187, 252, 273, 352, 359], "gradientglmfit": [48, 169, 187, 252, 273, 352, 359], "numeric_grad": [48, 169, 187, 252, 273, 352, 359], "numeric_hess": [48, 169, 187, 252, 273, 352, 359], "grid_search": [48, 169, 273, 352], "hmm": [48, 169, 273, 352], "poisson_parameter_guess": [48, 169, 191, 255, 273, 352, 361], "poisson_baum_welch": [48, 169, 191, 255, 273, 352, 361], "viterbi": [48, 169, 191, 255, 273, 352, 361], "viterbi_log": [48, 169, 191, 255, 273, 352, 361], "hasnan": [48, 169, 191, 255, 273, 352, 361], "poisson_viterbi_state_inf": [48, 169, 191, 255, 273, 352, 361], "forward_backward": [48, 169, 191, 255, 273, 352, 361], "jump": [48, 169, 191, 255, 273, 352, 361], "sampl": [8, 21, 24, 35, 36, 39, 48, 74, 80, 93, 94, 105, 116, 130, 140, 141, 144, 146, 147, 149, 150, 153, 154, 158, 160, 167, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 196, 201, 214, 218, 232, 233, 236, 237, 242, 246, 247, 248, 251, 252, 255, 256, 260, 265, 273, 275, 281, 293, 294, 295, 306, 320, 329, 330, 332, 333, 334, 335, 336, 338, 339, 343, 345, 350, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 367, 374], "log_likelihood": [48, 169, 191, 255, 273, 352, 361], "baum_welch": [48, 169, 191, 255, 273, 352, 361], "forward_abstract": [48, 169, 191, 255, 273, 352, 361], "backward_abstract": [48, 169, 191, 255, 273, 352, 361], "forward_backward_abstract": [48, 169, 191, 255, 273, 352, 361], "diffusiongaussian": [48, 169, 191, 255, 273, 352, 361], "loggaussiancoxapproxim": [48, 169, 191, 255, 273, 352, 361], "loggaussiancoxmodel": [48, 169, 191, 255, 273, 352, 361], "gaussiancoxapproxim": [48, 169, 191, 255, 273, 352, 361], "gaussiancoxmodel": [48, 169, 191, 255, 273, 352, 361], "chisquarecoxapproxim": [48, 169, 191, 255, 273, 352, 361], "chisquarecoxmodel": [48, 169, 191, 255, 273, 352, 361], "bernoulliobservationapproxim": [48, 169, 191, 255, 273, 352, 361], "bernoulliobservationmodel": [48, 169, 191, 255, 273, 352, 361], "truncatedloggaussiancoxapproxim": [48, 169, 191, 255, 273, 352, 361], "truncatedloggaussiancoxmodel": [48, 169, 191, 255, 273, 352, 361], "mvgaussian": [48, 169, 191, 255, 273, 352, 361], "mvgupdat": [48, 169, 191, 255, 273, 352, 361], "lgcp_observation_minim": [48, 169, 191, 255, 273, 352, 361], "mvloggaussiancox": [48, 169, 191, 255, 273, 352, 361], "ougaussian": [48, 169, 191, 255, 273, 352, 361], "mvgouupdat": [48, 169, 191, 255, 273, 352, 361], "poissonobservationapproxim": [48, 169, 191, 255, 273, 352, 361], "poissonobservationmodel": [48, 169, 191, 255, 273, 352, 361], "truncatedpoissonobservationapproxim": [48, 169, 191, 255, 273, 352, 361], "truncatedpoissonobservationmodel": [48, 169, 191, 255, 273, 352, 361], "inform": [11, 24, 27, 32, 35, 48, 80, 85, 89, 90, 93, 105, 119, 169, 197, 218, 261, 273, 281, 285, 289, 290, 293, 295, 309, 352, 364], "dkl_discret": [48, 169, 192, 256, 273, 352, 362], "discrete_entropy_sampl": [48, 169, 192, 256, 273, 352, 362], "discrete_entropy_distribut": [48, 169, 192, 256, 273, 352, 362], "regularized_discrete_entropi": [48, 169, 192, 256, 273, 352, 362], "poisson_entropy_nat": [48, 169, 192, 256, 273, 352, 362], "mcint": [48, 169, 273, 352], "monte_carlo_expect": [48, 169, 196, 260, 273, 352, 363], "monte_carlo_mo": [48, 169, 196, 260, 273, 352, 363], "minim": [35, 48, 93, 169, 187, 202, 252, 266, 273, 293, 352, 359, 368], "failureerror": [48, 169, 197, 261, 273, 352, 364], "minimize_retri": [48, 169, 197, 261, 273, 352, 364], "mixtur": [48, 105, 169, 191, 218, 255, 273, 295, 352, 361], "two_class_poisson_mixture_model": [48, 169, 198, 262, 273, 352, 365], "modefind": [48, 169, 273, 352], "logmodeplot": [48, 169, 199, 263, 273, 352, 366], "logmod": [48, 169, 199, 263, 273, 352, 366], "peakfinder5": [48, 169, 199, 263, 273, 352, 366], "pvalu": [24, 48, 80, 169, 273, 281, 352], "benjamini_hochberg_positive_correl": [48, 169, 201, 265, 273, 352, 367], "correct_pvalues_positive_depend": [48, 169, 201, 265, 273, 352, 367], "correct_pvalu": [48, 169, 201, 265, 273, 352, 367], "bootstrap_statistic_two_sid": [48, 169, 201, 265, 273, 352, 367], "bootstrap_median": [48, 169, 201, 265, 273, 352, 367], "bootstrap_mean": [48, 169, 201, 265, 273, 352, 367], "bootstrap_compare_statistic_two_sid": [48, 169, 201, 265, 273, 352, 367], "bootstrap_compare_statistic_two_sided_parallel": [48, 169, 201, 265, 273, 352, 367], "bootstrap_compare_median": [48, 169, 201, 265, 273, 352, 367], "bootstrap_compare_mean": [48, 169, 201, 265, 273, 352, 367], "regress": [48, 169, 273, 352], "damped_cosin": [48, 169, 202, 266, 273, 352, 368], "weighted_least_squar": [48, 169, 202, 266, 273, 352, 368], "power_law": [48, 169, 202, 266, 273, 352, 368], "gaussian_funct": [48, 169, 202, 266, 273, 352, 368], "half_gaussian_funct": [48, 169, 202, 266, 273, 352, 368], "exponential_decai": [48, 169, 202, 266, 273, 352, 368], "robust_lin": [48, 169, 202, 266, 273, 352, 368], "nrmse": [48, 169, 273, 352], "weighted_avg_and_std": [48, 169, 273, 352], "partition_data": [48, 169, 273, 352], "partition_trials_for_crossvalid": [48, 169, 273, 352], "polar_error": [48, 169, 273, 352], "add_const": [48, 169, 273, 352], "trial_crossvalidated_least_squar": [48, 169, 273, 352], "partition_data_for_crossvalid": [48, 169, 273, 352], "block_shuffl": [48, 169, 273, 352], "crossvalidated_least_squar": [48, 169, 273, 352], "print_stat": [48, 169, 273, 352], "outlier": [48, 169, 273, 352], "reject_outli": [48, 169, 273, 352], "pca": [48, 169, 273, 352], "covari": [8, 24, 35, 36, 48, 80, 93, 94, 105, 116, 160, 169, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 218, 237, 247, 251, 252, 255, 273, 281, 293, 294, 295, 306, 345, 352, 354, 357, 358, 359, 361], "descript": [27, 48, 85, 168, 169, 243, 273, 285, 351, 352], "short": [48, 140, 141, 144, 169, 187, 214, 252, 273, 329, 330, 332, 352, 359, 374], "glmfit": [48, 169, 273, 352], "auc_to_g2": [48, 169, 273, 352], "fraction_explained_devi": [48, 169, 273, 352], "function": [2, 3, 8, 9, 11, 13, 15, 21, 24, 27, 28, 30, 31, 32, 35, 36, 39, 48, 55, 56, 62, 74, 80, 85, 86, 87, 88, 89, 90, 93, 94, 105, 110, 111, 116, 117, 119, 121, 123, 130, 140, 142, 146, 147, 150, 154, 155, 156, 158, 160, 167, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 196, 197, 198, 201, 209, 216, 217, 218, 220, 230, 233, 234, 235, 236, 237, 242, 246, 247, 248, 249, 251, 252, 255, 260, 261, 262, 265, 273, 275, 281, 285, 286, 287, 288, 289, 290, 293, 294, 295, 300, 301, 306, 307, 309, 311, 313, 320, 329, 331, 333, 334, 336, 339, 340, 341, 343, 345, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 369, 376, 377], "slog": [0, 48, 209, 211, 273, 369, 371], "inversesigmoid": [0, 48, 209, 211, 273, 369, 371], "dsigmoid": [0, 48, 209, 211, 273, 369, 371], "g": [0, 8, 13, 21, 27, 31, 48, 74, 85, 88, 105, 116, 121, 140, 169, 209, 211, 218, 273, 275, 285, 288, 295, 306, 311, 329, 352, 369, 371], "f1": [0, 48, 209, 211, 273, 369, 371], "f2": [0, 48, 209, 211, 273, 369, 371], "npdf": [0, 48, 209, 211, 273, 369, 371], "log_factori": [0, 48, 209, 211, 273, 369, 371], "getfftw": [48, 209, 273, 369], "ftwthr": [1, 48, 209, 212, 273, 369, 372], "hdfmat": [48, 209, 273, 369], "gethdfvalu": [48, 209, 213, 273, 369, 373], "gethdf": [48, 209, 213, 273, 369, 373], "hdf2dict": [48, 209, 213, 273, 369, 373], "printmathdf5": [48, 209, 213, 273, 369, 373], "recursive_printmathdf5": [48, 209, 213, 273, 369, 373], "string": [8, 11, 12, 21, 24, 27, 30, 31, 48, 74, 76, 80, 85, 87, 88, 89, 105, 116, 119, 120, 140, 156, 169, 174, 209, 213, 215, 216, 217, 218, 235, 248, 273, 275, 277, 281, 285, 287, 288, 289, 295, 306, 309, 310, 329, 341, 352, 355, 369, 373, 375, 376, 377], "hcat": [48, 209, 214, 273, 369, 374], "wordwrap": [48, 209, 214, 273, 369, 374], "incolumn": [48, 209, 214, 273, 369, 374], "percent": [48, 105, 169, 209, 214, 218, 273, 295, 352, 369, 374], "shortscientif": [48, 209, 214, 273, 369, 374], "eformat": [48, 209, 214, 273, 369, 374], "v2str": [48, 209, 214, 273, 369, 374], "v2str_long": [48, 209, 214, 273, 369, 374], "nicet": [48, 209, 214, 273, 369, 374], "isint": [48, 209, 214, 273, 369, 374], "system": [27, 31, 32, 35, 48, 85, 88, 90, 93, 105, 140, 191, 209, 218, 255, 273, 285, 288, 290, 293, 295, 329, 361, 369], "execfil": [48, 209, 215, 273, 369, 375], "query_yes_no": [48, 209, 215, 273, 369, 375], "current_milli_tim": [48, 209, 216, 273, 369, 376], "todai": [48, 209, 216, 273, 369, 376], "now": [27, 31, 48, 85, 88, 105, 191, 196, 209, 216, 218, 255, 260, 273, 285, 288, 295, 361, 363, 369, 376], "tic": [48, 209, 216, 273, 369, 376], "toc": [48, 209, 216, 273, 369, 376], "waitfor": [48, 209, 216, 273, 369, 376], "tool": [32, 48, 90, 169, 209, 273, 290, 352, 369], "varexist": [48, 209, 217, 273, 369, 377], "nowarn": [48, 209, 217, 273, 369, 377], "okwarn": [48, 209, 217, 273, 369, 377], "dowarn": [48, 209, 217, 273, 369, 377], "warn": [27, 30, 31, 48, 85, 87, 88, 105, 147, 209, 217, 218, 273, 285, 287, 288, 295, 334, 369, 377], "debug": [32, 35, 48, 89, 90, 93, 209, 217, 273, 289, 290, 293, 369, 377], "wait": [48, 105, 209, 216, 217, 218, 220, 273, 295, 369, 376, 377], "matlab": [27, 30, 35, 48, 85, 87, 93, 105, 153, 201, 209, 213, 216, 217, 218, 232, 265, 273, 285, 287, 293, 295, 338, 367, 369, 373, 376, 377], "zeroslik": [48, 209, 217, 273, 369, 377], "oneslik": [48, 209, 217, 273, 369, 377], "histori": [48, 209, 217, 273, 369, 377], "emitt": [48, 209, 217, 273, 369, 377], "piper": [48, 209, 217, 273, 369, 377], "global": [27, 28, 32, 48, 85, 86, 90, 140, 168, 209, 215, 217, 243, 273, 285, 286, 290, 329, 351, 369, 375, 377], "exist": [12, 27, 48, 85, 105, 120, 209, 217, 218, 273, 285, 295, 310, 369, 377], "metaloadmat": [48, 209, 217, 273, 369, 377], "find_all_extens": [48, 209, 217, 273, 369, 377], "lmap": [48, 209, 217, 273, 369, 377], "slist": [48, 209, 217, 273, 369, 377], "amap": [48, 209, 217, 273, 369, 377], "lap": [48, 209, 217, 273, 369, 377], "aap": [48, 209, 217, 273, 369, 377], "sl": [48, 209, 217, 273, 369, 377], "setinrang": [48, 209, 217, 273, 369, 377], "mapdict": [48, 209, 217, 273, 369, 377], "getdict": [48, 209, 217, 273, 369, 377], "ensure_dir": [48, 209, 217, 273, 369, 377], "getsiz": [48, 209, 217, 273, 369, 377], "savecontext": [48, 209, 217, 273, 369, 377], "clear": [48, 89, 209, 217, 273, 289, 369, 377], "restorecontext": [48, 209, 217, 273, 369, 377], "camel2underscor": [48, 209, 217, 273, 369, 377], "underscore2camel": [48, 209, 217, 273, 369, 377], "getvari": [48, 209, 217, 273, 369, 377], "arraymap": [24, 48, 80, 153, 156, 209, 217, 232, 235, 273, 281, 338, 341, 369, 377], "invert_permut": [48, 209, 217, 273, 369, 377], "find": [35, 39, 48, 93, 130, 140, 152, 154, 161, 169, 191, 199, 201, 209, 217, 231, 233, 255, 263, 265, 273, 293, 320, 329, 337, 339, 346, 352, 361, 366, 367, 369, 377], "ezip": [48, 209, 217, 273, 369, 377], "asiter": [48, 209, 217, 273, 369, 377], "stuff": [23, 35, 48, 79, 93, 209, 217, 273, 280, 293, 369, 377], "create_artist": [20, 24, 73, 80, 274, 281], "miscellan": [21, 74, 275], "relat": [21, 27, 35, 39, 74, 85, 93, 105, 130, 140, 142, 147, 158, 163, 167, 198, 218, 236, 239, 242, 262, 275, 285, 293, 295, 320, 329, 331, 334, 343, 347, 350, 365], "r": [12, 14, 21, 24, 35, 74, 80, 93, 105, 120, 122, 152, 202, 218, 231, 266, 275, 281, 293, 295, 310, 312, 337, 368], "b": [8, 12, 13, 15, 21, 24, 32, 35, 36, 38, 74, 80, 90, 93, 94, 105, 108, 109, 116, 120, 121, 123, 129, 140, 154, 158, 169, 173, 187, 191, 201, 202, 217, 218, 233, 236, 247, 252, 255, 265, 266, 275, 281, 290, 293, 294, 295, 298, 299, 306, 310, 311, 313, 319, 329, 339, 343, 352, 354, 359, 361, 367, 368, 377], "hexcod": [21, 74, 275], "h": [21, 23, 25, 35, 36, 39, 74, 79, 81, 93, 94, 105, 130, 140, 142, 154, 160, 216, 218, 233, 237, 275, 280, 282, 293, 294, 295, 320, 329, 331, 339, 345, 376], "": [0, 8, 13, 14, 15, 18, 21, 24, 27, 35, 74, 77, 80, 85, 93, 105, 108, 109, 116, 121, 122, 123, 126, 140, 141, 147, 153, 160, 167, 169, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 211, 216, 217, 218, 232, 237, 242, 247, 255, 275, 278, 281, 285, 293, 295, 298, 299, 306, 311, 312, 313, 316, 329, 330, 334, 338, 345, 350, 352, 354, 358, 361, 371, 376, 377], "v": [8, 12, 13, 15, 21, 24, 35, 38, 39, 74, 80, 93, 105, 116, 120, 121, 123, 129, 130, 169, 201, 214, 218, 265, 275, 281, 293, 295, 306, 310, 311, 313, 319, 320, 352, 367, 374], "force_lumin": [21, 74, 275], "none": [12, 17, 18, 21, 24, 31, 32, 35, 36, 39, 74, 80, 88, 90, 93, 94, 105, 120, 125, 126, 130, 140, 142, 144, 146, 147, 154, 156, 161, 167, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 197, 199, 201, 213, 215, 217, 218, 220, 233, 235, 242, 246, 247, 248, 251, 252, 255, 261, 263, 265, 275, 281, 288, 290, 293, 294, 295, 310, 315, 316, 320, 329, 331, 332, 333, 334, 339, 341, 346, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 364, 366, 367, 373, 375, 377], "method": [21, 27, 74, 85, 105, 147, 153, 154, 169, 174, 197, 218, 232, 233, 248, 261, 275, 285, 295, 334, 338, 339, 352, 355, 364], "perceiv": [21, 74, 275], "convert": [21, 24, 27, 74, 80, 85, 89, 140, 160, 161, 164, 169, 175, 213, 217, 237, 240, 249, 275, 281, 285, 289, 329, 345, 346, 348, 352, 356, 373, 377], "hsv": [21, 74, 156, 235, 275, 341], "rgb": [21, 24, 25, 74, 80, 81, 275, 281, 282], "paramet": [0, 18, 21, 24, 25, 27, 30, 31, 32, 35, 36, 38, 74, 80, 81, 85, 87, 88, 89, 90, 93, 94, 105, 126, 129, 140, 142, 144, 146, 147, 149, 150, 152, 153, 154, 156, 158, 160, 161, 163, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 197, 198, 199, 201, 202, 211, 213, 214, 215, 216, 217, 218, 231, 232, 233, 235, 236, 237, 239, 242, 243, 246, 247, 248, 249, 251, 252, 255, 256, 261, 262, 263, 265, 266, 275, 281, 282, 285, 287, 288, 289, 290, 293, 294, 295, 316, 319, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377], "hue": [21, 24, 74, 80, 156, 235, 275, 281, 341], "360": [21, 74, 275], "satur": [21, 74, 169, 275, 352], "1": [0, 8, 12, 13, 15, 21, 22, 24, 25, 27, 28, 31, 32, 35, 36, 38, 39, 74, 76, 78, 80, 81, 85, 86, 88, 90, 93, 94, 105, 116, 120, 121, 123, 129, 130, 140, 141, 144, 147, 149, 150, 153, 154, 155, 156, 158, 160, 163, 167, 169, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 198, 201, 202, 211, 217, 218, 220, 232, 233, 234, 235, 236, 237, 239, 242, 246, 248, 249, 252, 255, 260, 262, 265, 266, 275, 277, 279, 281, 282, 285, 286, 288, 290, 293, 294, 295, 306, 310, 311, 313, 319, 320, 329, 330, 332, 334, 335, 336, 338, 339, 340, 341, 343, 345, 347, 350, 352, 353, 355, 356, 358, 359, 361, 363, 365, 367, 368, 371, 377], "valu": [0, 21, 24, 25, 27, 28, 30, 31, 32, 35, 36, 74, 80, 81, 85, 86, 87, 88, 89, 90, 93, 94, 105, 140, 141, 146, 147, 153, 156, 160, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 196, 201, 202, 211, 213, 214, 215, 217, 218, 220, 230, 232, 235, 237, 243, 246, 247, 248, 249, 251, 255, 260, 265, 266, 275, 281, 282, 285, 286, 287, 288, 289, 290, 293, 294, 295, 329, 330, 333, 334, 338, 341, 345, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 367, 368, 371, 373, 374, 375, 377], "return": [0, 8, 11, 12, 13, 21, 24, 25, 27, 28, 30, 31, 32, 35, 36, 38, 74, 76, 80, 81, 85, 86, 87, 88, 89, 90, 93, 94, 105, 116, 119, 120, 121, 129, 140, 141, 142, 144, 146, 147, 149, 150, 152, 153, 154, 156, 158, 160, 161, 163, 164, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 196, 197, 198, 199, 201, 202, 211, 213, 214, 215, 216, 217, 218, 220, 230, 231, 232, 233, 235, 236, 237, 239, 240, 246, 247, 248, 249, 251, 252, 255, 256, 260, 261, 262, 263, 265, 266, 275, 277, 281, 282, 285, 286, 287, 288, 289, 290, 293, 294, 295, 306, 309, 310, 311, 319, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377], "type": [12, 21, 24, 27, 28, 30, 31, 32, 35, 36, 38, 74, 80, 85, 86, 87, 88, 89, 90, 93, 94, 105, 120, 129, 140, 142, 144, 147, 149, 150, 152, 153, 156, 158, 160, 161, 163, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 199, 201, 202, 213, 214, 215, 216, 217, 218, 231, 232, 235, 236, 237, 239, 246, 247, 248, 249, 251, 252, 255, 256, 263, 265, 266, 275, 281, 285, 286, 287, 288, 289, 290, 293, 294, 295, 310, 319, 329, 331, 332, 334, 335, 336, 337, 338, 341, 343, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 366, 367, 368, 373, 374, 375, 376, 377], "tupl": [21, 24, 27, 28, 32, 35, 74, 76, 80, 85, 86, 89, 90, 93, 105, 140, 152, 156, 161, 177, 189, 202, 217, 218, 220, 231, 235, 251, 266, 275, 277, 281, 285, 286, 289, 290, 293, 295, 329, 337, 341, 346, 357, 360, 368, 377], "red": [21, 74, 275], "green": [21, 74, 275], "blue": [21, 74, 275], "str": [21, 24, 27, 28, 31, 36, 74, 80, 85, 86, 88, 94, 105, 140, 168, 169, 214, 217, 218, 243, 275, 281, 285, 286, 288, 294, 295, 329, 351, 352, 374, 377], "standard": [0, 8, 13, 21, 24, 27, 36, 74, 80, 85, 89, 94, 105, 116, 121, 140, 141, 142, 150, 153, 158, 160, 169, 175, 196, 211, 217, 218, 232, 236, 237, 249, 260, 275, 281, 285, 289, 294, 295, 306, 311, 329, 330, 331, 336, 338, 343, 345, 352, 356, 363, 371, 377], "default": [21, 24, 27, 28, 31, 32, 35, 36, 38, 74, 80, 85, 86, 88, 90, 93, 94, 105, 129, 140, 141, 144, 146, 147, 153, 156, 158, 160, 161, 163, 167, 168, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 199, 201, 214, 215, 217, 218, 220, 232, 235, 236, 237, 239, 242, 243, 246, 247, 248, 251, 252, 255, 263, 265, 275, 281, 285, 286, 288, 290, 293, 294, 295, 319, 329, 330, 332, 333, 334, 338, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 366, 367, 374, 375, 377], "m": [12, 13, 18, 21, 24, 34, 35, 39, 74, 80, 92, 93, 105, 120, 121, 126, 130, 140, 144, 149, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 201, 202, 216, 218, 255, 265, 266, 275, 281, 292, 293, 295, 310, 311, 316, 320, 329, 332, 335, 352, 358, 361, 367, 368, 376], "weight": [21, 35, 36, 74, 93, 94, 105, 146, 160, 169, 177, 187, 202, 218, 237, 251, 252, 266, 275, 293, 294, 295, 333, 345, 352, 357, 359, 368], "vector": [8, 18, 21, 35, 74, 93, 105, 116, 126, 140, 141, 169, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 201, 214, 218, 247, 249, 252, 255, 256, 265, 275, 293, 295, 306, 316, 329, 330, 352, 354, 356, 358, 359, 361, 362, 367, 374], "lumin": [21, 74, 275], "np": [0, 21, 24, 35, 36, 38, 74, 80, 93, 94, 105, 129, 140, 142, 144, 147, 149, 152, 153, 156, 158, 160, 161, 163, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 198, 199, 202, 211, 217, 218, 231, 232, 235, 236, 237, 239, 243, 246, 247, 248, 249, 251, 252, 255, 256, 262, 263, 266, 275, 281, 293, 294, 295, 319, 329, 331, 332, 334, 335, 337, 338, 341, 343, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 365, 366, 368, 371, 377], "ndarrai": [21, 74, 105, 140, 146, 154, 156, 169, 174, 191, 218, 233, 235, 248, 255, 275, 295, 329, 333, 339, 341, 352, 355, 361], "299": [21, 74, 275], "587": [21, 74, 275], "114": [21, 74, 275], "2126": [21, 74, 275], "7152": [21, 74, 275], "0722": [21, 74, 275], "59": [21, 36, 74, 94, 158, 187, 191, 236, 252, 255, 275, 294, 343, 359, 361], "11": [21, 27, 36, 74, 85, 94, 105, 158, 187, 218, 220, 236, 252, 275, 285, 294, 295, 343, 359], "lrgb": [21, 74, 275], "target": [21, 35, 74, 93, 201, 265, 275, 293, 367], "threshold": [21, 24, 39, 74, 80, 105, 130, 140, 153, 164, 168, 201, 218, 232, 240, 243, 265, 275, 281, 295, 320, 329, 338, 348, 351, 367], "01": [21, 74, 105, 174, 196, 201, 218, 248, 260, 265, 275, 295, 355, 363, 367], "squar": [21, 24, 35, 36, 74, 80, 93, 94, 105, 141, 142, 146, 156, 158, 169, 172, 173, 191, 218, 235, 236, 246, 247, 255, 275, 281, 293, 294, 295, 330, 331, 333, 341, 343, 352, 353, 354, 361], "fals": [15, 21, 24, 27, 30, 31, 32, 35, 74, 80, 85, 87, 88, 89, 90, 93, 105, 123, 140, 146, 147, 156, 167, 169, 172, 177, 187, 196, 197, 201, 215, 218, 235, 242, 246, 251, 252, 260, 261, 265, 275, 281, 285, 287, 288, 289, 290, 293, 295, 313, 329, 333, 334, 341, 350, 352, 353, 357, 359, 363, 364, 367, 375], "adjust": [21, 24, 35, 74, 80, 93, 140, 144, 275, 281, 293, 329, 332], "match": [21, 24, 35, 39, 74, 80, 89, 93, 130, 147, 161, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 217, 275, 281, 289, 293, 320, 334, 346, 352, 358, 377], "luminos": [21, 74, 275], "th": [21, 23, 74, 79, 275, 280], "list": [8, 12, 18, 21, 24, 27, 32, 35, 74, 76, 80, 85, 89, 90, 93, 105, 116, 120, 126, 140, 144, 146, 147, 153, 161, 164, 167, 169, 172, 174, 187, 189, 192, 199, 201, 202, 214, 217, 218, 232, 240, 242, 246, 248, 252, 256, 263, 265, 266, 275, 277, 281, 285, 289, 290, 293, 295, 306, 310, 316, 329, 332, 333, 334, 338, 346, 348, 350, 352, 353, 355, 359, 360, 362, 366, 367, 368, 374, 377], "angl": [21, 35, 74, 76, 93, 105, 140, 147, 218, 275, 277, 293, 295, 329, 334], "theta": [21, 74, 105, 155, 218, 234, 275, 295, 340], "like": [0, 8, 12, 21, 24, 27, 28, 31, 35, 74, 76, 80, 85, 86, 88, 93, 105, 116, 120, 140, 154, 160, 169, 177, 187, 189, 191, 192, 196, 202, 211, 215, 218, 220, 233, 237, 251, 252, 255, 256, 260, 266, 275, 277, 281, 285, 286, 288, 293, 295, 306, 310, 329, 339, 345, 352, 357, 359, 360, 361, 362, 363, 368, 371, 375], "iter": [14, 21, 24, 74, 76, 80, 122, 140, 158, 161, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 214, 217, 220, 236, 255, 256, 275, 277, 281, 312, 329, 343, 346, 352, 358, 361, 362, 374, 377], "doe": [12, 21, 24, 27, 74, 80, 85, 105, 120, 169, 217, 218, 275, 281, 285, 295, 310, 352, 377], "affect": [21, 74, 105, 218, 275, 295], "magnitud": [8, 21, 24, 74, 80, 105, 116, 140, 141, 153, 156, 160, 177, 202, 218, 232, 235, 237, 251, 266, 275, 281, 295, 306, 329, 330, 338, 341, 345, 357, 368], "mai": [21, 24, 27, 28, 31, 39, 74, 80, 85, 86, 88, 105, 130, 140, 142, 153, 154, 191, 201, 218, 220, 232, 233, 255, 265, 275, 281, 285, 286, 288, 295, 320, 329, 331, 338, 339, 361, 367], "caus": [13, 21, 28, 31, 74, 86, 88, 89, 121, 140, 197, 261, 275, 286, 288, 289, 311, 329, 364], "result": [12, 13, 21, 24, 27, 31, 32, 74, 80, 85, 88, 90, 105, 120, 121, 140, 141, 142, 144, 146, 153, 158, 169, 172, 173, 174, 175, 177, 189, 191, 202, 217, 218, 220, 232, 236, 246, 247, 248, 249, 251, 255, 266, 275, 281, 285, 288, 290, 295, 310, 311, 329, 330, 331, 332, 333, 338, 343, 352, 353, 354, 355, 356, 357, 360, 361, 368, 377], "fall": [21, 74, 163, 197, 239, 261, 275, 347, 364], "outsid": [21, 24, 74, 80, 105, 163, 218, 239, 275, 281, 295, 347], "origin": [8, 12, 21, 24, 31, 35, 74, 80, 88, 93, 116, 120, 140, 198, 202, 217, 262, 266, 275, 281, 288, 293, 306, 310, 329, 365, 368, 377], "colorspac": [21, 74, 275], "float": [0, 12, 15, 18, 21, 22, 24, 27, 28, 35, 38, 74, 78, 80, 85, 86, 93, 105, 120, 123, 126, 129, 140, 142, 144, 149, 150, 153, 156, 158, 160, 161, 163, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 198, 199, 201, 202, 211, 214, 218, 232, 235, 236, 237, 239, 246, 247, 248, 249, 252, 255, 256, 262, 263, 265, 266, 275, 279, 281, 285, 286, 293, 295, 310, 313, 316, 319, 329, 331, 332, 335, 336, 338, 341, 343, 345, 346, 347, 353, 354, 355, 356, 358, 359, 360, 361, 362, 365, 366, 367, 368, 371, 374], "chroma": [21, 74, 275], "space": [21, 23, 24, 27, 31, 36, 74, 79, 80, 85, 88, 89, 94, 105, 144, 153, 154, 156, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 202, 214, 218, 232, 233, 235, 236, 252, 266, 275, 280, 281, 285, 288, 289, 294, 295, 332, 338, 339, 341, 343, 358, 359, 368, 374], "c1": [21, 24, 74, 80, 178, 179, 180, 181, 182, 183, 184, 185, 186, 275, 281, 358], "c2": [21, 24, 35, 74, 80, 93, 178, 179, 180, 181, 182, 183, 184, 185, 186, 275, 281, 293, 358], "calcul": [21, 74, 105, 140, 141, 149, 153, 161, 169, 177, 187, 218, 232, 251, 252, 275, 295, 329, 330, 335, 338, 346, 352, 357, 359], "angular": [21, 74, 155, 234, 275, 340], "differ": [8, 21, 27, 28, 32, 35, 36, 39, 74, 85, 86, 90, 93, 94, 105, 116, 130, 140, 142, 191, 198, 201, 218, 255, 262, 265, 275, 285, 286, 290, 293, 294, 295, 306, 320, 329, 331, 361, 365, 367], "between": [21, 24, 30, 31, 35, 74, 80, 87, 88, 93, 105, 140, 141, 144, 146, 147, 153, 155, 161, 167, 169, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 218, 232, 234, 242, 247, 249, 252, 256, 275, 281, 287, 288, 293, 295, 329, 330, 332, 333, 334, 338, 340, 346, 350, 352, 354, 356, 358, 359, 362], "two": [8, 21, 24, 27, 28, 32, 35, 36, 74, 80, 85, 86, 90, 93, 94, 105, 116, 140, 141, 142, 146, 153, 154, 156, 161, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 198, 201, 214, 218, 220, 230, 232, 233, 235, 240, 242, 252, 255, 262, 265, 275, 281, 285, 286, 290, 293, 294, 295, 306, 329, 330, 331, 333, 338, 339, 341, 346, 348, 350, 358, 359, 361, 365, 367, 374], "hcl": [21, 74, 275], "first": [8, 12, 18, 21, 32, 35, 38, 74, 90, 93, 105, 116, 120, 126, 129, 140, 141, 144, 146, 153, 156, 160, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 201, 218, 220, 230, 232, 235, 237, 246, 247, 255, 265, 275, 290, 293, 295, 306, 310, 316, 319, 329, 330, 332, 333, 338, 341, 345, 352, 353, 354, 358, 361, 367], "second": [0, 21, 38, 39, 74, 105, 129, 130, 140, 141, 144, 149, 153, 156, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 211, 218, 220, 230, 232, 235, 247, 248, 260, 275, 295, 319, 320, 329, 330, 332, 335, 338, 341, 354, 355, 358, 363, 371], "difer": [21, 74, 275], "c": [13, 21, 24, 35, 38, 39, 74, 80, 93, 105, 121, 129, 130, 140, 141, 156, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 235, 275, 281, 293, 295, 311, 319, 320, 329, 330, 341, 352, 358], "l": [8, 21, 24, 35, 36, 74, 80, 93, 94, 105, 116, 140, 144, 156, 158, 160, 169, 175, 187, 191, 192, 202, 218, 235, 236, 237, 249, 252, 255, 256, 266, 275, 281, 293, 294, 295, 306, 329, 332, 341, 343, 345, 352, 356, 359, 361, 362, 368], "degre": [21, 74, 105, 109, 147, 149, 169, 172, 218, 246, 275, 295, 299, 334, 335, 352, 353], "length": [2, 7, 8, 18, 21, 24, 36, 74, 80, 94, 105, 110, 115, 116, 126, 140, 146, 149, 160, 161, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 201, 202, 217, 218, 237, 247, 252, 265, 266, 275, 281, 294, 295, 300, 305, 306, 316, 329, 333, 335, 345, 346, 354, 358, 359, 367, 368, 377], "compon": [21, 24, 27, 74, 80, 85, 105, 140, 147, 154, 156, 164, 169, 218, 233, 235, 240, 275, 281, 285, 295, 329, 334, 339, 341, 348, 352], "cm": [21, 24, 39, 74, 80, 130, 275, 281, 320], "smooth": [21, 24, 36, 74, 80, 94, 140, 149, 153, 154, 156, 167, 174, 191, 232, 233, 235, 242, 248, 255, 275, 281, 294, 329, 335, 338, 339, 341, 350, 355, 361], "cirular": [21, 74, 275], "boundari": [21, 36, 74, 94, 105, 140, 142, 153, 154, 158, 163, 218, 232, 233, 236, 239, 275, 294, 295, 329, 331, 338, 339, 343, 347], "condit": [21, 24, 28, 35, 36, 74, 80, 86, 93, 94, 105, 140, 142, 147, 150, 154, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 197, 218, 233, 236, 255, 261, 275, 281, 286, 293, 294, 295, 329, 331, 334, 336, 339, 343, 358, 360, 361, 364], "sigma": [0, 2, 7, 8, 21, 24, 36, 74, 80, 94, 105, 110, 115, 116, 140, 142, 150, 158, 169, 172, 175, 191, 211, 218, 236, 246, 249, 255, 275, 281, 294, 295, 300, 305, 306, 329, 331, 336, 343, 352, 353, 356, 361, 371], "dev": [21, 74, 275], "map": [8, 12, 21, 24, 27, 31, 32, 74, 75, 77, 80, 85, 88, 90, 116, 120, 153, 154, 156, 164, 217, 232, 233, 235, 240, 275, 276, 278, 281, 285, 288, 290, 306, 310, 338, 339, 341, 348, 377], "radiu": [21, 24, 74, 80, 149, 152, 156, 161, 164, 231, 235, 240, 275, 281, 335, 337, 341, 346, 348], "rbg": [21, 74, 275], "5": [18, 21, 24, 27, 28, 35, 36, 74, 76, 80, 85, 86, 93, 94, 105, 126, 140, 141, 146, 152, 153, 156, 158, 167, 187, 191, 199, 218, 220, 231, 232, 235, 236, 242, 252, 255, 263, 275, 277, 281, 285, 286, 293, 294, 295, 316, 329, 330, 333, 337, 338, 341, 343, 350, 359, 361, 366], "n": [0, 8, 13, 14, 18, 21, 24, 35, 36, 39, 74, 80, 93, 94, 105, 116, 121, 122, 126, 130, 140, 141, 142, 149, 150, 158, 160, 163, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 196, 211, 214, 217, 218, 236, 237, 239, 252, 255, 256, 260, 275, 281, 293, 294, 295, 306, 311, 312, 316, 320, 329, 330, 331, 335, 336, 343, 345, 347, 358, 359, 361, 362, 363, 371, 374, 377], "10": [21, 24, 27, 35, 36, 39, 74, 77, 80, 85, 93, 94, 105, 130, 140, 154, 158, 160, 169, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 199, 201, 202, 217, 218, 220, 233, 236, 237, 248, 252, 255, 263, 265, 266, 275, 278, 281, 285, 293, 294, 295, 320, 329, 339, 343, 345, 352, 355, 358, 359, 361, 366, 367, 368, 377], "7": [21, 24, 35, 36, 74, 80, 93, 94, 105, 158, 187, 218, 220, 236, 252, 275, 281, 293, 294, 295, 343, 359], "4": [21, 24, 27, 28, 36, 74, 77, 80, 85, 86, 94, 105, 140, 141, 144, 147, 149, 153, 154, 156, 158, 187, 191, 202, 214, 218, 220, 232, 233, 235, 236, 252, 255, 266, 275, 278, 281, 285, 286, 294, 295, 329, 330, 332, 334, 335, 338, 339, 341, 343, 359, 361, 368, 374], "6": [21, 24, 35, 36, 74, 77, 80, 93, 94, 105, 140, 149, 158, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 218, 220, 236, 237, 252, 255, 275, 278, 281, 293, 294, 295, 329, 335, 343, 345, 358, 359, 361], "slightli": [21, 74, 275], "more": [0, 11, 21, 24, 27, 30, 74, 80, 85, 87, 105, 119, 141, 147, 153, 154, 155, 160, 169, 173, 175, 191, 197, 201, 211, 217, 218, 232, 233, 234, 237, 247, 249, 255, 261, 265, 275, 281, 285, 287, 295, 309, 330, 334, 338, 339, 340, 345, 352, 354, 356, 361, 364, 367, 371, 377], "optim": [21, 74, 105, 154, 187, 189, 191, 197, 202, 218, 233, 252, 255, 261, 266, 275, 295, 339, 359, 360, 361, 364, 368], "hsl": [21, 74, 275], "convers": [21, 27, 74, 85, 217, 275, 285, 377], "routin": [21, 24, 31, 32, 35, 74, 80, 88, 90, 93, 105, 140, 141, 142, 146, 153, 155, 160, 164, 167, 168, 169, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 196, 197, 199, 201, 202, 213, 218, 232, 234, 237, 240, 242, 243, 247, 252, 255, 256, 260, 261, 263, 265, 266, 275, 281, 288, 290, 293, 295, 329, 330, 331, 333, 338, 340, 345, 348, 350, 351, 352, 354, 358, 359, 361, 362, 363, 364, 366, 367, 368, 373], "fix": [21, 24, 74, 80, 105, 140, 149, 214, 218, 275, 281, 295, 329, 335, 374], "back": [21, 27, 31, 74, 85, 88, 140, 197, 261, 275, 285, 288, 329, 364], "limit": [0, 11, 18, 21, 24, 27, 74, 80, 85, 105, 119, 126, 158, 191, 201, 211, 218, 236, 255, 265, 275, 281, 285, 295, 309, 316, 343, 361, 367, 371], "resolut": [21, 36, 74, 94, 140, 141, 147, 158, 187, 236, 252, 275, 294, 329, 330, 334, 343, 359], "lookup": [21, 74, 217, 275, 377], "tabl": [21, 74, 105, 214, 218, 275, 295, 374], "z": [21, 24, 35, 74, 80, 93, 105, 140, 141, 160, 161, 164, 172, 202, 217, 218, 237, 240, 246, 266, 275, 281, 293, 295, 329, 330, 345, 346, 348, 353, 368, 377], "perform": [15, 21, 24, 27, 31, 74, 80, 85, 88, 105, 123, 140, 141, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 251, 275, 281, 285, 288, 295, 313, 329, 330, 352, 357, 358], "bulk": [21, 74, 275], "lut": [21, 74, 275], "complex": [21, 24, 27, 74, 80, 85, 140, 141, 153, 156, 160, 161, 164, 172, 217, 232, 235, 237, 240, 246, 275, 281, 285, 329, 330, 338, 341, 345, 346, 348, 353, 377], "number": [11, 12, 13, 18, 21, 24, 27, 32, 35, 36, 74, 80, 85, 90, 93, 94, 105, 119, 120, 121, 126, 140, 141, 144, 146, 147, 150, 153, 154, 156, 161, 163, 164, 167, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 197, 199, 201, 214, 216, 217, 218, 220, 230, 232, 233, 235, 239, 240, 242, 246, 247, 248, 251, 252, 255, 260, 261, 263, 265, 275, 281, 285, 290, 293, 294, 295, 309, 310, 311, 316, 329, 330, 332, 333, 334, 336, 338, 339, 341, 346, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 366, 367, 374, 376, 377], "avoid": [0, 21, 27, 28, 32, 74, 85, 86, 90, 140, 154, 174, 187, 191, 211, 233, 248, 252, 255, 275, 285, 286, 290, 329, 339, 355, 359, 361, 371], "loop": [11, 12, 21, 27, 74, 85, 119, 120, 275, 285, 309, 310], "bp": [21, 24, 74, 80, 140, 275, 281, 329], "boxplot": [21, 24, 74, 80, 275, 281], "ar": [11, 13, 21, 24, 27, 28, 30, 31, 32, 35, 36, 74, 76, 80, 85, 86, 87, 88, 89, 90, 93, 94, 105, 119, 121, 140, 142, 146, 147, 153, 154, 155, 156, 160, 164, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 197, 199, 201, 213, 218, 220, 232, 233, 234, 235, 237, 240, 246, 247, 261, 263, 265, 275, 277, 281, 285, 286, 287, 288, 289, 290, 293, 294, 295, 309, 311, 329, 331, 333, 334, 338, 339, 340, 341, 345, 348, 352, 353, 354, 358, 364, 366, 367, 373], "aw": [21, 74, 169, 275, 352], "littl": [12, 15, 21, 24, 74, 80, 120, 123, 275, 281, 310, 313], "better": [21, 24, 31, 74, 80, 88, 105, 189, 218, 275, 281, 288, 295, 360], "pack": [8, 12, 21, 35, 74, 93, 105, 116, 120, 218, 275, 293, 295, 306, 310], "data": [10, 11, 13, 18, 21, 24, 25, 27, 31, 35, 39, 74, 80, 81, 85, 88, 89, 93, 105, 118, 119, 121, 126, 130, 140, 141, 142, 144, 147, 153, 154, 156, 158, 160, 163, 168, 169, 172, 173, 177, 191, 199, 201, 202, 214, 217, 218, 232, 233, 235, 236, 237, 239, 243, 246, 247, 251, 255, 263, 265, 266, 275, 281, 282, 285, 288, 289, 293, 295, 308, 309, 311, 316, 320, 329, 330, 331, 332, 334, 338, 339, 341, 343, 345, 347, 351, 352, 353, 354, 357, 361, 366, 367, 368, 374, 377], "hexadecim": [21, 74, 275], "bgr": [21, 74, 275], "format": [2, 9, 12, 18, 21, 24, 27, 30, 74, 80, 85, 87, 89, 110, 117, 120, 126, 164, 201, 202, 213, 214, 216, 240, 265, 266, 275, 281, 285, 287, 289, 300, 307, 310, 316, 348, 367, 368, 373, 374, 376], "fast": [21, 27, 31, 74, 85, 88, 105, 218, 275, 285, 288, 295], "render": [21, 23, 24, 74, 79, 80, 275, 280, 281], "javascript": [21, 74, 275], "canva": [21, 74, 275], "import": [21, 31, 35, 74, 75, 88, 93, 105, 167, 218, 220, 230, 242, 275, 276, 288, 293, 295, 350], "html": [21, 35, 74, 89, 93, 105, 187, 218, 252, 275, 289, 293, 295, 359], "demo": [21, 74, 275], "256x3": [21, 74, 275], "hex": [21, 74, 275], "given": [21, 24, 30, 74, 76, 80, 87, 105, 140, 153, 164, 174, 187, 189, 191, 214, 217, 218, 220, 230, 232, 240, 248, 252, 255, 275, 277, 281, 287, 295, 329, 338, 348, 355, 359, 360, 361, 374, 377], "rrggbb": [21, 74, 275], "16": [21, 36, 74, 94, 105, 158, 160, 187, 218, 236, 237, 252, 275, 294, 295, 343, 345, 359], "bit": [21, 27, 74, 85, 105, 140, 214, 218, 275, 285, 295, 329, 374], "565": [21, 74, 275], "brg": [21, 25, 74, 81, 275, 282], "integ": [0, 8, 12, 21, 24, 27, 31, 74, 80, 85, 88, 105, 116, 120, 140, 141, 146, 147, 167, 174, 175, 191, 211, 214, 218, 242, 248, 249, 255, 275, 281, 285, 288, 295, 306, 310, 329, 330, 333, 334, 350, 355, 356, 361, 371, 374], "form": [8, 12, 15, 21, 24, 31, 35, 74, 80, 88, 93, 105, 116, 120, 123, 140, 163, 189, 191, 218, 239, 255, 275, 281, 288, 293, 295, 306, 310, 313, 329, 347, 360, 361], "rrrrr": [21, 74, 275], "gggggg": [21, 74, 275], "bbbbb": [21, 74, 275], "int": [12, 18, 21, 24, 28, 32, 35, 36, 74, 80, 86, 90, 93, 94, 105, 120, 126, 140, 142, 144, 146, 147, 149, 150, 152, 153, 154, 156, 160, 161, 163, 167, 169, 172, 174, 175, 187, 191, 199, 201, 214, 218, 231, 232, 233, 235, 237, 239, 242, 246, 248, 249, 252, 255, 263, 265, 275, 281, 286, 290, 293, 294, 295, 310, 316, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 345, 346, 347, 350, 352, 353, 355, 356, 359, 361, 366, 367, 374], "enumer": [21, 74, 220, 275], "over": [8, 13, 21, 24, 27, 28, 30, 31, 32, 38, 74, 80, 85, 86, 87, 88, 90, 105, 116, 121, 129, 140, 141, 146, 153, 155, 160, 167, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 217, 218, 232, 234, 237, 242, 246, 247, 251, 255, 275, 281, 285, 286, 287, 288, 290, 295, 306, 311, 319, 329, 330, 333, 338, 340, 345, 350, 353, 354, 357, 358, 360, 361, 377], "bu": [21, 74, 275], "ident": [21, 28, 74, 86, 105, 177, 218, 251, 275, 286, 295, 357], "byte": [21, 27, 31, 74, 85, 88, 275, 285, 288], "skip": [21, 74, 140, 147, 153, 156, 232, 235, 275, 329, 334, 338, 341], "lowest": [21, 74, 105, 218, 275, 295], "each": [8, 11, 21, 24, 27, 28, 32, 74, 80, 85, 86, 90, 105, 116, 119, 140, 141, 144, 146, 147, 153, 160, 161, 169, 174, 175, 177, 189, 191, 198, 218, 232, 237, 248, 249, 251, 255, 262, 275, 281, 285, 286, 290, 295, 306, 309, 329, 330, 332, 333, 334, 338, 345, 346, 352, 355, 356, 357, 360, 361, 365], "reserv": [21, 74, 275], "fourth": [21, 74, 275], "storag": [21, 31, 74, 88, 275, 288], "intend": [21, 74, 275], "develop": [21, 74, 105, 218, 275, 295], "pallet": [21, 74, 275], "mictrocontrol": [21, 74, 275], "driven": [21, 74, 105, 218, 275, 295], "displai": [21, 74, 105, 218, 275, 295], "interfac": [21, 23, 74, 79, 215, 275, 280, 375], "formt": [21, 74, 275], "binari": [8, 12, 21, 74, 116, 120, 140, 187, 191, 252, 255, 275, 306, 310, 329, 359, 361], "liter": [21, 74, 275], "subset": [21, 35, 74, 93, 105, 147, 218, 275, 293, 295, 334], "shownn": [21, 74, 275], "quickli": [21, 74, 275], "arduino": [21, 74, 275], "uno": [21, 74, 275], "2": [8, 15, 21, 24, 27, 28, 30, 32, 35, 36, 39, 74, 80, 85, 86, 87, 90, 93, 94, 105, 116, 123, 130, 140, 141, 142, 146, 149, 153, 154, 158, 161, 163, 164, 168, 169, 172, 187, 191, 196, 202, 217, 218, 220, 232, 233, 236, 239, 240, 243, 246, 252, 255, 260, 266, 275, 281, 285, 286, 287, 290, 293, 294, 295, 306, 313, 320, 329, 330, 331, 333, 335, 338, 339, 343, 346, 347, 348, 351, 352, 353, 359, 361, 363, 368, 377], "inch": [21, 74, 275], "tft": [21, 74, 275], "touch": [21, 74, 275], "screen": [21, 23, 25, 74, 79, 81, 275, 280, 282], "breakout": [21, 74, 275], "restrict": [21, 27, 74, 85, 153, 232, 275, 285, 338], "sent": [21, 74, 153, 232, 275, 338], "singl": [21, 24, 27, 32, 35, 39, 74, 80, 85, 90, 93, 105, 130, 191, 218, 255, 275, 281, 285, 290, 293, 295, 320, 361], "write": [21, 23, 27, 39, 74, 79, 85, 130, 275, 280, 285, 320], "one": [11, 12, 18, 21, 24, 27, 31, 32, 35, 36, 39, 74, 80, 85, 88, 90, 93, 94, 105, 119, 120, 126, 130, 140, 141, 142, 156, 169, 172, 178, 179, 180, 181, 182, 183, 184, 185, 186, 197, 199, 201, 214, 218, 220, 235, 246, 261, 263, 265, 275, 281, 285, 288, 290, 293, 294, 295, 309, 310, 316, 320, 329, 330, 331, 341, 352, 353, 358, 364, 366, 367, 374], "port": [21, 74, 105, 218, 275, 295], "mode": [21, 24, 27, 74, 80, 85, 89, 105, 140, 169, 199, 218, 263, 275, 281, 285, 289, 295, 329, 352, 366], "low": [21, 74, 105, 140, 144, 149, 154, 160, 173, 218, 233, 237, 247, 275, 295, 329, 332, 335, 339, 345, 354], "high": [0, 21, 31, 74, 88, 105, 140, 144, 153, 154, 168, 211, 218, 232, 233, 243, 275, 288, 295, 329, 332, 338, 339, 351, 371], "don": [21, 32, 74, 90, 140, 187, 196, 252, 260, 275, 290, 329, 359, 363], "t": [18, 21, 24, 32, 35, 36, 39, 74, 80, 89, 90, 93, 94, 105, 126, 130, 140, 146, 147, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 197, 215, 216, 218, 236, 252, 255, 260, 261, 275, 281, 289, 290, 293, 294, 295, 316, 320, 329, 333, 334, 343, 352, 358, 359, 361, 363, 364, 375, 376], "even": [21, 74, 105, 140, 153, 168, 197, 218, 232, 243, 261, 275, 295, 329, 338, 351, 364], "lower": [21, 24, 35, 74, 80, 93, 105, 153, 154, 218, 232, 233, 275, 281, 293, 295, 338, 339], "show": [21, 24, 35, 74, 80, 93, 105, 156, 218, 235, 275, 281, 293, 295, 341], "addit": [24, 32, 75, 80, 90, 105, 154, 169, 218, 233, 276, 281, 290, 295, 339, 352], "also": [8, 27, 32, 35, 39, 75, 76, 85, 90, 93, 105, 116, 130, 140, 141, 147, 153, 154, 160, 189, 201, 218, 232, 233, 237, 265, 276, 277, 285, 290, 293, 295, 306, 320, 329, 330, 334, 338, 339, 345, 360, 367], "load": [75, 77, 105, 217, 218, 276, 278, 295, 377], "tree": [27, 76, 85, 277, 285], "get": [23, 24, 27, 32, 35, 76, 79, 80, 85, 90, 93, 105, 140, 146, 147, 167, 168, 173, 175, 218, 242, 243, 247, 249, 277, 280, 281, 285, 290, 293, 295, 329, 333, 334, 350, 351, 354, 356], "depth": [76, 277], "structur": [27, 35, 76, 85, 93, 277, 285, 293], "ani": [8, 27, 32, 76, 85, 90, 105, 116, 140, 147, 153, 187, 191, 192, 218, 232, 252, 255, 256, 277, 285, 290, 295, 306, 329, 334, 338, 359, 361, 362], "nest": [27, 76, 85, 89, 213, 277, 285, 289, 373], "count": [39, 76, 105, 130, 140, 153, 167, 169, 175, 187, 191, 192, 198, 218, 232, 242, 249, 252, 255, 256, 262, 277, 295, 320, 329, 338, 350, 352, 356, 359, 361, 362, 365], "howev": [27, 32, 76, 85, 90, 105, 218, 277, 285, 290, 295], "leaf": [76, 107, 108, 109, 277, 297, 298, 299], "node": [27, 76, 85, 107, 108, 109, 277, 285, 297, 298, 299], "leav": [32, 36, 76, 90, 94, 140, 158, 187, 236, 252, 277, 290, 294, 329, 343, 359], "order": [25, 27, 28, 76, 81, 85, 86, 105, 140, 149, 153, 160, 177, 218, 232, 237, 251, 277, 282, 285, 286, 295, 329, 335, 338, 345, 357], "deep": [76, 277], "flatten": [8, 12, 76, 116, 120, 140, 277, 306, 310, 329], "command": [23, 24, 31, 76, 79, 80, 88, 215, 217, 277, 280, 281, 288, 375, 377], "lw": [24, 35, 76, 80, 93, 156, 235, 277, 281, 293, 341], "k": [0, 14, 18, 24, 35, 76, 80, 93, 105, 122, 126, 140, 142, 146, 147, 149, 156, 160, 167, 169, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 199, 211, 218, 235, 237, 242, 247, 248, 249, 252, 255, 263, 277, 281, 293, 295, 312, 316, 329, 331, 333, 334, 335, 341, 345, 350, 352, 354, 355, 356, 358, 359, 361, 366, 371], "rotate_label": [76, 277], "true": [15, 24, 25, 27, 31, 32, 35, 36, 76, 80, 81, 85, 88, 90, 93, 94, 105, 123, 140, 141, 146, 147, 153, 156, 169, 172, 177, 187, 197, 213, 215, 216, 218, 232, 235, 246, 251, 252, 261, 277, 281, 282, 285, 288, 290, 293, 294, 295, 313, 329, 330, 333, 334, 338, 341, 352, 353, 357, 359, 364, 373, 375, 376], "label_offset": [76, 277], "arcspan": [76, 277], "figsiz": [76, 277], "9": [24, 36, 76, 80, 89, 94, 105, 158, 163, 187, 196, 202, 218, 220, 236, 239, 252, 260, 266, 277, 281, 289, 294, 295, 343, 347, 359, 363, 368], "fontsiz": [24, 76, 80, 277, 281], "line_resolut": [76, 277], "50": [24, 36, 76, 80, 94, 105, 147, 158, 187, 218, 236, 252, 277, 281, 294, 295, 334, 343, 359], "regist": [11, 77, 119, 278, 309], "fabio": [77, 278], "crameri": [77, 278], "well": [77, 105, 153, 168, 218, 232, 243, 278, 295, 338, 351], "revers": [23, 77, 79, 140, 278, 280, 329], "version": [0, 8, 23, 77, 79, 105, 116, 140, 149, 211, 218, 278, 280, 295, 306, 329, 335, 371], "similarli": [77, 140, 169, 278, 329, 352], "built": [27, 28, 32, 77, 85, 86, 90, 278, 285, 286, 290], "2020": [77, 278], "januari": [77, 278], "scientif": [77, 214, 278, 374], "colour": [77, 278], "zenodo": [77, 278], "http": [23, 35, 77, 79, 89, 93, 105, 158, 177, 187, 191, 215, 217, 218, 236, 251, 252, 255, 278, 280, 289, 293, 295, 343, 357, 359, 361, 375, 377], "doi": [77, 278], "org": [35, 77, 89, 93, 105, 187, 191, 218, 252, 255, 278, 289, 293, 295, 359, 361], "5281": [77, 278], "4153113": [77, 278], "gradient": [22, 78, 140, 153, 154, 156, 187, 197, 232, 233, 235, 252, 261, 279, 329, 338, 339, 341, 359, 364], "left": [12, 22, 24, 78, 80, 105, 108, 120, 160, 169, 218, 237, 279, 281, 295, 298, 310, 345, 352], "right": [22, 24, 35, 78, 80, 93, 105, 108, 160, 169, 218, 237, 279, 281, 293, 295, 298, 345, 352], "onli": [13, 22, 24, 27, 28, 30, 35, 78, 80, 85, 86, 87, 93, 105, 121, 140, 141, 160, 173, 177, 197, 214, 218, 237, 247, 251, 261, 279, 281, 285, 286, 287, 293, 295, 311, 329, 330, 345, 354, 357, 364, 374], "test": [22, 24, 31, 35, 39, 78, 80, 88, 93, 105, 130, 140, 147, 154, 158, 169, 187, 191, 201, 217, 218, 233, 236, 252, 255, 265, 279, 281, 288, 293, 295, 320, 329, 334, 339, 343, 352, 359, 361, 367, 377], "2d": [22, 24, 35, 36, 78, 80, 93, 94, 140, 142, 152, 153, 154, 156, 158, 160, 163, 164, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 231, 232, 233, 235, 236, 237, 239, 240, 251, 279, 281, 293, 294, 329, 331, 337, 338, 339, 341, 343, 345, 347, 348, 352, 357, 358], "channel": [22, 24, 78, 80, 140, 141, 153, 155, 156, 160, 232, 234, 235, 237, 279, 281, 329, 330, 338, 340, 341, 345], "collect": [23, 24, 31, 35, 79, 80, 88, 93, 146, 153, 160, 161, 201, 214, 232, 237, 265, 280, 281, 288, 293, 333, 338, 345, 346, 367, 374], "direct": [23, 24, 36, 79, 80, 94, 140, 147, 153, 156, 232, 235, 280, 281, 294, 329, 334, 338, 341], "pixel": [23, 24, 36, 79, 80, 94, 156, 235, 280, 281, 294, 341], "via": [8, 23, 24, 28, 31, 32, 35, 79, 80, 86, 88, 90, 93, 116, 140, 215, 220, 280, 281, 286, 288, 290, 293, 306, 329, 375], "It": [11, 12, 23, 28, 30, 31, 32, 79, 86, 87, 88, 90, 105, 119, 120, 140, 153, 156, 173, 187, 196, 201, 215, 217, 218, 232, 235, 247, 252, 260, 265, 280, 286, 287, 288, 290, 295, 309, 310, 329, 338, 341, 354, 359, 363, 367, 375, 377], "difficult": [23, 28, 79, 86, 280, 286], "directli": [23, 24, 79, 80, 105, 154, 218, 233, 280, 281, 295, 339], "One": [23, 79, 140, 191, 255, 280, 329, 361], "trick": [23, 79, 280], "let": [23, 24, 79, 80, 105, 141, 218, 280, 281, 295, 330], "do": [11, 13, 23, 24, 27, 32, 35, 79, 80, 85, 90, 93, 105, 119, 121, 140, 141, 147, 153, 173, 217, 218, 232, 247, 280, 281, 285, 290, 293, 295, 309, 311, 329, 330, 334, 338, 354, 377], "heavi": [23, 79, 105, 218, 280, 295], "lift": [23, 79, 280], "you": [8, 12, 23, 32, 79, 90, 105, 116, 120, 140, 147, 169, 187, 189, 191, 217, 218, 252, 255, 280, 290, 295, 306, 310, 329, 334, 352, 359, 360, 361, 377], "At": [12, 23, 79, 120, 158, 236, 280, 310, 343], "cost": [23, 27, 79, 85, 141, 280, 285, 330], "engin": [23, 79, 105, 218, 280, 295], "how": [23, 24, 27, 32, 79, 80, 85, 90, 105, 140, 160, 168, 201, 217, 218, 220, 237, 243, 265, 280, 281, 285, 290, 295, 329, 345, 351, 367, 377], "access": [23, 28, 32, 79, 86, 90, 105, 217, 218, 220, 280, 286, 290, 295, 377], "have": [15, 23, 28, 31, 32, 35, 79, 86, 88, 90, 93, 105, 123, 140, 142, 147, 153, 160, 169, 172, 187, 191, 218, 232, 237, 246, 252, 255, 280, 286, 288, 290, 293, 295, 313, 329, 331, 334, 338, 345, 352, 353, 359, 361], "handl": [11, 23, 27, 28, 32, 79, 85, 86, 90, 119, 140, 213, 280, 285, 286, 290, 309, 329, 373], "all": [11, 13, 23, 24, 27, 28, 31, 32, 35, 79, 80, 85, 86, 88, 89, 90, 93, 105, 119, 121, 140, 141, 152, 156, 163, 164, 167, 169, 173, 189, 191, 217, 218, 231, 235, 239, 240, 242, 247, 255, 280, 281, 285, 286, 288, 289, 290, 293, 295, 309, 311, 329, 330, 337, 341, 347, 348, 350, 352, 354, 360, 361, 377], "tk": [23, 79, 280], "qt": [23, 79, 280], "agg": [23, 79, 280], "backend": [23, 79, 280], "so": [12, 13, 18, 23, 24, 27, 32, 36, 79, 80, 85, 89, 90, 94, 105, 120, 121, 126, 140, 147, 153, 158, 168, 187, 191, 196, 197, 201, 217, 218, 220, 232, 236, 243, 252, 255, 260, 261, 265, 280, 281, 285, 289, 290, 294, 295, 310, 311, 316, 329, 334, 338, 343, 351, 359, 361, 363, 364, 367, 377], "multipl": [8, 11, 23, 24, 79, 80, 105, 116, 119, 140, 141, 178, 179, 180, 181, 182, 183, 184, 185, 186, 201, 218, 265, 280, 281, 295, 306, 309, 329, 330, 358, 367], "platform": [23, 79, 105, 218, 220, 280, 295], "fig": [23, 24, 79, 80, 280, 281], "hide": [23, 24, 79, 80, 280, 281], "toolabr": [23, 79, 280], "chang": [23, 24, 27, 28, 79, 80, 85, 86, 105, 140, 191, 218, 220, 255, 280, 281, 285, 286, 295, 329, 361], "across": [23, 27, 28, 79, 85, 86, 105, 147, 153, 156, 218, 232, 235, 280, 285, 286, 295, 334, 338, 341], "try": [23, 27, 32, 79, 85, 90, 105, 158, 197, 214, 218, 236, 261, 280, 285, 290, 295, 343, 364, 374], "catch": [23, 32, 79, 90, 280, 290], "toolbar": [23, 79, 280], "w": [15, 23, 24, 25, 35, 79, 80, 81, 93, 105, 123, 140, 141, 142, 144, 154, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 202, 218, 233, 266, 280, 281, 282, 293, 295, 313, 329, 330, 331, 332, 339, 352, 358, 368], "titl": [17, 23, 24, 35, 79, 80, 93, 105, 125, 218, 280, 281, 293, 295, 315], "untitl": [23, 25, 79, 81, 280, 282], "stackoverflow": [23, 35, 79, 93, 214, 215, 216, 217, 280, 293, 374, 375, 376, 377], "com": [23, 35, 79, 93, 105, 140, 158, 177, 214, 215, 216, 217, 218, 236, 251, 280, 293, 295, 329, 343, 357, 374, 375, 376, 377], "question": [23, 35, 79, 93, 214, 215, 216, 217, 280, 293, 374, 375, 376, 377], "9295026": [23, 79, 280], "remov": [23, 24, 79, 80, 140, 141, 153, 164, 168, 169, 199, 232, 240, 243, 263, 280, 281, 329, 330, 338, 348, 351, 352, 366], "axi": [23, 24, 79, 80, 105, 140, 156, 160, 169, 172, 218, 235, 237, 246, 280, 281, 295, 329, 341, 345, 352, 353], "legend": [23, 24, 79, 80, 105, 218, 280, 281, 295], "white": [23, 24, 79, 80, 105, 218, 280, 281, 295], "rgbdata": [23, 25, 79, 81, 280, 282], "helper": [12, 24, 80, 120, 142, 197, 261, 281, 310, 331, 364], "ax": [24, 35, 80, 93, 105, 153, 191, 218, 232, 255, 281, 293, 295, 338, 361], "draw": [13, 24, 80, 105, 121, 150, 191, 196, 201, 218, 255, 260, 265, 281, 295, 311, 336, 361, 363, 367], "bottom": [24, 80, 281], "line": [12, 18, 24, 80, 105, 120, 126, 140, 156, 202, 214, 215, 217, 218, 235, 266, 281, 295, 310, 316, 329, 341, 368, 374, 375, 377], "maplotlib": [24, 80, 281], "plt": [24, 80, 105, 218, 281, 295], "gca": [24, 80, 281], "move": [12, 24, 39, 80, 120, 130, 140, 155, 234, 281, 310, 320, 329, 340], "y": [8, 12, 15, 24, 35, 38, 39, 80, 93, 105, 116, 120, 123, 129, 130, 140, 141, 146, 152, 153, 156, 161, 164, 169, 174, 177, 187, 191, 202, 216, 218, 231, 232, 235, 240, 248, 251, 252, 255, 266, 281, 293, 295, 306, 310, 313, 319, 320, 329, 330, 333, 337, 338, 341, 346, 348, 352, 355, 357, 359, 361, 368, 376], "noth": [24, 80, 281], "els": [24, 31, 80, 88, 156, 189, 216, 220, 235, 281, 288, 341, 360, 376], "linewidth": [24, 80, 105, 218, 281, 295], "improv": [24, 28, 36, 80, 86, 94, 153, 232, 281, 286, 294, 338], "appear": [24, 39, 80, 105, 130, 147, 218, 281, 295, 320, 334], "box": [24, 80, 140, 281, 329], "whisker": [24, 80, 281], "To": [24, 27, 80, 85, 105, 140, 153, 218, 232, 281, 285, 295, 329, 338], "call": [11, 12, 13, 24, 27, 28, 31, 32, 35, 80, 85, 86, 88, 90, 93, 105, 119, 120, 121, 140, 169, 197, 216, 217, 218, 220, 230, 261, 281, 285, 286, 288, 290, 293, 295, 309, 310, 311, 329, 352, 364, 376, 377], "object": [8, 24, 25, 27, 28, 35, 80, 81, 85, 86, 89, 93, 108, 109, 116, 140, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 197, 202, 213, 214, 217, 220, 230, 252, 255, 261, 266, 281, 282, 285, 286, 289, 293, 298, 299, 306, 329, 352, 358, 359, 360, 361, 364, 368, 373, 374, 377], "accompani": [24, 31, 80, 88, 281, 288], "set": [24, 28, 31, 32, 36, 80, 86, 88, 89, 90, 94, 105, 140, 158, 161, 164, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 197, 218, 220, 230, 236, 240, 252, 256, 261, 281, 286, 288, 289, 290, 294, 295, 329, 343, 346, 348, 352, 358, 359, 362, 364], "posit": [24, 35, 36, 80, 93, 94, 105, 140, 141, 142, 144, 146, 147, 149, 150, 158, 163, 167, 169, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 201, 202, 214, 217, 218, 236, 239, 242, 247, 248, 249, 252, 255, 265, 266, 281, 293, 294, 295, 329, 330, 331, 332, 333, 334, 335, 336, 343, 347, 350, 352, 354, 355, 356, 358, 359, 361, 367, 368, 374, 377], "width": [18, 24, 36, 80, 94, 105, 126, 140, 154, 156, 168, 174, 214, 218, 233, 235, 243, 248, 281, 294, 295, 316, 329, 339, 341, 351, 355, 374], "fill": [24, 80, 105, 140, 174, 217, 218, 248, 281, 295, 329, 355, 377], "notch": [24, 80, 281], "showflier": [24, 80, 281], "whi": [24, 80, 281], "95": [24, 36, 80, 94, 105, 158, 187, 218, 236, 252, 281, 294, 295, 343, 359], "bgcolor": [24, 80, 281], "94509804": [24, 80, 281], "9411765": [24, 80, 281], "9137255": [24, 80, 281], "dtype": [24, 80, 105, 218, 281, 295], "float32": [12, 24, 27, 80, 85, 105, 120, 140, 142, 158, 161, 168, 169, 174, 175, 218, 236, 243, 248, 249, 281, 285, 295, 310, 329, 331, 343, 346, 351, 352, 355, 356], "mediancolor": [24, 80, 281], "kwarg": [3, 11, 17, 24, 27, 80, 85, 89, 111, 119, 125, 164, 169, 187, 197, 217, 240, 252, 261, 281, 285, 289, 301, 309, 315, 348, 352, 359, 364, 377], "nice": [24, 27, 80, 85, 140, 154, 233, 281, 285, 329, 339], "style": [24, 80, 213, 281, 373], "npoint": [24, 80, 161, 163, 239, 281, 346, 347], "ngroup": [24, 80, 281], "x": [0, 1, 8, 12, 13, 15, 24, 27, 28, 35, 36, 38, 39, 80, 85, 86, 93, 94, 105, 116, 120, 121, 123, 129, 130, 140, 141, 142, 144, 146, 147, 149, 152, 153, 154, 156, 158, 160, 161, 163, 164, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 196, 202, 211, 212, 214, 217, 218, 231, 232, 233, 235, 236, 237, 239, 240, 247, 248, 249, 251, 252, 255, 256, 260, 266, 281, 285, 286, 293, 294, 295, 306, 310, 311, 313, 319, 320, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 343, 345, 346, 347, 348, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 368, 371, 372, 374, 377], "group": [24, 80, 105, 140, 218, 281, 295, 329], "boolean": [15, 24, 27, 31, 35, 80, 85, 88, 93, 105, 123, 140, 147, 156, 167, 169, 177, 214, 218, 235, 242, 251, 281, 285, 288, 293, 295, 313, 329, 334, 341, 350, 352, 357, 374], "whether": [24, 27, 28, 30, 32, 35, 80, 85, 86, 87, 90, 93, 105, 140, 153, 156, 160, 168, 169, 172, 177, 191, 218, 232, 235, 237, 243, 246, 251, 255, 281, 285, 286, 287, 290, 293, 295, 329, 338, 341, 345, 351, 352, 353, 357, 361], "inset": [24, 80, 281], "median": [24, 80, 105, 140, 160, 169, 201, 218, 237, 265, 281, 295, 329, 345, 352, 367], "outli": [24, 80, 281], "scatter": [24, 35, 80, 93, 105, 218, 281, 293, 295], "which": [0, 12, 24, 25, 27, 32, 35, 36, 80, 81, 85, 90, 93, 94, 105, 120, 140, 141, 146, 147, 152, 153, 154, 156, 160, 169, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 211, 213, 218, 231, 232, 233, 235, 237, 246, 248, 249, 255, 281, 282, 285, 290, 293, 294, 295, 310, 329, 330, 333, 334, 337, 338, 339, 341, 345, 352, 353, 355, 356, 358, 361, 371, 373], "percentil": [24, 80, 140, 169, 281, 329, 352], "rang": [8, 24, 36, 80, 94, 105, 116, 140, 158, 160, 167, 187, 191, 218, 236, 237, 242, 252, 255, 281, 294, 295, 306, 329, 343, 345, 350, 359, 361], "background": [24, 27, 80, 85, 281, 285], "black": [24, 80, 105, 218, 281, 295], "unless": [24, 31, 80, 88, 105, 160, 218, 237, 281, 288, 295, 345], "case": [24, 27, 31, 32, 80, 85, 88, 90, 105, 140, 141, 174, 187, 197, 217, 218, 248, 252, 261, 281, 285, 288, 290, 295, 329, 330, 355, 359, 364, 377], "foward": [24, 80, 281], "pyplot": [8, 24, 80, 105, 116, 218, 281, 295, 306], "mark": [24, 80, 140, 153, 232, 281, 329, 338], "min": [17, 24, 80, 105, 125, 140, 177, 218, 251, 281, 295, 315, 329, 357], "max": [17, 24, 80, 105, 125, 140, 169, 177, 201, 218, 251, 265, 281, 295, 315, 329, 352, 357, 367], "xby": [24, 80, 281], "yby": [24, 80, 281], "see": [24, 27, 31, 35, 80, 85, 88, 93, 105, 140, 141, 144, 158, 168, 169, 191, 202, 214, 218, 220, 230, 236, 243, 255, 266, 281, 285, 288, 293, 295, 329, 330, 332, 343, 351, 352, 361, 368, 374], "zero": [13, 24, 35, 36, 39, 80, 93, 94, 105, 121, 130, 140, 156, 158, 160, 167, 168, 173, 174, 187, 191, 202, 217, 218, 235, 236, 237, 242, 243, 247, 248, 252, 255, 266, 281, 293, 294, 295, 311, 320, 329, 341, 343, 345, 350, 351, 354, 355, 359, 361, 368, 377], "upper": [24, 35, 80, 93, 105, 153, 218, 232, 281, 293, 295, 338], "largest": [11, 24, 35, 36, 80, 93, 94, 105, 119, 140, 191, 218, 255, 281, 293, 294, 295, 309, 329, 361], "un": [24, 80, 281], "current": [11, 24, 38, 39, 80, 119, 129, 130, 216, 220, 281, 309, 319, 320, 376], "xlimit": [24, 80, 281], "If": [11, 24, 27, 28, 31, 32, 35, 36, 38, 80, 85, 86, 88, 89, 90, 93, 94, 105, 119, 129, 140, 141, 156, 160, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 197, 199, 218, 235, 237, 246, 247, 255, 261, 263, 281, 285, 286, 288, 289, 290, 293, 294, 295, 309, 319, 329, 330, 341, 345, 352, 353, 354, 358, 361, 364, 366], "curent": [24, 80, 281], "xlim": [24, 80, 281], "neg": [24, 35, 80, 93, 105, 140, 141, 147, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 214, 218, 247, 255, 281, 293, 295, 329, 330, 334, 354, 358, 361, 374], "error": [8, 24, 28, 30, 32, 35, 80, 86, 87, 89, 90, 93, 105, 116, 140, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 197, 202, 218, 260, 261, 266, 281, 286, 287, 289, 290, 293, 295, 306, 329, 352, 358, 363, 364, 368], "rais": [24, 30, 31, 36, 80, 87, 88, 94, 105, 158, 160, 169, 187, 218, 236, 237, 252, 281, 287, 288, 294, 295, 343, 345, 352, 359], "ylimit": [24, 80, 281], "ylim": [24, 80, 281], "both": [24, 27, 36, 39, 80, 85, 94, 105, 130, 146, 147, 169, 218, 281, 285, 294, 295, 320, 333, 334, 352], "smae": [24, 80, 281], "turn": [24, 80, 281], "clip": [0, 24, 80, 140, 211, 281, 329, 371], "tick": [24, 80, 281], "aspect": [24, 80, 156, 235, 281, 341], "interv": [24, 80, 105, 140, 199, 218, 263, 281, 295, 329, 366], "ratio": [8, 24, 80, 105, 116, 153, 156, 218, 232, 235, 281, 295, 306, 338, 341], "im": [24, 80, 281], "keep": [24, 31, 80, 88, 140, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 281, 288, 329, 352, 358], "corner": [24, 36, 80, 94, 158, 236, 281, 294, 343], "rescal": [24, 36, 80, 94, 140, 158, 187, 236, 252, 281, 294, 329, 343, 359], "height": [18, 24, 36, 80, 94, 105, 126, 154, 218, 233, 281, 294, 295, 316, 339], "dimens": [18, 24, 35, 80, 93, 105, 126, 140, 141, 142, 144, 146, 153, 154, 156, 160, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 232, 233, 235, 237, 255, 281, 293, 295, 316, 329, 330, 331, 332, 333, 338, 339, 341, 345, 352, 358, 361], "instanc": [8, 24, 27, 80, 85, 105, 116, 218, 281, 285, 295, 306], "tha": [24, 80, 281], "size": [8, 10, 11, 18, 24, 31, 32, 35, 36, 80, 88, 90, 93, 94, 105, 116, 118, 119, 126, 140, 141, 142, 147, 153, 156, 169, 173, 177, 192, 201, 214, 217, 218, 232, 235, 247, 251, 256, 265, 281, 288, 290, 293, 294, 295, 306, 308, 309, 316, 329, 330, 331, 334, 338, 341, 352, 354, 357, 362, 367, 374, 377], "figur": [24, 80, 105, 214, 218, 281, 295, 374], "rel": [24, 36, 80, 94, 105, 140, 147, 160, 167, 218, 237, 242, 281, 294, 295, 329, 334, 345, 350], "measur": [24, 80, 105, 140, 141, 144, 153, 160, 169, 218, 232, 237, 281, 295, 329, 330, 332, 338, 345, 352], "scale": [2, 7, 8, 24, 80, 105, 110, 115, 116, 140, 153, 154, 156, 169, 202, 218, 232, 233, 235, 266, 281, 295, 300, 305, 306, 329, 338, 339, 341, 352, 368], "bound": [24, 28, 80, 86, 105, 153, 192, 218, 232, 256, 281, 286, 295, 338, 362], "currenta": [24, 80, 281], "dy": [24, 39, 80, 130, 156, 235, 281, 320, 341], "dx": [24, 80, 156, 175, 235, 249, 281, 341, 356], "orient": [24, 80, 105, 218, 281, 295], "resiz": [24, 80, 281], "baselin": [24, 80, 169, 281, 352], "amount": [11, 24, 27, 80, 85, 119, 140, 281, 285, 309, 329], "expand": [24, 27, 80, 85, 140, 281, 285, 329], "same": [8, 12, 24, 27, 28, 35, 80, 85, 86, 93, 105, 116, 120, 140, 156, 160, 167, 169, 177, 217, 218, 235, 237, 242, 251, 281, 285, 286, 293, 295, 306, 310, 329, 341, 345, 350, 352, 357, 377], "top": [24, 80, 105, 218, 281, 295], "intact": [24, 80, 281], "ax1": [24, 80, 281], "ax2": [24, 80, 281], "xspan1": [24, 80, 281], "xspan2": [24, 80, 281], "draw_left": [24, 80, 281], "draw_right": [24, 80, 281], "doshow": [24, 25, 80, 81, 281, 282], "dishow": [24, 80, 281], "edg": [24, 36, 80, 94, 140, 142, 147, 156, 158, 161, 164, 168, 235, 236, 240, 243, 281, 294, 329, 331, 334, 341, 343, 346, 348, 351], "stop": [24, 80, 140, 191, 255, 281, 329, 361], "shade": [24, 80, 281], "region": [24, 80, 105, 152, 218, 231, 281, 295, 337], "graph": [2, 9, 24, 27, 55, 62, 80, 85, 105, 110, 117, 158, 218, 236, 281, 285, 295, 300, 307, 343], "defin": [24, 27, 28, 32, 80, 85, 86, 90, 105, 140, 164, 189, 218, 240, 281, 285, 286, 290, 295, 329, 348, 360], "keyword": [24, 27, 80, 85, 105, 187, 218, 252, 281, 285, 295, 359], "forward": [24, 35, 80, 93, 105, 140, 156, 164, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 218, 235, 240, 252, 255, 281, 293, 295, 329, 341, 348, 358, 359, 361], "text": [24, 80, 105, 214, 218, 281, 295, 374], "arg": [3, 11, 12, 17, 24, 27, 32, 80, 85, 89, 90, 111, 119, 120, 125, 155, 214, 217, 234, 281, 285, 289, 290, 301, 309, 310, 315, 340, 374, 377], "fudg": [24, 80, 281], "base": [24, 27, 35, 36, 80, 85, 93, 94, 105, 108, 109, 140, 144, 147, 149, 153, 158, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 197, 201, 217, 218, 220, 232, 236, 243, 252, 255, 261, 265, 281, 285, 293, 294, 295, 298, 299, 329, 332, 334, 335, 338, 343, 351, 352, 358, 359, 361, 364, 367, 377], "pad": [24, 80, 140, 142, 163, 168, 174, 239, 243, 248, 281, 329, 331, 347, 351, 355], "rangefun": [24, 80, 281], "ff": [24, 80, 147, 156, 235, 281, 334, 341], "cwt": [24, 80, 281], "auto": [12, 24, 80, 120, 156, 235, 281, 310, 341], "vmin": [24, 80, 281], "vmax": [24, 80, 281], "afmhot": [24, 80, 281], "interpol": [24, 80, 140, 153, 163, 174, 232, 239, 248, 281, 329, 338, 347, 355], "nearest": [8, 24, 80, 116, 153, 156, 161, 167, 174, 232, 235, 242, 248, 281, 306, 338, 341, 346, 350, 355], "dodraw": [24, 80, 281], "numer": [0, 24, 80, 89, 105, 140, 144, 154, 156, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 211, 214, 218, 233, 235, 252, 255, 256, 281, 289, 295, 329, 332, 339, 341, 352, 358, 359, 361, 362, 371, 374], "frequenc": [24, 39, 80, 105, 108, 109, 130, 140, 141, 144, 146, 147, 149, 153, 154, 155, 156, 160, 173, 191, 192, 218, 232, 233, 234, 235, 237, 247, 255, 256, 281, 295, 298, 299, 320, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 345, 354, 361, 362], "wavelet": [24, 80, 141, 144, 281, 330, 332], "transform": [24, 35, 36, 80, 93, 94, 140, 142, 144, 153, 154, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 232, 233, 237, 281, 293, 294, 329, 331, 332, 338, 339, 345, 358], "what": [24, 27, 80, 85, 105, 147, 215, 218, 281, 285, 295, 334, 375], "ip": [24, 80, 281], "bone": [24, 80, 281], "class": [0, 24, 80, 105, 108, 109, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 198, 211, 217, 218, 220, 255, 262, 281, 295, 298, 299, 352, 358, 361, 365, 371, 377], "patch_func": [24, 80, 281], "handlerpatch": [24, 80, 281], "orig_handl": [24, 80, 281], "xdescent": [24, 80, 281], "ydescent": [24, 80, 281], "tran": [24, 80, 105, 218, 281, 295], "vm": [24, 80, 281], "bicub": [24, 80, 281], "extent": [24, 80, 156, 177, 235, 251, 281, 341, 357], "onlyphas": [24, 80, 281], "previou": [24, 80, 220, 230, 281], "polar": [24, 80, 169, 172, 246, 281, 352, 353], "modulu": [24, 80, 281], "ab": [24, 35, 80, 93, 105, 140, 153, 218, 232, 281, 293, 295, 329, 338], "imshow": [24, 80, 281], "avail": [24, 80, 105, 140, 173, 198, 218, 247, 262, 281, 295, 329, 354, 365], "output": [24, 80, 105, 177, 218, 251, 281, 295, 357], "skirt": [24, 80, 154, 233, 281, 339], "replot": [24, 80, 281], "nuisanc": [24, 80, 281], "updat": [24, 35, 38, 39, 80, 93, 129, 130, 178, 179, 180, 181, 182, 183, 184, 185, 186, 197, 261, 281, 293, 319, 320, 358, 364], "should": [0, 12, 24, 27, 30, 31, 35, 80, 85, 87, 88, 93, 105, 120, 140, 141, 153, 154, 156, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 198, 201, 211, 217, 218, 232, 233, 235, 255, 262, 265, 281, 285, 287, 288, 293, 295, 310, 329, 330, 338, 339, 341, 352, 358, 361, 365, 367, 371, 377], "faster": [24, 27, 80, 85, 177, 191, 197, 251, 255, 261, 281, 285, 357, 361, 364], "img": [24, 80, 281], "copi": [8, 12, 24, 27, 80, 85, 105, 116, 120, 140, 154, 173, 218, 233, 247, 281, 285, 295, 306, 310, 329, 339, 354], "reus": [24, 80, 281], "subsequ": [24, 80, 189, 281, 360], "speed": [24, 80, 105, 153, 218, 232, 281, 295, 338], "thing": [12, 24, 28, 30, 80, 86, 87, 120, 281, 286, 287, 310], "up": [8, 24, 31, 32, 80, 88, 90, 105, 116, 167, 218, 242, 281, 288, 290, 295, 306, 350], "anim": [24, 80, 105, 218, 281, 295], "video": [24, 80, 281], "except": [12, 24, 32, 80, 90, 105, 120, 197, 214, 218, 261, 281, 290, 295, 310, 364, 374], "an": [0, 8, 12, 13, 24, 27, 28, 30, 35, 36, 39, 80, 85, 86, 87, 89, 93, 94, 105, 116, 120, 121, 130, 140, 150, 153, 156, 160, 164, 167, 169, 174, 177, 187, 191, 201, 202, 211, 213, 214, 215, 217, 218, 220, 232, 235, 237, 240, 242, 248, 251, 252, 255, 265, 266, 281, 285, 286, 287, 289, 293, 294, 295, 306, 310, 311, 320, 329, 336, 338, 341, 345, 348, 350, 352, 355, 357, 359, 361, 367, 368, 371, 373, 374, 375, 377], "cmap": [2, 7, 8, 24, 80, 110, 115, 116, 156, 235, 281, 300, 305, 306, 341], "sidewai": [24, 80, 281], "border": [24, 80, 140, 281, 329], "15": [24, 35, 36, 80, 93, 94, 105, 141, 158, 187, 218, 220, 236, 252, 281, 293, 294, 295, 330, 343, 359], "labelpad": [24, 80, 281], "vscale": [24, 80, 281], "va": [24, 80, 281], "colorbar": [24, 80, 281], "pretti": [24, 80, 105, 218, 281, 295], "bad": [24, 31, 80, 88, 105, 156, 218, 235, 281, 288, 295, 341], "less": [11, 24, 35, 80, 93, 105, 119, 140, 160, 191, 201, 218, 237, 255, 265, 281, 293, 295, 309, 329, 345, 361, 367], "mathrm": [24, 80, 281], "mu": [0, 2, 7, 8, 24, 80, 105, 110, 115, 116, 175, 187, 211, 218, 249, 252, 281, 295, 300, 305, 306, 356, 359, 371], "mac": [24, 80, 281], "option": [12, 24, 27, 31, 80, 85, 88, 105, 120, 140, 160, 169, 172, 173, 177, 187, 189, 191, 197, 214, 218, 237, 246, 247, 251, 252, 255, 261, 281, 285, 288, 295, 310, 329, 345, 352, 353, 354, 357, 359, 360, 361, 364, 374], "add": [8, 24, 80, 105, 116, 140, 169, 209, 214, 217, 218, 281, 295, 306, 329, 352, 369, 374, 377], "bool": [24, 27, 28, 30, 31, 32, 35, 36, 80, 85, 86, 87, 88, 90, 93, 94, 105, 140, 153, 156, 169, 172, 191, 216, 218, 232, 235, 246, 255, 281, 285, 286, 287, 288, 290, 293, 294, 295, 329, 338, 341, 352, 353, 361, 376], "flip": [24, 80, 105, 140, 147, 218, 281, 295, 329, 334], "around": [24, 36, 80, 94, 140, 147, 153, 160, 232, 237, 281, 294, 329, 334, 338, 345], "font": [24, 80, 281], "12": [24, 36, 80, 94, 105, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 220, 236, 252, 281, 294, 295, 343, 358, 359], "parent": [24, 80, 105, 218, 281, 295], "vertic": [24, 80, 142, 281, 331], "align": [24, 80, 105, 218, 281, 295], "plane": [24, 80, 153, 160, 232, 237, 281, 338, 345], "latex": [24, 80, 281], "re": [24, 27, 32, 39, 80, 85, 90, 105, 130, 140, 173, 189, 197, 218, 247, 261, 281, 285, 290, 295, 320, 329, 354, 360, 364], "everyth": [24, 31, 80, 88, 281, 288], "39": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "bold": [24, 80, 281], "x1": [24, 35, 80, 93, 281, 293], "x2": [24, 35, 80, 93, 161, 281, 293, 346], "26666668": [24, 80, 281], "32156864": [24, 80, 281], "36078432": [24, 80, 281], "signific": [24, 80, 105, 214, 218, 281, 295, 374], "bar": [24, 80, 105, 218, 281, 295], "brace": [24, 80, 281], "y1": [24, 80, 281], "y2": [24, 80, 281], "horizont": [24, 80, 142, 214, 281, 331, 374], "name": [8, 24, 25, 27, 28, 80, 81, 85, 86, 105, 116, 140, 169, 197, 217, 218, 261, 281, 282, 285, 286, 295, 306, 329, 352, 364, 377], "stamp": [24, 80, 281], "save": [24, 27, 80, 85, 189, 281, 285, 360], "svg": [24, 80, 281], "pdf": [13, 24, 80, 105, 121, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 249, 281, 295, 311, 356, 358], "prepend": [24, 80, 281], "date": [24, 80, 216, 281, 376], "ti": [24, 80, 281], "me": [11, 24, 80, 119, 281, 309], "yyyymmdd_hhmmss": [24, 80, 281], "file": [18, 24, 27, 31, 80, 85, 88, 126, 158, 213, 217, 236, 281, 285, 288, 316, 343, 373, 377], "san": [24, 80, 281], "extens": [24, 27, 80, 85, 217, 281, 285, 377], "precis": [0, 24, 27, 35, 80, 85, 93, 105, 160, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 211, 214, 218, 237, 249, 260, 281, 285, 293, 295, 345, 356, 358, 363, 371, 374], "round": [8, 11, 24, 36, 80, 94, 105, 116, 119, 218, 281, 294, 295, 306, 309], "down": [11, 24, 36, 80, 94, 119, 153, 232, 281, 294, 309, 338], "digit": [24, 80, 175, 214, 249, 281, 356, 374], "yvalu": [24, 80, 281], "60": [24, 36, 39, 80, 94, 130, 140, 158, 187, 236, 252, 281, 294, 320, 329, 343, 359], "xy": [24, 80, 281], "ellips": [24, 80, 172, 246, 281, 353], "mean": [0, 2, 7, 8, 13, 24, 35, 80, 93, 105, 110, 115, 116, 121, 140, 141, 153, 160, 168, 169, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 198, 201, 211, 215, 217, 218, 232, 237, 243, 247, 248, 249, 252, 255, 260, 262, 265, 281, 293, 295, 300, 305, 306, 311, 329, 330, 338, 345, 351, 352, 354, 355, 356, 358, 359, 361, 363, 365, 367, 371, 375, 377], "drawn": [24, 80, 105, 218, 281, 295], "deviat": [0, 8, 13, 24, 36, 80, 94, 105, 116, 121, 140, 142, 150, 153, 158, 160, 169, 175, 211, 218, 232, 236, 237, 249, 281, 294, 295, 306, 311, 329, 331, 336, 338, 343, 345, 352, 356, 371], "coordin": [24, 80, 105, 140, 152, 161, 218, 231, 281, 295, 329, 337, 346], "2x2": [24, 35, 80, 93, 281, 293], "alpha": [24, 39, 80, 105, 130, 201, 218, 265, 281, 295, 320, 367], "stdwidth": [24, 80, 281], "96": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "\u03c3": [24, 80, 140, 160, 169, 237, 281, 329, 345, 352], "varianc": [8, 24, 80, 105, 116, 140, 141, 147, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 201, 218, 246, 247, 265, 281, 295, 306, 329, 330, 334, 352, 353, 354, 358, 367], "confid": [24, 80, 281], "blend": [24, 80, 281], "ycenter": [24, 80, 281], "yheight": [24, 80, 281], "side": [24, 80, 105, 169, 217, 218, 281, 295, 352, 377], "xcenter": [24, 80, 281], "xlength": [24, 80, 281], "wide": [24, 80, 105, 218, 281, 295], "where": [7, 24, 27, 32, 35, 39, 80, 85, 90, 93, 105, 115, 130, 140, 153, 160, 169, 187, 217, 218, 232, 237, 252, 281, 285, 290, 293, 295, 305, 320, 329, 338, 345, 352, 359, 377], "draw_ellips": [24, 80, 281], "draw_cross": [24, 80, 281], "p": [0, 14, 18, 24, 27, 32, 80, 85, 90, 105, 122, 126, 140, 147, 161, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 201, 211, 214, 217, 218, 252, 255, 256, 265, 281, 285, 290, 295, 312, 316, 329, 334, 346, 358, 359, 361, 362, 367, 371, 374, 377], "8": [24, 27, 36, 80, 85, 94, 105, 156, 158, 187, 191, 214, 218, 220, 235, 236, 252, 255, 281, 285, 294, 295, 341, 343, 359, 361, 374], "For": [8, 12, 13, 24, 27, 31, 80, 85, 88, 105, 116, 120, 121, 140, 141, 146, 149, 160, 169, 174, 191, 196, 201, 218, 237, 248, 255, 260, 265, 281, 285, 288, 295, 306, 310, 311, 329, 330, 333, 335, 345, 352, 355, 361, 363, 367], "90": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "605": [24, 80, 281], "991": [24, 80, 281], "97": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "378": [24, 80, 281], "99": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "210": [24, 80, 281], "597": [24, 80, 281], "fraction": [24, 80, 105, 169, 218, 281, 295, 352], "enclos": [24, 80, 281], "centx": [24, 80, 281], "centi": [24, 80, 281], "angle_": [24, 80, 281], "theta2_": [24, 80, 281], "arrows": [24, 80, 281], "cap_start": [24, 80, 281], "cap_end": [24, 80, 281], "connect": [24, 80, 161, 164, 240, 281, 346, 348], "pass": [8, 12, 24, 27, 28, 32, 80, 85, 86, 90, 105, 116, 120, 140, 144, 149, 154, 160, 164, 173, 189, 191, 197, 218, 220, 233, 237, 240, 247, 255, 261, 281, 285, 286, 290, 295, 306, 310, 329, 332, 335, 339, 345, 348, 354, 360, 361, 364], "headlength": [24, 80, 281], "headwidth": [24, 80, 281], "arrow": [24, 80, 281], "properti": [24, 35, 80, 93, 105, 141, 218, 281, 293, 295, 330], "inhibit": [24, 80, 281], "brake": [24, 80, 281], "ep": [0, 24, 35, 80, 93, 163, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 202, 211, 239, 248, 255, 256, 266, 281, 293, 347, 355, 358, 361, 362, 368, 371], "1e": [24, 35, 36, 80, 93, 94, 105, 140, 163, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 196, 197, 202, 218, 239, 255, 256, 260, 261, 266, 281, 293, 294, 295, 329, 347, 352, 358, 361, 362, 363, 364, 368], "05": [24, 36, 80, 94, 105, 197, 201, 218, 261, 265, 281, 294, 295, 364, 367], "step": [18, 24, 38, 39, 80, 126, 129, 130, 140, 141, 146, 150, 191, 255, 281, 316, 319, 320, 329, 330, 333, 336, 361], "adjac": [24, 36, 80, 94, 281, 294], "level": [24, 28, 80, 86, 105, 147, 201, 218, 265, 281, 286, 295, 334, 367], "abov": [24, 80, 105, 153, 218, 232, 281, 295, 338], "break": [24, 30, 80, 87, 140, 169, 281, 287, 329, 352], "conveni": [24, 80, 105, 174, 218, 248, 281, 295, 355], "bin": [17, 18, 24, 80, 105, 125, 126, 140, 163, 167, 187, 218, 239, 242, 252, 281, 295, 315, 316, 329, 347, 350, 359], "20": [24, 36, 80, 94, 105, 141, 158, 187, 201, 218, 220, 236, 252, 265, 281, 294, 295, 330, 343, 359, 367], "p50": [24, 80, 281], "markers": [24, 80, 281], "summar": [24, 80, 140, 281, 329], "histogram": [24, 80, 105, 163, 177, 199, 218, 239, 251, 263, 281, 295, 347, 357, 366], "\u03bc": [24, 80, 168, 169, 187, 243, 252, 281, 351, 352, 359], "d\u03bc": [24, 80, 281], "\u03b4e": [24, 80, 281], "92156863": [24, 80, 281], "47843137": [24, 80, 281], "34901962": [24, 80, 281], "shell": [24, 31, 80, 88, 217, 281, 288, 377], "averag": [8, 13, 24, 39, 80, 105, 116, 121, 130, 140, 141, 146, 153, 160, 164, 169, 173, 202, 218, 232, 237, 240, 247, 266, 281, 295, 306, 311, 320, 329, 330, 333, 338, 345, 348, 352, 354, 368], "A": [8, 12, 24, 27, 35, 80, 85, 93, 105, 116, 120, 140, 141, 153, 160, 169, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 201, 218, 220, 230, 232, 237, 246, 251, 255, 265, 281, 285, 293, 295, 306, 310, 329, 330, 338, 345, 352, 353, 357, 358, 360, 361, 367], "thr": [24, 39, 80, 130, 140, 168, 243, 281, 320, 329, 351], "09": [24, 35, 80, 93, 105, 163, 192, 218, 239, 256, 281, 293, 295, 347, 362], "split": [24, 80, 140, 169, 281, 329, 352], "1d": [24, 36, 80, 94, 140, 142, 147, 158, 160, 161, 167, 168, 169, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 202, 236, 237, 242, 243, 248, 251, 252, 255, 256, 266, 281, 294, 329, 331, 334, 343, 345, 346, 350, 351, 352, 355, 357, 358, 359, 361, 362, 368], "real": [24, 27, 35, 80, 85, 93, 105, 140, 147, 153, 154, 156, 164, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 220, 232, 233, 235, 240, 281, 285, 293, 295, 329, 334, 338, 339, 341, 348, 358], "imaginari": [24, 27, 80, 85, 153, 156, 164, 232, 235, 240, 281, 285, 338, 341, 348], "part": [24, 80, 153, 164, 232, 240, 281, 338, 348], "either": [24, 28, 36, 80, 86, 94, 105, 154, 169, 201, 218, 220, 233, 265, 281, 286, 294, 295, 339, 352, 367], "nan": [0, 24, 35, 80, 93, 105, 140, 161, 191, 211, 218, 255, 281, 293, 295, 329, 346, 361, 371], "u": [24, 38, 80, 105, 129, 140, 218, 281, 295, 319, 329], "separ": [24, 80, 105, 160, 187, 213, 214, 218, 237, 252, 281, 295, 345, 359, 373, 374], "without": [13, 24, 27, 80, 85, 105, 121, 142, 147, 154, 214, 218, 233, 281, 285, 295, 311, 331, 334, 339, 374], "overlap": [24, 36, 80, 94, 158, 187, 236, 252, 281, 294, 343, 359], "dash": [24, 80, 281], "stash": [24, 80, 281], "x0": [24, 80, 150, 191, 255, 281, 336, 361], "y0": [24, 80, 281], "__save_limits_private_storage__": [24, 80, 281], "These": [15, 24, 28, 31, 80, 86, 88, 105, 123, 140, 218, 281, 286, 288, 295, 313, 329], "restor": [24, 80, 140, 281, 329], "later": [24, 28, 80, 86, 105, 217, 218, 281, 286, 295, 377], "store": [24, 27, 32, 80, 85, 90, 156, 235, 281, 285, 290, 341], "40": [24, 36, 80, 94, 105, 140, 158, 187, 218, 236, 252, 281, 294, 295, 329, 343, 359], "marker": [24, 80, 281], "some": [15, 24, 27, 28, 31, 32, 80, 85, 86, 88, 90, 105, 123, 140, 154, 175, 192, 197, 201, 202, 218, 233, 249, 256, 261, 265, 266, 281, 285, 286, 288, 290, 295, 313, 329, 339, 356, 362, 364, 367, 368], "popul": [8, 24, 80, 105, 116, 146, 160, 201, 214, 218, 237, 265, 281, 295, 306, 333, 345, 367, 374], "creat": [8, 12, 13, 24, 27, 28, 31, 32, 35, 80, 85, 86, 88, 89, 90, 93, 105, 116, 120, 121, 140, 154, 217, 218, 233, 281, 285, 286, 288, 289, 290, 293, 295, 306, 310, 311, 329, 339, 377], "ofl": [24, 80, 281], "xtick": [24, 80, 281], "major": [8, 12, 24, 80, 116, 120, 153, 172, 232, 246, 281, 306, 310, 338, 353], "minor": [24, 80, 172, 246, 281, 353], "appli": [24, 32, 35, 36, 38, 80, 89, 90, 93, 94, 105, 129, 140, 141, 144, 147, 153, 158, 160, 172, 173, 217, 218, 232, 236, 237, 246, 247, 281, 289, 290, 293, 294, 295, 319, 329, 330, 332, 334, 338, 343, 345, 353, 354, 377], "ytick": [24, 80, 281], "make": [8, 24, 27, 28, 80, 85, 86, 105, 116, 147, 173, 201, 217, 218, 247, 265, 281, 285, 286, 295, 306, 334, 354, 367, 377], "inward": [24, 80, 281], "discard": [24, 80, 153, 154, 232, 233, 281, 338, 339], "fade": [24, 80, 281], "altern": [24, 27, 32, 80, 85, 90, 105, 215, 218, 281, 285, 290, 295, 375], "band": [24, 80, 140, 141, 144, 220, 281, 329, 330, 332], "within": [11, 24, 31, 32, 80, 88, 90, 105, 119, 140, 152, 160, 161, 167, 213, 218, 231, 237, 242, 281, 288, 290, 295, 309, 329, 337, 345, 346, 350, 373], "mix": [24, 80, 281], "startat": [24, 80, 281], "delimit": [18, 24, 80, 126, 281, 316], "consecut": [24, 80, 281], "wrapper": [12, 13, 15, 24, 32, 80, 90, 105, 120, 121, 123, 169, 174, 187, 218, 248, 252, 281, 290, 295, 310, 311, 313, 352, 355, 359], "accept": [8, 12, 24, 80, 105, 116, 120, 140, 147, 153, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 199, 201, 218, 220, 232, 240, 242, 252, 255, 263, 265, 281, 295, 306, 310, 329, 334, 338, 348, 350, 358, 359, 361, 366, 367], "rather": [24, 80, 105, 140, 146, 147, 191, 218, 255, 281, 295, 329, 333, 334, 361], "than": [0, 11, 24, 27, 30, 35, 36, 80, 85, 87, 93, 94, 105, 119, 140, 141, 146, 147, 152, 156, 169, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 199, 201, 211, 218, 231, 235, 246, 247, 249, 251, 255, 263, 265, 281, 285, 287, 293, 294, 295, 309, 329, 330, 333, 334, 337, 341, 352, 353, 354, 356, 357, 358, 361, 366, 367, 371], "a1": [24, 80, 281], "positionsa": [24, 80, 281], "b1": [24, 80, 281], "positionsb": [24, 80, 281], "fdr": [24, 80, 201, 265, 281, 367], "label_pvalu": [24, 80, 281], "significance_mark": [24, 80, 281], "wilcoxon": [24, 80, 281], "pair": [8, 24, 80, 116, 140, 141, 161, 173, 247, 281, 306, 329, 330, 346, 354], "bracket": [24, 80, 281], "correct": [24, 80, 140, 141, 147, 172, 174, 201, 246, 248, 265, 281, 329, 330, 334, 353, 355, 367], "comparison": [24, 80, 105, 201, 218, 265, 281, 295, 367], "benjamini": [24, 80, 201, 265, 281, 367], "hochberg": [24, 80, 201, 265, 281, 367], "procedur": [24, 27, 80, 85, 140, 141, 168, 191, 201, 243, 255, 265, 281, 285, 329, 330, 351, 361, 367], "whichev": [24, 80, 140, 201, 265, 281, 329, 367], "conserv": [24, 80, 153, 201, 232, 265, 281, 338, 367], "desir": [24, 80, 105, 140, 142, 149, 218, 281, 295, 329, 331, 335], "discoveri": [24, 80, 201, 265, 281, 367], "rate": [24, 39, 80, 105, 130, 140, 144, 146, 147, 149, 153, 154, 160, 169, 173, 174, 175, 191, 201, 218, 232, 233, 237, 247, 248, 249, 255, 265, 281, 295, 320, 329, 332, 333, 334, 335, 338, 339, 345, 352, 354, 355, 356, 361, 367], "annot": [24, 80, 281], "postiiv": [24, 80, 281], "shown": [24, 80, 156, 235, 281, 341], "note": [13, 24, 27, 39, 80, 85, 105, 121, 130, 158, 191, 215, 218, 236, 255, 281, 285, 295, 311, 320, 343, 361, 375], "is_signific": [24, 80, 281], "indic": [24, 35, 80, 93, 105, 156, 160, 164, 169, 218, 235, 237, 240, 281, 293, 295, 341, 345, 348, 352], "wa": [24, 31, 32, 80, 88, 90, 105, 140, 160, 168, 218, 237, 243, 281, 288, 290, 295, 329, 345, 351], "signfiic": [24, 80, 281], "falst": [24, 80, 281], "after": [11, 24, 32, 39, 80, 90, 105, 119, 130, 218, 281, 290, 295, 309, 320], "timeseri": [24, 80, 140, 149, 281, 329, 335], "veric": [24, 80, 281], "drop": [24, 80, 281], "locat": [12, 24, 27, 31, 80, 85, 88, 105, 120, 140, 152, 153, 156, 163, 164, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 199, 217, 218, 231, 232, 235, 239, 240, 248, 251, 263, 281, 285, 288, 295, 310, 329, 337, 338, 341, 347, 348, 355, 357, 358, 366, 377], "send": [25, 32, 81, 90, 220, 282, 290], "window": [25, 27, 30, 81, 85, 87, 140, 141, 146, 147, 160, 237, 282, 285, 287, 329, 330, 333, 334, 345], "unusu": [25, 81, 282], "reorder": [25, 81, 282], "disk": [27, 30, 31, 85, 87, 88, 285, 287, 288], "forc": [27, 31, 85, 88, 140, 154, 197, 233, 261, 285, 288, 329, 339, 364], "subroutin": [27, 28, 31, 35, 85, 86, 88, 93, 285, 286, 288, 293], "hash": [27, 28, 85, 86, 285, 286], "sensit": [27, 85, 105, 153, 155, 201, 217, 218, 232, 234, 265, 285, 295, 338, 340, 367, 377], "docstr": [8, 27, 85, 116, 285, 306], "recurs": [27, 85, 89, 213, 217, 285, 289, 373, 377], "fair": [27, 85, 285], "overhead": [27, 85, 285], "allow": [12, 27, 31, 35, 85, 88, 93, 105, 120, 144, 153, 161, 197, 217, 218, 232, 261, 285, 288, 293, 295, 310, 332, 338, 346, 364, 377], "possibl": [0, 27, 31, 35, 85, 88, 93, 105, 158, 161, 211, 218, 220, 230, 236, 285, 288, 293, 295, 343, 346, 371], "mutual": [27, 35, 85, 93, 285, 293], "exclud": [27, 85, 105, 140, 153, 199, 218, 232, 263, 285, 295, 329, 338, 366], "alreadi": [27, 85, 173, 187, 247, 252, 285, 354, 359], "visit": [27, 85, 285], "compat": [27, 30, 85, 87, 105, 140, 153, 196, 218, 232, 260, 285, 287, 295, 329, 338, 363], "grace": [27, 85, 285], "potenti": [27, 39, 85, 130, 156, 235, 285, 320, 341], "recurr": [27, 85, 285], "tricki": [27, 28, 85, 86, 285, 286], "present": [15, 27, 32, 85, 90, 123, 140, 147, 215, 285, 290, 313, 329, 334, 375], "therefor": [27, 85, 105, 140, 218, 285, 295, 329], "mani": [27, 30, 32, 85, 87, 90, 105, 140, 218, 285, 287, 290, 295, 329], "intermedi": [27, 31, 85, 88, 285, 288], "far": [27, 31, 85, 88, 105, 197, 218, 261, 285, 288, 295, 364], "encount": [27, 85, 285], "we": [27, 28, 31, 32, 35, 39, 85, 86, 88, 90, 93, 105, 130, 140, 141, 147, 153, 191, 197, 198, 218, 232, 255, 261, 262, 285, 286, 288, 290, 293, 295, 320, 329, 330, 334, 338, 361, 364, 365], "cannot": [27, 28, 32, 85, 86, 89, 90, 140, 285, 286, 289, 290, 329], "worth": [27, 85, 285], "topologi": [27, 85, 285], "least": [27, 35, 85, 93, 105, 153, 169, 173, 218, 232, 247, 285, 293, 295, 338, 352, 354], "suffic": [27, 85, 285], "librari": [7, 13, 27, 31, 32, 35, 85, 88, 90, 93, 105, 115, 121, 218, 285, 288, 290, 293, 295, 305, 311], "grab": [27, 85, 105, 218, 285, 295], "combin": [13, 27, 85, 121, 153, 232, 285, 311, 338], "datastructur": [12, 27, 85, 120, 285, 310], "repres": [8, 12, 27, 30, 85, 87, 105, 116, 120, 149, 164, 178, 179, 180, 181, 182, 183, 184, 185, 186, 214, 217, 218, 240, 285, 287, 295, 306, 310, 335, 348, 358, 374, 377], "profil": [27, 85, 285], "obtain": [27, 85, 105, 213, 218, 285, 295, 373], "assum": [27, 85, 105, 140, 153, 160, 191, 201, 218, 232, 237, 255, 265, 285, 295, 329, 338, 345, 361, 367], "decor": [26, 27, 28, 85, 86, 89, 285, 286, 289], "wrap": [12, 13, 27, 35, 36, 85, 93, 94, 105, 120, 121, 140, 153, 169, 214, 218, 232, 285, 293, 294, 295, 310, 311, 329, 338, 352, 374], "modifi": [27, 31, 85, 88, 89, 105, 155, 201, 218, 234, 265, 285, 288, 289, 295, 340, 367], "safe": [0, 27, 28, 30, 32, 35, 85, 86, 87, 89, 90, 93, 153, 178, 179, 180, 181, 182, 183, 184, 185, 186, 211, 220, 232, 285, 286, 287, 289, 290, 293, 338, 358, 371], "strip": [27, 85, 89, 140, 285, 289, 329], "assumpt": [27, 85, 105, 201, 218, 265, 285, 295, 367], "detect": [27, 28, 35, 85, 86, 93, 140, 285, 286, 293, 329], "effect": [27, 85, 105, 140, 217, 218, 220, 285, 295, 329, 377], "behavior": [27, 28, 85, 86, 105, 140, 168, 218, 243, 285, 286, 295, 329, 351], "variabl": [12, 27, 32, 35, 38, 85, 90, 93, 105, 120, 129, 169, 202, 217, 218, 266, 285, 290, 293, 295, 310, 319, 352, 368, 377], "mutabl": [27, 28, 32, 85, 86, 90, 105, 218, 285, 286, 290, 295], "scope": [27, 32, 85, 90, 285, 290], "close": [27, 28, 32, 35, 36, 85, 86, 90, 93, 94, 105, 140, 147, 218, 285, 286, 290, 293, 294, 295, 329, 334], "muse": [27, 85, 285], "fail": [27, 31, 32, 85, 88, 90, 105, 191, 197, 218, 255, 261, 285, 288, 290, 295, 361, 364], "extract": [27, 35, 85, 93, 140, 147, 153, 160, 213, 232, 237, 285, 293, 329, 334, 338, 345, 373], "contain": [8, 13, 15, 27, 28, 30, 31, 35, 85, 86, 87, 88, 89, 93, 105, 116, 121, 123, 140, 153, 154, 158, 168, 169, 191, 214, 218, 232, 233, 236, 243, 255, 285, 286, 287, 288, 289, 293, 295, 306, 311, 313, 329, 338, 339, 343, 351, 352, 361, 374], "undecor": [27, 85, 285], "construct": [12, 27, 36, 85, 94, 120, 173, 247, 285, 294, 310, 354], "obj": [27, 85, 187, 217, 252, 285, 359, 377], "identifi": [27, 85, 140, 156, 235, 285, 329, 341], "correspond": [27, 85, 178, 179, 180, 181, 182, 183, 184, 185, 186, 285, 358], "particular": [27, 85, 285], "want": [8, 27, 85, 105, 116, 140, 147, 187, 191, 218, 252, 255, 285, 295, 306, 329, 334, 359, 361], "abl": [27, 85, 285], "dist": [27, 85, 285], "underli": [8, 27, 85, 105, 116, 140, 153, 160, 218, 232, 237, 285, 295, 306, 329, 338, 345], "pickl": [27, 32, 85, 90, 285, 290], "check": [27, 28, 30, 35, 39, 85, 86, 87, 93, 105, 130, 140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 214, 217, 218, 260, 285, 286, 287, 293, 295, 320, 329, 358, 363, 374, 377], "meaning": [27, 85, 285], "almost": [27, 85, 285], "imposs": [27, 85, 285], "becom": [27, 85, 105, 218, 285, 295], "invalid": [27, 85, 285], "quit": [15, 27, 28, 85, 86, 123, 140, 154, 233, 285, 286, 313, 329, 339], "ll": [27, 85, 105, 218, 285, 295], "argspec": [27, 85, 89, 285, 289], "valid": [27, 30, 85, 87, 140, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 220, 252, 285, 287, 329, 352, 358, 359], "significantli": [27, 85, 201, 265, 285, 367], "sig": [27, 30, 85, 87, 89, 285, 287, 289], "repr": [27, 85, 285], "compress": [27, 85, 285], "base64encod": [27, 85, 285], "truncat": [27, 36, 85, 94, 105, 140, 217, 218, 285, 294, 295, 329, 377], "signatur": [27, 28, 30, 85, 86, 87, 89, 169, 285, 286, 287, 289, 352], "human": [27, 85, 285], "readabl": [27, 85, 285], "simpli": [12, 27, 35, 85, 93, 120, 201, 265, 285, 293, 310, 367], "most": [8, 13, 27, 30, 85, 87, 105, 116, 121, 140, 173, 191, 198, 218, 247, 255, 262, 285, 287, 295, 306, 311, 329, 354, 361, 365], "d": [13, 14, 15, 18, 27, 35, 38, 85, 93, 105, 121, 122, 123, 126, 129, 173, 187, 189, 191, 213, 217, 218, 247, 252, 255, 285, 293, 295, 311, 312, 313, 316, 319, 354, 359, 360, 361, 373, 377], "still": [27, 28, 31, 85, 86, 88, 285, 286, 288], "need": [11, 15, 27, 31, 35, 85, 88, 93, 105, 119, 123, 140, 147, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 247, 285, 288, 293, 295, 309, 313, 329, 334, 354, 358], "verif": [27, 85, 285], "No": [27, 30, 85, 87, 105, 140, 160, 201, 218, 237, 265, 285, 287, 295, 329, 345, 367], "4096": [27, 85, 285], "charact": [27, 30, 85, 87, 214, 285, 287, 374], "path": [27, 31, 85, 88, 213, 217, 285, 288, 373, 377], "255": [27, 30, 85, 87, 285, 287], "260": [27, 85, 285], "total": [27, 85, 105, 214, 218, 285, 295, 374], "pathlen": [27, 85, 285], "ascii": [27, 30, 85, 87, 285, 287], "31": [27, 36, 85, 94, 105, 158, 187, 218, 220, 236, 252, 285, 294, 295, 343, 359], "easiest": [27, 85, 285], "wai": [27, 28, 32, 85, 86, 89, 90, 105, 154, 191, 217, 218, 233, 255, 285, 286, 289, 290, 295, 339, 361, 377], "problemat": [27, 85, 285], "input": [27, 35, 39, 85, 93, 105, 130, 140, 147, 153, 156, 169, 177, 215, 218, 232, 235, 251, 285, 293, 295, 320, 329, 334, 338, 341, 352, 357, 375], "64": [27, 36, 85, 94, 158, 187, 220, 236, 252, 285, 294, 343, 359], "follow": [27, 31, 35, 85, 88, 93, 105, 140, 174, 201, 218, 248, 265, 285, 288, 293, 295, 329, 355, 367], "support": [12, 13, 27, 85, 105, 120, 121, 140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 285, 295, 310, 311, 329, 358], "ast": [27, 85, 175, 249, 285, 356], "literal_ev": [27, 85, 285], "node_or_str": [27, 85, 285], "serial": [27, 85, 285], "permit": [27, 30, 85, 87, 178, 179, 180, 181, 182, 183, 184, 185, 186, 285, 287, 358], "paramtet": [27, 85, 285], "json": [27, 85, 285], "uniqu": [27, 85, 89, 105, 164, 217, 218, 240, 285, 289, 295, 348, 377], "recov": [27, 85, 154, 233, 285, 339], "becaus": [27, 85, 105, 140, 147, 218, 285, 295, 329, 334], "represent": [27, 36, 85, 94, 105, 154, 218, 233, 285, 294, 295, 339], "circumv": [27, 85, 285], "take": [0, 27, 32, 35, 85, 90, 93, 105, 140, 141, 147, 169, 201, 211, 218, 265, 285, 290, 293, 295, 329, 330, 334, 352, 367, 371], "longer": [27, 85, 285], "work": [15, 27, 31, 32, 35, 85, 88, 90, 93, 105, 123, 140, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 197, 201, 215, 218, 247, 248, 255, 261, 265, 285, 288, 290, 293, 295, 313, 329, 354, 355, 358, 361, 364, 367, 375], "attempt": [27, 32, 35, 85, 90, 93, 105, 154, 217, 218, 233, 285, 290, 293, 295, 339, 377], "experiment": [27, 31, 85, 88, 147, 285, 288, 334], "defaut": [27, 85, 285], "base64": [27, 85, 285], "kei": [27, 85, 105, 217, 218, 285, 295, 377], "entri": [27, 31, 35, 36, 85, 88, 93, 94, 105, 140, 169, 201, 218, 265, 285, 288, 293, 294, 295, 329, 352, 367], "invers": [0, 27, 35, 85, 93, 105, 140, 154, 158, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 211, 218, 233, 236, 237, 285, 293, 295, 329, 339, 343, 345, 358, 371], "eperiment": [27, 85, 285], "cache_root": [27, 85, 285], "directori": [27, 85, 217, 285, 377], "e": [8, 13, 27, 31, 35, 38, 85, 88, 93, 105, 116, 121, 129, 140, 154, 169, 218, 233, 285, 288, 293, 295, 306, 311, 319, 329, 339, 352], "npy": [27, 85, 285], "mat": [8, 27, 85, 116, 213, 217, 285, 306, 373, 377], "etc": [27, 85, 105, 140, 169, 202, 218, 266, 285, 295, 329, 352, 368], "fn": [27, 85, 285], "info": [27, 85, 140, 141, 189, 285, 329, 330, 360], "absolut": [27, 35, 85, 93, 105, 144, 153, 160, 169, 196, 217, 218, 232, 237, 260, 285, 293, 295, 332, 338, 345, 352, 363, 377], "int8": [27, 85, 285], "128": [27, 85, 285], "127": [27, 85, 285], "int16": [27, 85, 285], "32768": [27, 85, 285], "32767": [27, 85, 285], "int32": [12, 27, 85, 120, 152, 161, 175, 231, 249, 285, 310, 337, 346, 356], "2147483648": [27, 85, 285], "2147483647": [27, 85, 285], "int64": [27, 85, 105, 218, 285, 295], "9223372036854775808": [27, 85, 285], "9223372036854775807": [27, 85, 285], "uint8": [27, 85, 105, 218, 285, 295], "unsign": [27, 85, 105, 218, 285, 295], "uint16": [27, 85, 285], "65535": [27, 85, 285], "uint32": [27, 85, 285], "4294967295": [27, 85, 285], "uint64": [27, 85, 285], "18446744073709551615": [27, 85, 285], "float16": [27, 85, 285], "half": [27, 85, 105, 140, 146, 168, 218, 243, 285, 295, 329, 333, 351], "sign": [12, 27, 85, 105, 120, 140, 147, 169, 218, 285, 295, 310, 329, 334, 352], "expon": [27, 36, 85, 94, 105, 158, 187, 214, 218, 236, 252, 285, 294, 295, 343, 359, 374], "mantissa": [27, 85, 285], "23": [0, 27, 36, 85, 94, 105, 141, 158, 187, 211, 218, 220, 236, 252, 285, 294, 295, 330, 343, 359, 371], "float64": [0, 27, 35, 85, 93, 140, 169, 196, 211, 260, 285, 293, 329, 352, 363, 371], "doubl": [8, 27, 85, 105, 116, 142, 218, 285, 295, 306, 331], "52": [27, 36, 85, 94, 158, 168, 187, 236, 243, 252, 285, 294, 343, 351, 359], "complex64": [27, 85, 140, 161, 285, 329, 346], "32": [27, 36, 85, 94, 105, 158, 187, 218, 236, 252, 285, 294, 295, 343, 359], "complex128": [27, 85, 156, 235, 285, 341], "archiv": [27, 85, 105, 140, 218, 285, 295, 329], "cache_loc": [27, 85, 285], "write_back": [27, 85, 285], "skip_fast": [27, 85, 285], "verbos": [27, 31, 32, 35, 85, 88, 89, 90, 93, 140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 197, 201, 252, 260, 261, 265, 285, 288, 289, 290, 293, 329, 358, 359, 363, 364, 367], "allow_mutable_bind": [27, 85, 285], "cache_identifi": [27, 31, 85, 88, 285, 288], "__neurotools_cache__": [27, 31, 85, 88, 285, 288], "curri": [8, 13, 27, 85, 116, 121, 285, 306, 311], "pattern": [27, 85, 105, 218, 285, 295], "here": [7, 13, 27, 32, 85, 90, 105, 115, 121, 147, 168, 177, 218, 243, 251, 285, 290, 295, 305, 311, 334, 351, 357], "decotr": [27, 85, 285], "In": [27, 28, 31, 32, 35, 85, 86, 88, 90, 93, 105, 140, 141, 158, 218, 236, 285, 286, 288, 290, 293, 295, 329, 330, 343], "hierarch": [27, 85, 285], "filesystem": [27, 30, 31, 85, 87, 88, 217, 285, 287, 288, 377], "rsync": [27, 31, 85, 88, 285, 288], "asynchron": [27, 85, 285], "serious": [27, 85, 285], "slow": [0, 27, 31, 85, 88, 211, 285, 288, 371], "speedup": [27, 85, 285], "due": [27, 85, 105, 140, 218, 285, 295, 329], "io": [27, 85, 285], "savemat": [27, 85, 285], "loadmat": [27, 85, 285], "unfortun": [27, 85, 285], "alter": [27, 85, 105, 218, 285, 295], "retriev": [27, 85, 213, 285, 373], "Will": [27, 85, 285], "hdf5": [27, 85, 213, 217, 285, 373, 377], "Not": [27, 30, 31, 85, 87, 88, 154, 178, 179, 180, 181, 182, 183, 184, 185, 186, 233, 285, 287, 288, 339, 358], "implement": [12, 27, 30, 31, 39, 85, 87, 88, 105, 120, 130, 140, 141, 142, 146, 178, 179, 180, 181, 182, 183, 184, 185, 186, 214, 218, 285, 287, 288, 295, 310, 320, 329, 330, 331, 333, 358, 374], "futur": [27, 85, 285], "storang": [27, 85, 285], "new": [8, 12, 13, 27, 31, 35, 85, 88, 93, 105, 116, 120, 121, 140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 213, 218, 255, 285, 288, 293, 295, 306, 310, 311, 329, 358, 361, 373], "previous": [27, 85, 285], "read": [27, 85, 217, 285, 377], "too": [27, 85, 105, 147, 196, 218, 260, 285, 295, 334, 363], "long": [27, 28, 30, 85, 86, 87, 105, 140, 191, 218, 255, 285, 286, 287, 295, 329, 361], "print": [12, 27, 31, 32, 35, 85, 88, 89, 90, 93, 105, 120, 169, 191, 196, 197, 213, 216, 217, 218, 255, 260, 261, 285, 288, 289, 290, 293, 295, 310, 352, 361, 363, 364, 373, 376, 377], "detaild": [27, 85, 285], "log": [0, 13, 27, 32, 36, 85, 90, 94, 105, 121, 154, 158, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 199, 202, 211, 218, 233, 236, 246, 249, 252, 255, 263, 266, 285, 290, 294, 295, 311, 339, 343, 353, 356, 358, 359, 361, 366, 368, 371], "Such": [27, 85, 105, 218, 285, 295], "lead": [27, 31, 35, 85, 88, 93, 105, 140, 218, 285, 288, 293, 295, 329], "subdirectori": [27, 85, 213, 285, 373], "todo": [18, 27, 85, 89, 126, 140, 154, 155, 168, 173, 202, 214, 217, 233, 234, 243, 247, 266, 285, 289, 316, 329, 339, 340, 351, 354, 368, 374, 377], "cacher": [27, 31, 85, 88, 285, 288], "fast_to_slow": [27, 85, 285], "term": [27, 36, 85, 94, 105, 161, 167, 187, 202, 217, 218, 242, 252, 266, 285, 294, 295, 346, 350, 359, 368, 377], "hierarchi": [27, 31, 85, 88, 285, 288], "slower": [27, 31, 35, 85, 88, 93, 197, 261, 285, 288, 293, 364], "fallback": [27, 85, 285], "main": [27, 31, 85, 88, 285, 288], "automat": [12, 27, 28, 31, 35, 85, 86, 88, 93, 120, 140, 169, 285, 286, 288, 293, 310, 329, 352], "newli": [27, 32, 85, 90, 285, 290], "detail": [27, 32, 85, 90, 105, 140, 169, 202, 218, 266, 285, 290, 295, 329, 352, 368], "iform": [27, 85, 285], "out": [12, 27, 32, 35, 39, 85, 90, 93, 105, 120, 130, 140, 147, 169, 214, 218, 285, 290, 293, 295, 310, 320, 329, 334, 352, 374], "manipul": [27, 85, 285], "unsaf": [27, 28, 85, 86, 285, 286], "namespac": [27, 28, 85, 86, 285, 286], "bind": [13, 27, 28, 85, 86, 121, 285, 286, 311], "exampl": [8, 12, 13, 27, 31, 85, 88, 105, 116, 120, 121, 140, 158, 160, 169, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 196, 198, 202, 217, 218, 236, 237, 248, 255, 256, 260, 262, 266, 285, 288, 295, 306, 310, 311, 329, 343, 345, 352, 355, 358, 361, 362, 363, 365, 368, 377], "user": [27, 31, 32, 35, 85, 88, 90, 93, 105, 169, 189, 215, 218, 220, 285, 288, 290, 293, 295, 352, 360, 375], "those": [27, 28, 85, 86, 105, 140, 153, 218, 232, 285, 286, 295, 329, 338], "consequenti": [27, 85, 285], "tell": [27, 85, 285], "old": [27, 85, 285], "sub": [27, 85, 105, 140, 218, 285, 295, 329], "folder": [27, 85, 285], "deal": [28, 86, 286], "problem": [28, 32, 35, 86, 90, 93, 105, 218, 286, 290, 293, 295], "late": [28, 86, 286], "supris": [28, 86, 286], "state": [28, 32, 38, 86, 90, 105, 129, 140, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 218, 249, 255, 286, 290, 295, 319, 329, 356, 358, 360, 361], "surpris": [28, 86, 286], "extern": [28, 86, 286], "run": [11, 28, 31, 32, 86, 88, 90, 105, 119, 169, 217, 218, 286, 288, 290, 295, 309, 352, 377], "extren": [28, 86, 286], "guarante": [28, 86, 105, 218, 286, 295], "befor": [28, 31, 86, 88, 105, 140, 147, 154, 169, 217, 218, 233, 286, 288, 295, 329, 334, 339, 352, 377], "trust": [28, 86, 286], "safeti": [28, 86, 286], "hopefulli": [28, 31, 86, 88, 286, 288], "likel": [28, 86, 286], "troubl": [28, 86, 286], "immut": [28, 86, 286], "must": [28, 30, 31, 86, 87, 88, 105, 140, 152, 153, 163, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 215, 218, 231, 232, 239, 249, 255, 256, 286, 287, 288, 295, 329, 337, 338, 347, 356, 358, 361, 362, 375], "compos": [2, 7, 8, 28, 86, 110, 115, 116, 286, 300, 305, 306], "its": [8, 28, 31, 32, 35, 86, 88, 90, 93, 105, 116, 140, 149, 154, 160, 168, 218, 233, 237, 243, 286, 288, 290, 293, 295, 306, 329, 335, 339, 345, 351], "element": [8, 13, 28, 35, 36, 86, 93, 94, 105, 116, 121, 158, 169, 187, 189, 218, 236, 252, 286, 293, 294, 295, 306, 311, 343, 352, 359, 360], "probabl": [0, 12, 13, 28, 35, 38, 86, 93, 105, 108, 109, 120, 121, 129, 154, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 198, 201, 211, 217, 218, 233, 248, 249, 251, 255, 256, 262, 265, 286, 293, 295, 298, 299, 310, 311, 319, 339, 355, 356, 357, 358, 361, 362, 365, 367, 371, 377], "unlikli": [28, 86, 286], "thei": [15, 28, 31, 32, 39, 86, 88, 90, 105, 123, 130, 173, 217, 218, 247, 286, 288, 290, 295, 313, 320, 354, 377], "obvious": [28, 86, 286], "latter": [28, 86, 286], "practic": [28, 86, 105, 140, 218, 286, 295, 329], "ok": [28, 30, 31, 86, 87, 88, 201, 265, 286, 287, 288, 367], "riski": [28, 31, 32, 86, 88, 90, 286, 288, 290], "formal": [28, 86, 286], "sens": [28, 86, 173, 247, 286, 354], "design": [28, 86, 105, 140, 187, 218, 252, 286, 295, 329, 359], "other": [12, 13, 28, 31, 32, 86, 88, 90, 105, 120, 121, 140, 158, 161, 168, 189, 218, 236, 243, 286, 288, 290, 295, 310, 311, 329, 343, 346, 351, 360], "incorpor": [28, 86, 286], "themselv": [28, 86, 286], "invok": [28, 86, 286], "theori": [28, 35, 86, 93, 105, 192, 218, 256, 286, 293, 295, 362], "could": [12, 28, 31, 86, 88, 105, 120, 154, 218, 233, 286, 288, 295, 310, 339], "snapshot": [28, 86, 286], "valueerror": [28, 35, 86, 89, 93, 105, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 286, 289, 293, 295, 352, 358], "resembl": [28, 86, 105, 218, 286, 295], "callabl": [28, 86, 217, 220, 230, 286, 377], "objet": [28, 86, 286], "determin": [30, 35, 87, 93, 105, 160, 168, 189, 217, 218, 237, 243, 287, 293, 295, 345, 351, 360, 377], "hashabl": [30, 87, 89, 192, 256, 287, 289, 362], "consist": [30, 87, 105, 147, 218, 287, 295, 334], "translat": [30, 87, 105, 218, 287, 295], "convenct": [30, 87, 287], "modern": [30, 87, 287], "filnam": [30, 87, 287], "shorter": [30, 87, 140, 199, 263, 287, 329, 366], "special": [30, 87, 105, 218, 287, 295], "escap": [30, 87, 287], "sequenc": [2, 9, 30, 55, 62, 87, 105, 108, 109, 110, 117, 140, 173, 174, 191, 218, 247, 248, 255, 287, 295, 298, 299, 300, 307, 329, 354, 355, 361], "unicod": [30, 87, 287], "broadli": [30, 87, 287], "lenient": [30, 87, 287], "pythoon": [30, 87, 287], "char": [30, 87, 287], "trigger": [30, 87, 140, 147, 173, 247, 287, 329, 334, 354], "outright": [30, 87, 287], "static": [31, 88, 288], "initi": [31, 32, 88, 90, 105, 140, 150, 168, 187, 189, 191, 197, 202, 218, 243, 252, 255, 261, 266, 288, 290, 295, 329, 336, 351, 359, 360, 361, 364, 368], "neurotools_cach": [31, 88, 288], "were": [31, 32, 88, 89, 90, 105, 140, 218, 288, 289, 290, 295, 329], "written": [31, 88, 173, 198, 247, 262, 288, 354, 365], "framework": [31, 88, 288], "oscar": [31, 88, 288], "cluster": [31, 88, 288], "brown": [31, 88, 288], "univers": [31, 88, 105, 218, 288, 295], "yet": [31, 88, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 247, 288, 354, 358], "hard": [11, 31, 88, 119, 288, 309], "delet": [31, 88, 288], "ramdisk": [31, 88, 288], "WITH": [31, 88, 288], "caution": [31, 88, 147, 288, 334], "rm": [31, 88, 169, 288, 352], "rf": [31, 88, 288], "entir": [31, 88, 153, 232, 288, 338], "ramdisk_loc": [31, 88, 288], "extrem": [31, 88, 105, 140, 169, 218, 288, 295, 329, 352], "danger": [31, 88, 288], "disabl": [31, 88, 288], "notimplementederror": [31, 88, 288], "ssd": [31, 88, 288], "drive": [31, 88, 150, 288, 336], "level2_loc": [31, 88, 288], "usav": [31, 88, 288], "override_ramdisk_loc": [31, 88, 288], "500gb": [31, 88, 288], "debian": [31, 88, 288], "linux": [31, 88, 288], "ram": [31, 88, 146, 217, 288, 333, 377], "inter": [31, 88, 288], "commun": [31, 88, 288], "metaphor": [31, 88, 288], "consid": [31, 39, 88, 105, 130, 167, 218, 242, 288, 295, 320, 350], "requir": [31, 88, 89, 105, 147, 215, 218, 288, 289, 295, 334, 375], "sudo": [31, 88, 288], "privileg": [31, 88, 288], "execut": [12, 31, 88, 120, 140, 220, 288, 310, 329], "jupyt": [31, 88, 288], "ipython": [31, 88, 215, 288, 375], "notebook": [31, 88, 168, 215, 243, 288, 351, 375], "insid": [31, 88, 288], "browser": [31, 88, 288], "hand": [31, 32, 35, 88, 90, 93, 105, 218, 288, 290, 293, 295], "configur": [31, 88, 169, 217, 288, 352, 377], "mediat": [31, 88, 288], "onto": [31, 88, 140, 288, 329], "larg": [31, 88, 105, 140, 177, 191, 201, 218, 251, 255, 265, 288, 295, 329, 357, 361, 367], "solut": [31, 35, 39, 88, 93, 105, 130, 218, 288, 293, 295, 320], "depric": [31, 88, 217, 288, 377], "spawn": [31, 88, 288], "synchron": [31, 88, 288], "reason": [31, 32, 88, 90, 105, 141, 146, 201, 218, 265, 288, 290, 295, 330, 333, 367], "mi": [31, 88, 288], "loss": [31, 88, 288], "sort": [31, 88, 105, 201, 218, 265, 288, 295, 367], "lazi": [31, 88, 288], "protocol": [31, 88, 288], "level1": [31, 88, 288], "home": [31, 88, 288], "mer49": [31, 88, 288], "neurotools_ramdisk": [31, 88, 288], "level2": [31, 88, 288], "level3": [31, 88, 288], "miss": [2, 3, 9, 11, 17, 31, 32, 88, 90, 105, 110, 111, 117, 119, 125, 140, 153, 156, 174, 217, 218, 232, 235, 248, 288, 290, 295, 300, 301, 307, 309, 315, 329, 338, 341, 355, 377], "repopul": [31, 88, 288], "might": [12, 31, 32, 88, 90, 120, 192, 256, 288, 290, 310, 362], "includ": [31, 88, 89, 105, 140, 152, 169, 218, 231, 288, 289, 295, 329, 337, 352], "local": [31, 88, 140, 149, 152, 153, 156, 158, 160, 174, 191, 215, 231, 232, 235, 236, 237, 248, 255, 288, 329, 335, 337, 338, 341, 343, 345, 355, 361, 375], "life": [31, 88, 288], "frequent": [31, 88, 105, 218, 288, 295], "hdd": [31, 88, 288], "larger": [31, 88, 105, 140, 153, 154, 160, 201, 218, 232, 233, 237, 265, 288, 295, 329, 338, 339, 345, 367], "dataset": [17, 31, 88, 125, 140, 169, 288, 315, 329, 352], "network": [31, 88, 288], "databas": [31, 88, 288], "memori": [8, 11, 12, 31, 88, 116, 119, 120, 288, 306, 309, 310], "unsafe_disk_cach": [31, 88, 288], "patch": [31, 88, 288], "replac": [31, 88, 105, 140, 217, 218, 288, 295, 329, 377], "persist": [31, 88, 288], "provid": [31, 32, 36, 88, 89, 90, 94, 105, 140, 153, 160, 167, 169, 174, 191, 217, 218, 232, 237, 242, 248, 255, 288, 289, 290, 294, 295, 329, 338, 345, 350, 352, 355, 361, 377], "bug": [31, 88, 197, 261, 288, 364], "wors": [31, 88, 288], "By": [31, 88, 105, 218, 288, 295], "excplitli": [31, 88, 288], "enforc": [31, 88, 288], "original": [31, 88, 288], "truccolo": [31, 88, 201, 265, 288, 367], "lab": [31, 88, 288], "myhost": [31, 88, 288], "o": [31, 88, 105, 191, 218, 255, 288, 295, 361], "unam": [31, 88, 288], "moonbas": [31, 88, 288], "level1_loc": [31, 88, 288], "media": [31, 88, 288], "neurotools_level1": [31, 88, 288], "ssd_1": [31, 88, 288], "mrule": [31, 88, 288], "level3_loc": [31, 88, 288], "ldisk_1": [31, 88, 288], "elif": [31, 88, 288], "basecamp": [31, 88, 288], "robotfortress": [31, 88, 288], "petra": [31, 88, 288], "script": [31, 88, 288], "robust": [89, 289], "pythonhost": [89, 289], "liber": [89, 289], "strict": [89, 289], "primit": [89, 289], "veri": [15, 89, 105, 123, 140, 153, 187, 196, 218, 232, 252, 260, 289, 295, 313, 329, 338, 359, 363], "chracter": [89, 289], "za": [89, 289], "z0": [89, 289], "throw": [35, 89, 93, 105, 147, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 289, 293, 295, 334, 358], "timer": [89, 140, 289, 329], "runtim": [89, 289], "purg": [89, 289], "kind": [89, 174, 248, 289, 355], "__wrapped__": [89, 289], "leavefre": [32, 90, 290], "show_progress": [32, 90, 197, 261, 290, 364], "implmenet": [32, 90, 290], "multiprocess": [32, 90, 290], "evaul": [32, 90, 154, 233, 290, 339], "core": [12, 32, 90, 120, 290, 310], "open": [32, 90, 105, 218, 290, 295], "handel": [32, 90, 140, 154, 233, 290, 329, 339], "correctli": [32, 90, 140, 290, 329], "fingerprint": [32, 90, 290], "recompil": [32, 90, 290], "compil": [13, 32, 90, 121, 290, 311], "dictionari": [32, 90, 105, 164, 201, 213, 217, 218, 240, 265, 290, 295, 348, 367, 373, 377], "__indirect_eval_fallback_cach": [32, 90, 290], "worker": [32, 90, 290], "pool": [32, 90, 290], "usual": [32, 90, 290], "yield": [32, 90, 105, 169, 175, 218, 249, 290, 295, 352, 356], "undefin": [12, 32, 90, 105, 120, 140, 218, 290, 295, 310, 329], "rebuild": [32, 90, 290], "lambda": [8, 15, 32, 90, 105, 116, 123, 202, 218, 266, 290, 295, 306, 313, 368], "express": [12, 32, 90, 105, 120, 217, 218, 290, 295, 310, 377], "them": [32, 90, 105, 140, 217, 218, 290, 295, 329, 377], "ahead": [32, 90, 290], "force_cach": [32, 90, 290], "force_fallback": [32, 90, 290], "allow_fallback": [32, 90, 290], "defind": [32, 90, 290], "happen": [32, 90, 105, 197, 218, 261, 290, 295, 364], "unabl": [32, 90, 290], "initiatl": [32, 90, 290], "There": [32, 90, 290], "workaround": [32, 90, 290], "your": [8, 32, 90, 116, 187, 252, 290, 306, 359], "funcion": [32, 90, 290], "launch": [32, 90, 290], "prevent": [32, 90, 140, 163, 239, 290, 329, 347], "thread": [11, 12, 32, 90, 119, 120, 144, 155, 220, 234, 290, 309, 310, 332, 340], "understand": [32, 90, 105, 218, 290, 295], "ensur": [32, 35, 90, 93, 147, 196, 217, 260, 290, 293, 334, 363, 377], "pointer": [32, 90, 290], "workspac": [32, 90, 290], "Then": [32, 90, 105, 173, 218, 247, 290, 295, 354], "gain": [32, 90, 191, 255, 290, 361], "inheret": [32, 90, 290], "context": [11, 32, 90, 119, 290, 309], "halt": [32, 90, 290], "stuck": [32, 90, 290], "hang": [32, 90, 290], "On": [32, 90, 105, 218, 290, 295], "anyth": [32, 90, 189, 220, 290, 360], "violent": [32, 90, 290], "free": [32, 90, 197, 261, 290, 364], "minu": [32, 90, 105, 172, 218, 246, 290, 295, 353], "restart": [32, 90, 105, 218, 290, 295], "realli": [32, 90, 173, 247, 290, 354], "just": [12, 32, 90, 105, 120, 167, 215, 217, 218, 242, 290, 295, 310, 350, 375, 377], "propag": [32, 90, 153, 232, 290, 338], "shape": [34, 35, 36, 92, 93, 94, 105, 140, 142, 154, 158, 160, 161, 169, 173, 177, 187, 191, 202, 217, 218, 233, 236, 237, 247, 251, 252, 255, 266, 292, 293, 294, 295, 329, 331, 339, 343, 345, 346, 352, 354, 357, 359, 361, 368, 377], "similar": [35, 39, 93, 105, 130, 158, 160, 216, 218, 236, 237, 293, 295, 320, 343, 345, 376], "diag": [35, 93, 293], "matric": [12, 35, 36, 93, 94, 120, 173, 247, 293, 294, 310, 354], "triangl": [35, 93, 164, 240, 293, 348], "nxn": [35, 36, 93, 94, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 294, 358], "diagon": [35, 36, 93, 94, 105, 169, 218, 293, 294, 295, 352], "offset": [35, 36, 93, 94, 140, 158, 169, 187, 202, 236, 252, 266, 293, 294, 329, 343, 352, 359, 368], "triu_indeci": [35, 93, 293], "somewhat": [13, 35, 93, 121, 141, 293, 311, 330], "multidimension": [35, 93, 140, 293, 329], "ravel": [35, 93, 217, 293, 377], "reciproc": [35, 93, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 237, 293, 345, 358], "finit": [35, 36, 93, 94, 140, 147, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 294, 329, 334, 358], "06": [35, 93, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 358], "verifi": [35, 93, 105, 153, 191, 218, 232, 255, 293, 295, 338, 361], "definit": [35, 93, 105, 141, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 293, 295, 330, 358], "expect": [35, 39, 93, 105, 130, 160, 172, 187, 191, 196, 218, 237, 246, 252, 255, 260, 293, 295, 320, 345, 353, 359, 361, 363], "maximum": [35, 93, 105, 140, 161, 167, 168, 169, 191, 196, 197, 214, 218, 242, 243, 255, 260, 261, 293, 295, 329, 346, 350, 351, 352, 361, 363, 364, 374], "transpos": [35, 93, 105, 146, 147, 218, 293, 295, 333, 334], "recondit": [35, 93, 293], "matirx": [35, 93, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 358], "hermetian": [35, 93, 293], "redund": [35, 93, 293], "eigh": [35, 93, 293], "instead": [35, 93, 105, 174, 218, 248, 293, 295, 355], "eigenvalu": [35, 93, 141, 146, 169, 293, 330, 333, 352], "eigenvector": [35, 93, 169, 293, 352], "logarithm": [0, 35, 93, 105, 140, 144, 211, 218, 293, 295, 329, 332, 371], "solve_triangular": [35, 93, 293], "solv": [35, 36, 39, 93, 94, 130, 158, 187, 236, 252, 293, 294, 320, 343, 359], "quatrat": [35, 93, 293], "m1": [35, 93, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 237, 293, 345, 358], "m2": [35, 93, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 358], "wise": [8, 13, 35, 93, 116, 121, 293, 306, 311], "teo": [35, 93, 293], "pairwis": [35, 93, 141, 146, 147, 161, 167, 173, 202, 242, 247, 266, 293, 330, 333, 334, 346, 350, 354, 368], "mst": [35, 93, 293], "rank": [35, 93, 105, 140, 218, 293, 295, 329], "choleski": [35, 93, 293], "factor": [35, 93, 140, 153, 154, 167, 174, 232, 233, 242, 248, 293, 329, 338, 339, 350, 355], "possibli": [35, 93, 293], "recomput": [35, 93, 293], "q": [0, 35, 93, 105, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 201, 211, 218, 256, 265, 293, 295, 358, 362, 367, 371], "qq": [35, 93, 293], "dot": [2, 7, 8, 35, 93, 110, 115, 116, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 300, 305, 306, 358], "ch": [35, 93, 105, 218, 293, 295], "chol": [35, 93, 293], "xx": [35, 93, 105, 218, 293, 295], "outer": [35, 93, 154, 233, 293, 339], "pp": [35, 93, 105, 156, 201, 218, 235, 265, 293, 295, 341, 367], "cp": [35, 93, 293], "idenet": [35, 93, 293], "ey": [35, 93, 293], "11144513": [35, 93, 293], "cartesian": [35, 93, 293], "product": [8, 35, 36, 93, 94, 105, 116, 141, 154, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 233, 236, 293, 294, 295, 306, 330, 339, 343, 358], "nit": [35, 93, 293], "algorithm": [35, 93, 105, 140, 191, 197, 218, 255, 261, 293, 295, 329, 361, 364], "higham": [35, 93, 293], "2000": [35, 39, 93, 130, 293, 320], "answer": [35, 93, 105, 215, 218, 293, 295, 375], "10940283": [35, 93, 293], "900749": [35, 93, 293], "relev": [35, 93, 105, 218, 293, 295], "intellectu": [35, 93, 293], "retain": [35, 93, 140, 169, 293, 329, 352], "sega": [35, 93, 293], "sai": [35, 93, 293], "1269140": [35, 93, 293], "semi": [35, 93, 293], "epsilon": [35, 93, 293], "rebonato": [35, 93, 293], "jackel": [35, 93, 293], "1999": [35, 93, 105, 218, 293, 295], "18542094": [35, 93, 293], "minimum": [35, 93, 140, 153, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 232, 252, 293, 329, 338, 352, 358, 359], "repair": [35, 93, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 358], "invert": [35, 93, 140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 217, 293, 329, 358, 377], "alias": [35, 93, 154, 233, 293, 339], "analogi": [35, 93, 153, 156, 232, 235, 293, 338, 341], "operatornam": [35, 93, 293], "lapack": [35, 93, 293], "dtrtri": [35, 93, 293], "www": [35, 93, 105, 187, 218, 252, 293, 295, 359], "netlib": [35, 93, 293], "explor": [35, 93, 105, 218, 293, 295], "da": [35, 93, 293], "dba": [35, 93, 293], "group__double_o_t_h_e_rcomputational_ga97c5ddb103f5f6bc2dc060886aaf2ffc": [35, 93, 293], "ga97c5ddb103f5f6bc2dc060886aaf2ffc": [35, 93, 293], "doc": [35, 93, 293], "symmetr": [35, 36, 93, 94, 105, 154, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 233, 236, 293, 294, 295, 339, 343, 358], "j": [35, 93, 105, 161, 173, 201, 218, 247, 265, 293, 295, 346, 354, 367], "psd": [35, 93, 293], "linear": [13, 35, 39, 93, 121, 130, 140, 160, 169, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 202, 237, 247, 248, 252, 255, 266, 293, 311, 320, 329, 345, 352, 354, 355, 358, 359, 361, 368], "indeci": [35, 93, 140, 153, 161, 164, 169, 232, 240, 293, 329, 338, 346, 348, 352], "multi": [35, 93, 105, 141, 146, 147, 153, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 232, 293, 295, 330, 333, 334, 338, 352, 358], "dimension": [35, 36, 93, 94, 105, 140, 142, 153, 156, 168, 169, 191, 199, 218, 232, 235, 243, 255, 263, 293, 294, 295, 329, 331, 338, 341, 351, 352, 361, 366], "reg": [35, 93, 169, 293, 352], "regular": [35, 93, 140, 169, 173, 177, 187, 191, 247, 251, 252, 255, 293, 329, 352, 354, 357, 359, 361], "xm": [35, 93, 293], "l2": [35, 93, 169, 173, 187, 247, 252, 293, 352, 354, 359], "observ": [35, 93, 105, 169, 187, 191, 192, 198, 214, 218, 252, 255, 256, 262, 293, 295, 352, 359, 361, 362, 365, 374], "explanatori": [35, 93, 293], "independ": [8, 35, 93, 105, 116, 147, 169, 201, 218, 265, 293, 295, 306, 334, 352, 367], "nsampl": [35, 93, 105, 141, 147, 169, 173, 187, 218, 247, 252, 293, 295, 330, 334, 352, 354, 359], "nfeatur": [35, 93, 169, 187, 252, 293, 352, 359], "respons": [35, 38, 93, 129, 140, 173, 202, 247, 266, 293, 319, 329, 354, 368], "small": [12, 35, 93, 105, 120, 140, 154, 163, 172, 174, 191, 218, 233, 239, 246, 248, 255, 293, 295, 310, 329, 339, 347, 353, 355, 361], "001": [35, 93, 293], "norm": [2, 7, 8, 35, 93, 105, 110, 115, 116, 218, 293, 295, 300, 305, 306], "lasso": [35, 93, 293], "think": [35, 93, 141, 154, 233, 293, 330, 339], "radian": [35, 93, 153, 156, 160, 169, 232, 235, 237, 293, 338, 341, 345, 352], "behav": [35, 93, 105, 140, 218, 293, 295, 329], "multipli": [35, 93, 105, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 236, 255, 293, 295, 343, 358, 361], "noutput": [35, 93, 293], "bx": [35, 93, 293], "predict": [35, 93, 169, 293, 352], "approxim": [0, 35, 93, 105, 191, 192, 199, 211, 218, 255, 256, 263, 293, 295, 361, 362, 366, 371], "kroneck": [35, 93, 293], "sum": [0, 8, 35, 93, 105, 116, 140, 144, 146, 167, 175, 191, 201, 211, 217, 218, 242, 249, 255, 265, 293, 295, 306, 329, 332, 333, 350, 356, 361, 367, 371, 377], "divid": [8, 35, 93, 116, 140, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 306, 329, 352, 358], "largetst": [35, 93, 293], "selector": [35, 93, 293], "3x3": [35, 36, 93, 94, 158, 236, 293, 294, 343], "radial": [35, 36, 93, 94, 154, 158, 233, 236, 293, 294, 339, 343], "discret": [35, 36, 39, 93, 94, 105, 130, 140, 142, 154, 158, 191, 192, 218, 233, 236, 255, 256, 293, 294, 295, 320, 329, 331, 339, 343, 361, 362], "sample_defici": [35, 93, 169, 293, 352], "distort": [35, 93, 293], "eigendecomposit": [35, 93, 293], "whiten": [35, 93, 293], "tutori": [35, 93, 187, 252, 293, 359], "approach": [35, 93, 105, 218, 293, 295], "eldar": [35, 93, 293], "yc": [35, 93, 293], "2003": [35, 39, 93, 105, 130, 218, 293, 295, 320], "ieee": [35, 93, 293], "intern": [35, 93, 105, 218, 293, 295], "confer": [35, 93, 293], "acoust": [35, 93, 293], "speech": [35, 93, 293], "proceed": [35, 93, 293], "icassp": [35, 93, 293], "03": [35, 93, 293], "apr": [35, 93, 293], "vol": [35, 93, 105, 218, 293, 295], "vi": [35, 93, 293], "713": [35, 93, 293], "oppenheim": [35, 93, 293], "av": [35, 93, 293], "mmse": [35, 93, 293], "subspac": [35, 93, 293], "transact": [35, 93, 293], "jun": [35, 93, 293], "25": [35, 36, 93, 94, 105, 158, 187, 218, 220, 236, 252, 293, 294, 295, 343, 359], "49": [35, 36, 93, 94, 105, 158, 187, 218, 236, 252, 293, 294, 295, 343, 359], "1846": [35, 93, 293], "51": [35, 36, 93, 94, 105, 158, 187, 218, 236, 252, 293, 294, 295, 343, 359], "inproceed": [35, 93, 293], "eldar2003minimum": [35, 93, 293], "author": [35, 93, 177, 251, 293, 357], "yonina": [35, 93, 293], "booktitl": [35, 93, 293], "volum": [35, 38, 93, 105, 129, 218, 293, 295, 319], "page": [35, 93, 105, 218, 293, 295], "year": [35, 93, 105, 218, 293, 295], "organ": [35, 93, 293], "articl": [35, 93, 293], "eldar2003mms": [35, 93, 293], "alan": [35, 93, 293], "journal": [35, 93, 105, 218, 293, 295], "1851": [35, 93, 293], "publish": [35, 93, 105, 218, 293, 295], "reli": [35, 93, 105, 218, 293, 295], "1000": [35, 39, 93, 105, 130, 140, 141, 144, 146, 147, 153, 160, 167, 173, 191, 201, 218, 232, 237, 242, 247, 255, 265, 293, 295, 320, 329, 330, 332, 333, 334, 338, 345, 350, 354, 361, 367], "subplot": [35, 93, 293], "131": [35, 93, 293], "132": [35, 93, 105, 218, 293, 295], "133": [35, 93, 105, 218, 293, 295], "cat": [35, 93, 105, 218, 293, 295], "xi1": [35, 93, 293], "xi2": [35, 93, 293], "zip": [8, 35, 93, 116, 293, 306], "nfeatures\u00b2": [35, 93, 293], "overrid": [35, 93, 293], "saniti": [35, 93, 293], "while": [35, 93, 105, 218, 293, 295], "certain": [36, 94, 147, 153, 232, 294, 334, 338], "fourier": [36, 94, 140, 144, 154, 233, 294, 329, 332, 339], "coeffici": [8, 36, 94, 105, 116, 147, 153, 160, 169, 218, 232, 237, 294, 295, 306, 334, 338, 345, 352], "spars": [36, 94, 294], "domain": [36, 94, 140, 146, 154, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 233, 247, 294, 329, 333, 339, 354, 358], "circularli": [36, 94, 140, 153, 169, 232, 294, 329, 338, 352], "neighborhood": [36, 94, 294], "build": [36, 94, 141, 158, 187, 236, 252, 294, 330, 343, 359], "approximatelli": [36, 94, 294], "cell": [36, 94, 168, 243, 294, 351], "lxl": [36, 94, 140, 294, 329], "neumann": [36, 94, 294], "reflect": [36, 94, 140, 142, 154, 158, 169, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 233, 236, 248, 255, 294, 329, 331, 339, 343, 352, 355, 358, 361], "csr_matrix": [36, 94, 294], "self": [36, 94, 105, 218, 294, 295], "n\u00b2xn\u00b2": [36, 94, 294], "nonzero": [36, 94, 160, 237, 294, 345], "neighbor": [36, 94, 152, 153, 167, 174, 231, 232, 242, 248, 294, 337, 338, 350, 355], "symmetri": [36, 94, 294], "lenght": [36, 94, 294], "root": [36, 94, 105, 158, 169, 218, 236, 294, 295, 343, 352], "wiener": [36, 94, 150, 191, 255, 294, 336, 361], "differentiaion": [36, 94, 294], "ssvar": [36, 94, 294], "tau": [36, 39, 94, 130, 150, 191, 255, 294, 320, 336, 361], "gaussan": [36, 94, 294], "blur": [36, 94, 294], "buffer": [36, 94, 294], "smaller": [36, 94, 140, 153, 156, 172, 178, 179, 180, 181, 182, 183, 184, 185, 186, 199, 232, 235, 246, 263, 294, 329, 338, 341, 353, 358, 366], "op": [12, 13, 36, 94, 120, 121, 294, 310, 311], "tensor": [36, 94, 294], "cosin": [36, 94, 140, 142, 154, 158, 187, 202, 233, 236, 252, 266, 294, 329, 331, 339, 343, 359, 368], "basi": [36, 94, 140, 144, 158, 187, 236, 252, 294, 329, 332, 343, 359], "13": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "14": [36, 94, 105, 156, 158, 187, 218, 220, 235, 236, 252, 294, 295, 341, 343, 359], "17": [36, 94, 105, 158, 187, 218, 220, 236, 252, 294, 295, 343, 359], "18": [36, 94, 158, 187, 201, 220, 236, 252, 265, 294, 343, 359, 367], "19": [36, 94, 158, 187, 192, 201, 220, 236, 252, 256, 265, 294, 343, 359, 362, 367], "21": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "22": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "24": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "26": [0, 36, 94, 105, 158, 187, 211, 218, 220, 236, 252, 294, 295, 343, 359, 371], "27": [36, 94, 105, 158, 187, 218, 220, 236, 252, 294, 295, 343, 359], "28": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "29": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "30": [36, 94, 105, 140, 158, 187, 218, 220, 236, 252, 294, 295, 329, 343, 359], "33": [36, 94, 158, 187, 236, 252, 294, 343, 359], "34": [36, 94, 158, 187, 220, 236, 252, 294, 343, 359], "35": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "36": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "37": [36, 94, 158, 187, 236, 252, 294, 343, 359], "38": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "41": [36, 94, 158, 187, 236, 252, 294, 343, 359], "42": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "43": [36, 94, 158, 187, 236, 252, 294, 343, 359], "44": [36, 94, 158, 187, 236, 252, 294, 343, 359], "45": [36, 94, 158, 160, 187, 236, 237, 252, 294, 343, 345, 359], "46": [36, 94, 158, 187, 236, 252, 294, 343, 359], "47": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "48": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "53": [36, 94, 158, 187, 236, 252, 294, 343, 359], "54": [36, 94, 158, 187, 236, 252, 294, 343, 359], "55": [36, 94, 158, 187, 236, 252, 294, 343, 359], "56": [36, 94, 158, 187, 236, 252, 294, 343, 359], "57": [36, 94, 105, 158, 187, 201, 218, 236, 252, 265, 294, 295, 343, 359, 367], "58": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "61": [36, 94, 158, 187, 236, 252, 294, 343, 359], "62": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "63": [36, 94, 158, 187, 236, 252, 294, 343, 359], "65": [36, 94, 158, 187, 236, 252, 294, 343, 359], "66": [36, 94, 158, 187, 236, 252, 294, 343, 359], "67": [36, 94, 158, 187, 236, 252, 294, 343, 359], "68": [36, 94, 158, 187, 236, 252, 294, 343, 359], "69": [36, 94, 158, 187, 191, 236, 252, 255, 294, 343, 359, 361], "70": [36, 39, 94, 130, 158, 187, 236, 252, 294, 320, 343, 359], "71": [36, 94, 158, 187, 236, 252, 294, 343, 359], "72": [36, 94, 158, 187, 236, 252, 294, 343, 359], "73": [36, 94, 158, 187, 236, 252, 294, 343, 359], "74": [36, 94, 158, 187, 236, 252, 294, 343, 359], "75": [36, 94, 158, 187, 236, 252, 294, 343, 359], "76": [36, 94, 158, 187, 236, 252, 294, 343, 359], "77": [36, 94, 158, 187, 236, 252, 294, 343, 359], "78": [36, 94, 158, 187, 236, 252, 294, 343, 359], "79": [36, 94, 158, 187, 236, 252, 294, 343, 359], "80": [36, 94, 105, 158, 187, 214, 218, 236, 252, 294, 295, 343, 359, 374], "81": [36, 94, 158, 187, 236, 252, 294, 343, 359], "82": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "83": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "84": [36, 94, 158, 187, 236, 252, 294, 343, 359], "85": [36, 94, 158, 187, 236, 252, 294, 343, 359], "86": [36, 94, 105, 158, 187, 218, 236, 252, 294, 295, 343, 359], "87": [36, 94, 158, 187, 236, 252, 294, 343, 359], "88": [36, 94, 158, 187, 236, 252, 294, 343, 359], "89": [36, 94, 158, 187, 236, 252, 294, 343, 359], "91": [36, 94, 158, 187, 236, 252, 294, 343, 359], "92": [36, 94, 158, 187, 236, 252, 294, 343, 359], "93": [36, 94, 158, 187, 236, 252, 294, 343, 359], "94": [36, 94, 158, 187, 236, 252, 294, 343, 359], "98": [36, 94, 158, 168, 187, 236, 243, 252, 294, 343, 351, 359], "wave": [36, 94, 105, 153, 156, 158, 160, 187, 218, 232, 235, 236, 237, 252, 294, 295, 338, 341, 343, 345, 359], "quarter": [36, 94, 158, 187, 236, 252, 294, 343, 359], "n_element": [36, 94, 158, 187, 236, 252, 294, 343, 359], "n_time": [36, 94, 158, 187, 236, 252, 294, 343, 359], "min_interv": [36, 94, 158, 187, 236, 252, 294, 343, 359], "logarightm": [36, 94, 158, 187, 236, 252, 294, 343, 359], "peak": [36, 94, 105, 140, 152, 156, 158, 168, 187, 199, 218, 231, 235, 236, 243, 252, 263, 294, 295, 329, 337, 341, 343, 351, 359, 366], "constraint": [36, 94, 158, 187, 236, 252, 294, 343, 359], "n_basi": [36, 94, 158, 187, 236, 252, 294, 343, 359], "exp": [0, 12, 36, 39, 94, 105, 120, 130, 154, 158, 187, 202, 211, 218, 233, 236, 252, 266, 294, 295, 310, 320, 339, 343, 359, 368, 371], "pylab": [105, 217, 218, 295, 377], "commonli": [0, 105, 211, 218, 295, 371], "alia": [105, 154, 218, 220, 233, 295, 339], "eas": [105, 218, 295], "api": [105, 218, 295], "frac": [105, 218, 295], "int_0": [105, 218, 295], "dt": [14, 38, 39, 105, 122, 129, 130, 150, 191, 216, 218, 255, 295, 312, 319, 320, 336, 361, 376], "often": [105, 140, 218, 295, 329], "seen": [105, 218, 295], "bayesian": [105, 218, 295], "infer": [105, 189, 191, 218, 255, 295, 360, 361], "default_rng": [105, 218, 295], "pleas": [105, 169, 174, 191, 218, 248, 255, 295, 352, 355, 361], "quick": [105, 169, 218, 295, 352], "array_lik": [105, 196, 218, 260, 295, 363], "broadcast": [105, 140, 218, 295, 329], "parameter": [105, 218, 295], "trial": [105, 140, 141, 155, 169, 218, 234, 295, 329, 330, 340, 352], "success": [105, 218, 295], "equal": [105, 146, 218, 295, 333], "binom": [105, 218, 295], "cumul": [105, 218, 295], "estim": [11, 105, 119, 140, 141, 147, 153, 160, 167, 169, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 198, 199, 201, 218, 232, 237, 242, 248, 251, 252, 255, 260, 262, 263, 265, 295, 309, 329, 330, 334, 338, 345, 350, 352, 355, 357, 358, 359, 361, 363, 365, 366, 367], "proport": [105, 218, 295], "peopl": [105, 218, 295], "who": [105, 218, 295], "dalgaard": [105, 218, 295], "peter": [105, 218, 295], "introductori": [105, 218, 295], "springer": [105, 218, 295], "verlag": [105, 218, 295], "2002": [105, 218, 295], "glantz": [105, 218, 295], "stanton": [105, 218, 295], "primer": [105, 218, 295], "biostatist": [105, 218, 295], "mcgraw": [105, 218, 295], "hill": [13, 105, 121, 189, 218, 295, 311, 360], "fifth": [105, 218, 295], "edit": [105, 218, 295], "lentner": [105, 218, 295], "marvin": [105, 218, 295], "elementari": [105, 218, 295], "bogden": [105, 218, 295], "quiglei": [105, 218, 295], "1972": [105, 218, 295], "weisstein": [105, 218, 295], "eric": [105, 218, 295], "mathworld": [105, 218, 295], "wolfram": [105, 218, 295], "web": [105, 158, 218, 236, 295, 343], "resourc": [105, 218, 295], "binomialdistribut": [105, 218, 295], "wikipedia": [105, 191, 218, 255, 295, 361], "en": [105, 191, 218, 255, 295, 361], "wiki": [105, 191, 218, 255, 295, 361], "binomial_distribut": [105, 218, 295], "coin": [105, 218, 295], "world": [105, 218, 295], "compani": [105, 218, 295], "drill": [105, 218, 295], "wild": [105, 218, 295], "oil": [105, 218, 295], "nine": [105, 218, 295], "000": [105, 218, 295], "20000": [105, 218, 295], "38885": [105, 218, 295], "df": [105, 218, 295], "chi": [105, 191, 218, 255, 295, 361], "hypothesi": [105, 147, 218, 295, 334], "freedom": [105, 147, 172, 218, 246, 295, 334, 353], "inappropri": [105, 218, 295], "sum_": [105, 218, 295], "mathtt": [105, 218, 295], "2_i": [105, 218, 295], "denot": [12, 105, 120, 218, 295, 310], "sim": [18, 105, 126, 218, 295, 316], "2_k": [105, 218, 295], "infti": [105, 218, 295], "nist": [105, 218, 295], "handbook": [105, 218, 295], "itl": [105, 218, 295], "gov": [105, 218, 295], "div898": [105, 218, 295], "eda": [105, 218, 295], "section3": [105, 218, 295], "eda3666": [105, 218, 295], "htm": [105, 218, 295], "89920014": [105, 218, 295], "00867716": [105, 218, 295], "13710533": [105, 218, 295], "62318272": [105, 218, 295], "arang": [105, 154, 202, 218, 233, 266, 295, 339, 368], "select": [105, 147, 154, 218, 233, 295, 334, 339], "item": [105, 169, 214, 218, 295, 352, 374], "greater": [105, 218, 295], "through": [105, 217, 218, 295, 377], "effici": [11, 12, 105, 119, 120, 177, 217, 218, 251, 295, 309, 310, 357, 377], "sampler": [105, 218, 295], "produc": [8, 105, 116, 140, 177, 218, 251, 295, 306, 329, 357], "len": [105, 140, 168, 175, 177, 187, 201, 218, 243, 249, 251, 252, 265, 295, 329, 351, 356, 357, 359, 367], "equival": [8, 12, 105, 116, 120, 140, 218, 295, 306, 310, 329], "repeat": [105, 218, 295], "arbitrari": [105, 153, 218, 232, 295, 338], "aa_milne_arr": [105, 218, 295], "pooh": [105, 218, 295], "rabbit": [105, 218, 295], "piglet": [105, 218, 295], "christoph": [105, 218, 295], "u11": [105, 218, 295], "multivari": [105, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 255, 295, 358, 361], "conjug": [105, 218, 295], "prior": [105, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 247, 255, 295, 354, 358, 361], "fulfil": [105, 218, 295], "x_i": [105, 177, 218, 251, 295, 357], "propto": [105, 218, 295], "prod_": [105, 218, 295], "alpha_i": [105, 218, 295], "_i": [105, 218, 295], "concentr": [105, 160, 218, 237, 295, 345], "y_i": [105, 177, 218, 251, 295, 357], "david": [105, 218, 295], "mckai": [105, 218, 295], "learn": [105, 187, 218, 252, 295, 359], "chapter": [105, 218, 295], "uk": [105, 218, 295], "mackai": [105, 218, 295], "itila": [105, 218, 295], "dirichlet_distribut": [105, 218, 295], "cite": [105, 218, 295], "cut": [2, 7, 8, 105, 110, 115, 116, 140, 153, 167, 218, 232, 242, 295, 300, 305, 306, 329, 338, 350], "had": [8, 105, 116, 218, 295, 306], "variat": [105, 153, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 232, 237, 295, 338, 345, 358], "barh": [105, 218, 295], "Its": [105, 218, 295], "elsewher": [12, 105, 120, 156, 218, 235, 295, 310, 341], "_": [105, 218, 295], "continu": [105, 140, 173, 174, 197, 217, 218, 247, 248, 261, 295, 329, 354, 355, 364, 377], "analogu": [105, 169, 218, 295, 352], "describ": [105, 160, 218, 237, 295, 345], "situat": [105, 218, 295], "raindrop": [105, 218, 295], "rainstorm": [105, 218, 295], "request": [105, 218, 295], "peyton": [105, 218, 295], "peebl": [105, 218, 295], "jr": [105, 218, 295], "principl": [105, 169, 218, 295, 352], "4th": [105, 160, 218, 237, 295, 345], "ed": [105, 218, 295], "2001": [105, 141, 160, 218, 237, 295, 330, 345], "poisson_process": [105, 218, 295], "exponential_distribut": [105, 218, 295], "dfnum": [105, 218, 295], "dfden": [105, 218, 295], "denomin": [105, 218, 295], "known": [11, 105, 119, 218, 295, 309], "fisher": [105, 218, 295], "aris": [105, 197, 198, 218, 261, 262, 295, 364, 365], "anova": [105, 218, 295], "compar": [105, 147, 161, 167, 169, 201, 218, 242, 265, 295, 334, 346, 350, 352, 367], "respect": [12, 105, 120, 164, 218, 240, 295, 310, 348], "children": [105, 109, 218, 295, 299], "diabet": [105, 218, 295], "control": [105, 140, 144, 217, 218, 295, 329, 332, 377], "blood": [105, 218, 295], "glucos": [105, 218, 295], "null": [105, 147, 201, 218, 265, 295, 334, 367], "statu": [105, 197, 218, 261, 295, 364], "give": [13, 105, 121, 218, 295, 311], "61988120985": [105, 218, 295], "about": [105, 201, 218, 265, 295, 367], "chanc": [105, 147, 218, 295, 334], "exce": [11, 105, 119, 140, 218, 295, 309, 329], "reject": [105, 169, 201, 218, 265, 295, 352, 367], "sometim": [105, 218, 295], "failur": [105, 197, 218, 261, 295, 364], "electron": [105, 218, 295], "natur": [0, 13, 105, 121, 140, 141, 211, 218, 295, 311, 329, 330, 371], "event": [39, 105, 130, 147, 153, 199, 218, 220, 232, 263, 295, 320, 334, 338, 366], "gammadistribut": [105, 218, 295], "gamma_distribut": [105, 218, 295], "std": [2, 7, 8, 105, 110, 115, 116, 140, 217, 218, 295, 300, 305, 306, 329, 377], "sqrt": [105, 146, 196, 218, 260, 295, 333, 363], "along": [105, 140, 141, 153, 156, 169, 199, 218, 232, 235, 263, 295, 329, 330, 338, 341, 352, 366], "sp": [105, 218, 295], "ignor": [105, 178, 179, 180, 181, 182, 183, 184, 185, 186, 218, 220, 295, 358], "hist": [105, 163, 218, 239, 295, 347], "bernoulli": [105, 187, 191, 218, 252, 255, 295, 359, 361], "experi": [105, 140, 218, 295, 329], "outcom": [105, 218, 295], "achiev": [105, 140, 218, 295, 329], "mass": [38, 105, 129, 174, 218, 248, 295, 319, 355], "individu": [105, 218, 295], "ten": [105, 218, 295], "thousand": [105, 218, 295], "10000": [105, 191, 201, 218, 255, 265, 295, 361, 367], "succeed": [105, 218, 295], "34889999999999999": [105, 218, 295], "legaci": [105, 141, 146, 218, 295, 330, 333], "flag": [105, 218, 295], "bitgener": [105, 218, 295], "mt19937": [105, 218, 295], "dict": [105, 201, 213, 217, 218, 265, 295, 367, 373, 377], "624": [105, 218, 295], "po": [105, 218, 295], "has_gauss": [105, 218, 295], "cached_gaussian": [105, 218, 295], "uint": [105, 218, 295], "manual": [105, 187, 218, 252, 295, 359], "know": [105, 218, 295], "exactli": [105, 218, 295], "he": [105, 218, 295], "she": [105, 218, 295], "loc": [105, 218, 295], "below": [105, 153, 217, 218, 232, 295, 338, 377], "gumbel_l": [105, 218, 295], "gumbel_r": [105, 218, 295], "genextrem": [105, 218, 295], "smallest": [105, 218, 295], "sev": [105, 218, 295], "gev": [105, 218, 295], "tail": [105, 218, 295], "german": [105, 218, 295], "mathematician": [105, 218, 295], "emil": [105, 218, 295], "juliu": [105, 218, 295], "earli": [105, 218, 295], "hydrologi": [105, 218, 295], "literatur": [105, 218, 295], "occurr": [105, 218, 295], "flood": [105, 218, 295], "wind": [105, 218, 295], "rainfal": [105, 218, 295], "fat": [105, 218, 295], "henc": [105, 218, 295], "surprisingli": [105, 218, 295], "100": [8, 13, 39, 105, 116, 121, 130, 140, 141, 146, 147, 160, 167, 169, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 237, 242, 248, 255, 295, 306, 311, 320, 329, 330, 333, 334, 345, 350, 352, 355, 358, 361], "underestim": [105, 147, 218, 295, 334], "frechet": [105, 218, 295], "57721": [105, 218, 295], "pi": [105, 140, 153, 187, 218, 232, 252, 295, 329, 338, 359], "york": [105, 218, 295], "columbia": [105, 218, 295], "press": [105, 217, 218, 295, 377], "1958": [105, 218, 295], "reiss": [105, 218, 295], "thoma": [105, 218, 295], "analysi": [105, 146, 153, 163, 173, 187, 218, 232, 239, 247, 252, 295, 333, 338, 347, 354, 359], "insur": [105, 218, 295], "financ": [105, 218, 295], "field": [105, 156, 218, 235, 295, 341], "basel": [105, 218, 295], "birkhaus": [105, 218, 295], "maxima": [105, 152, 153, 156, 218, 231, 232, 235, 295, 337, 338, 341], "append": [105, 169, 218, 295, 352], "ngood": [105, 218, 295], "nbad": [105, 218, 295], "good": [105, 218, 295], "nonneg": [105, 218, 295], "randomli": [105, 140, 147, 218, 295, 329, 334], "taken": [105, 146, 160, 164, 189, 218, 237, 240, 295, 333, 345, 348, 360], "hypergeom": [105, 218, 295], "le": [105, 218, 295], "urn": [105, 218, 295], "marbl": [105, 218, 295], "ball": [105, 218, 295], "wherea": [105, 218, 295], "infinit": [105, 218, 295], "As": [12, 105, 120, 218, 295, 310], "hypergeometricdistribut": [105, 218, 295], "hypergeometric_distribut": [105, 218, 295], "nsamp": [105, 218, 295], "unlik": [105, 218, 295], "suppos": [105, 218, 295], "pull": [105, 218, 295], "100000": [105, 196, 201, 218, 260, 265, 295, 363, 367], "003": [105, 218, 295], "decai": [39, 105, 130, 202, 218, 266, 295, 320, 368], "sharper": [105, 218, 295], "fatter": [105, 218, 295], "law": [105, 202, 218, 266, 295, 368], "1774": [105, 218, 295], "econom": [105, 218, 295], "health": [105, 218, 295], "scienc": [105, 218, 295], "seem": [105, 215, 218, 295, 375], "abramowitz": [105, 218, 295], "stegun": [105, 218, 295], "mathemat": [0, 105, 211, 218, 295, 371], "formula": [105, 169, 218, 295, 352], "9th": [105, 218, 295], "dover": [105, 218, 295], "kotz": [105, 218, 295], "samuel": [105, 218, 295], "et": [105, 141, 153, 218, 232, 295, 330, 338], "al": [105, 141, 153, 218, 232, 295, 330, 338], "laplacedistribut": [105, 218, 295], "laplace_distribut": [105, 218, 295], "act": [105, 218, 295], "epidemiologi": [105, 218, 295], "chess": [105, 218, 295], "feder": [105, 218, 295], "fide": [105, 218, 295], "elo": [105, 218, 295], "player": [105, 218, 295], "logisticdistribut": [105, 218, 295], "logistic_distribut": [105, 218, 295], "against": [39, 105, 130, 218, 295, 320], "def": [105, 196, 217, 218, 260, 295, 363, 377], "lgst_val": [105, 218, 295], "itself": [105, 158, 218, 236, 295, 343], "deriv": [0, 38, 105, 129, 140, 149, 154, 156, 168, 201, 211, 218, 233, 235, 243, 265, 295, 319, 329, 335, 339, 341, 351, 367, 371], "ln": [105, 218, 295], "limpert": [105, 218, 295], "stahel": [105, 218, 295], "abbt": [105, 218, 295], "clue": [105, 218, 295], "bioscienc": [105, 218, 295], "ethz": [105, 218, 295], "mid": [105, 218, 295], "linspac": [105, 218, 295], "tight": [105, 218, 295], "demonstr": [105, 218, 295], "fit": [11, 105, 119, 149, 169, 172, 187, 189, 191, 202, 218, 246, 252, 255, 266, 295, 309, 335, 352, 353, 359, 360, 361, 368], "seri": [105, 140, 201, 218, 265, 295, 329, 367], "logser": [105, 218, 295], "speci": [105, 218, 295], "rich": [105, 218, 295], "propos": [105, 218, 295], "corbet": [105, 218, 295], "william": [105, 218, 295], "1943": [105, 218, 295], "occup": [105, 218, 295], "car": [105, 218, 295], "buza": [105, 218, 295], "martin": [105, 218, 295], "culver": [105, 218, 295], "stephen": [105, 218, 295], "divers": [105, 218, 295], "biodivers": [105, 218, 295], "septemb": [105, 218, 295], "187": [105, 218, 295], "195": [105, 218, 295], "ecologi": [105, 218, 295], "dali": [105, 218, 295], "lunn": [105, 218, 295], "ostrowski": [105, 218, 295], "crc": [105, 218, 295], "1994": [105, 218, 295], "logarithmic_distribut": [105, 218, 295], "pval": [105, 218, 295], "dice": [105, 218, 295], "x_0": [105, 191, 218, 255, 295, 361], "x_1": [105, 218, 295], "x_p": [105, 218, 295], "last": [105, 140, 146, 174, 216, 217, 218, 248, 295, 329, 333, 355, 376, 377], "alwai": [12, 105, 120, 218, 295, 310], "account": [105, 140, 218, 295, 329], "remain": [105, 140, 153, 218, 232, 295, 329, 338], "word": [105, 214, 218, 295, 374], "land": [105, 218, 295], "onc": [13, 105, 121, 218, 295, 311], "again": [105, 218, 295], "threw": [105, 218, 295], "die": [105, 218, 295], "leftov": [105, 218, 295], "bias": [105, 147, 218, 295, 334], "twice": [105, 218, 295], "wrong": [105, 218, 295], "traceback": [105, 218, 295], "recent": [105, 218, 295], "cov": [2, 7, 8, 105, 110, 115, 116, 177, 218, 251, 295, 300, 305, 306, 357], "check_valid": [105, 218, 295], "tol": [105, 197, 218, 261, 295, 364], "multinorm": [105, 218, 295], "higher": [105, 152, 189, 218, 231, 295, 337, 360], "analog": [105, 216, 218, 295, 376], "semidefinit": [105, 218, 295], "proper": [105, 218, 295], "arrang": [105, 218, 295], "toler": [105, 153, 196, 197, 218, 232, 260, 261, 295, 338, 363, 364], "singular": [105, 146, 218, 295, 333], "cast": [12, 105, 120, 140, 196, 218, 260, 295, 310, 329, 363], "bell": [105, 218, 295], "curv": [105, 187, 218, 252, 295, 359], "univari": [0, 105, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 211, 218, 237, 295, 345, 358, 371], "vari": [105, 218, 295], "togeth": [105, 140, 147, 218, 295, 329, 334], "x_2": [105, 218, 295], "x_n": [39, 105, 130, 218, 295, 320], "c_": [105, 218, 295], "ij": [105, 218, 295], "x_j": [105, 218, 295], "ii": [105, 161, 164, 218, 240, 295, 346, 348], "spread": [105, 218, 295], "popular": [105, 218, 295], "spheric": [105, 218, 295], "5000": [105, 218, 295], "backward": [105, 140, 153, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 218, 232, 255, 295, 329, 338, 358, 361], "papouli": [105, 218, 295], "stochast": [105, 218, 295], "3rd": [105, 218, 295], "1991": [105, 218, 295], "duda": [105, 218, 295], "hart": [105, 218, 295], "stork": [105, 218, 295], "classif": [105, 218, 295], "2nd": [105, 218, 295], "wilei": [105, 218, 295], "800": [105, 218, 295], "bivari": [105, 218, 295], "correl": [8, 105, 116, 140, 167, 169, 173, 201, 218, 242, 247, 265, 295, 306, 329, 350, 352, 354, 367], "65465": [105, 218, 295], "pt": [105, 201, 218, 265, 295, 367], "0326911": [105, 218, 295], "01280782": [105, 218, 295], "96202397": [105, 218, 295], "85602287": [105, 218, 295], "47613949": [105, 218, 295], "corrcoef": [105, 218, 295], "6273591314603949": [105, 218, 295], "visual": [105, 154, 218, 233, 295, 339], "cloud": [105, 218, 295], "illustr": [105, 218, 295], "grid": [105, 140, 154, 163, 174, 177, 189, 218, 233, 239, 248, 251, 295, 329, 339, 347, 355, 357, 360], "occur": [38, 105, 129, 140, 218, 295, 319, 329], "reach": [105, 218, 295], "pmf": [105, 218, 295], "repeatedli": [105, 218, 295], "until": [105, 218, 220, 295], "third": [8, 38, 105, 116, 129, 149, 189, 218, 295, 306, 319, 335, 360], "negativebinomialdistribut": [105, 218, 295], "negative_binomial_distribut": [105, 218, 295], "nonc": [105, 218, 295], "noncentr": [105, 218, 295], "earlier": [105, 218, 295], "central": [105, 218, 295], "p_": [105, 218, 295], "y_": [39, 105, 130, 218, 295, 320], "2i": [105, 218, 295], "noncentral_chi": [105, 218, 295], "squared_distribut": [105, 218, 295], "200": [105, 140, 173, 218, 247, 295, 329, 354], "0000001": [105, 218, 295], "values2": [105, 218, 295], "ob": [105, 218, 295], "noncentralf": [105, 218, 295], "studi": [105, 218, 295], "area": [105, 155, 187, 218, 234, 252, 295, 340, 359], "deg": [105, 218, 295], "nc_val": [105, 218, 295], "1000000": [105, 196, 218, 260, 295, 363], "nf": [105, 218, 295], "c_val": [105, 218, 295], "de": [105, 218, 295], "moivr": [105, 218, 295], "gauss": [105, 218, 295], "characterist": [105, 218, 295], "influenc": [105, 218, 295], "tini": [105, 218, 295], "disturb": [105, 218, 295], "own": [105, 218, 295], "centr": [105, 218, 295], "increas": [105, 140, 141, 218, 295, 329, 330], "607": [105, 218, 295], "impli": [105, 218, 295], "ly": [17, 105, 125, 218, 295, 315], "awai": [105, 218, 295], "normal_distribut": [105, 218, 295], "theorem": [105, 218, 295], "125": [105, 218, 295], "ddof": [105, 218, 295], "four": [105, 218, 295], "49401501": [105, 218, 295], "00950034": [105, 218, 295], "81814867": [105, 218, 295], "29718677": [105, 218, 295], "39924804": [105, 218, 295], "68456316": [105, 218, 295], "99394529": [105, 218, 295], "84057254": [105, 218, 295], "lomax": [105, 218, 295], "shift": [2, 7, 8, 105, 110, 115, 116, 140, 160, 218, 237, 295, 300, 305, 306, 329, 345], "classic": [105, 218, 295], "ad": [8, 13, 105, 116, 121, 140, 169, 187, 218, 252, 295, 306, 311, 329, 352, 359], "simplifi": [12, 105, 120, 187, 217, 218, 252, 295, 310, 359, 377], "unbound": [105, 218, 295], "rule": [105, 218, 295], "genpareto": [105, 218, 295], "am": [105, 218, 295], "italian": [105, 218, 295], "economist": [105, 218, 295], "vilfredo": [105, 218, 295], "bradford": [105, 218, 295], "wealth": [105, 218, 295], "economi": [105, 218, 295], "found": [15, 105, 123, 140, 153, 177, 197, 217, 218, 232, 251, 261, 295, 313, 329, 338, 357, 364, 377], "sourceforg": [105, 187, 218, 252, 295, 359], "franci": [105, 218, 295], "hunt": [105, 218, 295], "paul": [105, 218, 295], "johnson": [105, 218, 295], "1896": [105, 218, 295], "cours": [105, 218, 295], "polit": [105, 218, 295], "lausann": [105, 218, 295], "pareto_distribut": [105, 218, 295], "arr": [8, 105, 116, 218, 295, 306], "reshap": [105, 218, 295], "lam": [105, 218, 295], "poissondistribut": [105, 218, 295], "poisson_distribut": [105, 218, 295], "500": [105, 141, 146, 160, 218, 237, 295, 330, 333, 345], "report": [105, 218, 295], "claim": [105, 218, 295], "christian": [105, 218, 295], "kleiber": [105, 218, 295], "actuari": [105, 218, 295], "heckert": [105, 218, 295], "filliben": [105, 218, 295], "jame": [105, 218, 295], "148": [105, 218, 295], "dataplot": [105, 218, 295], "subcommand": [105, 218, 295], "nation": [105, 218, 295], "institut": [105, 218, 295], "technologi": [105, 218, 295], "june": [105, 218, 295], "softwar": [105, 218, 295], "refman2": [105, 218, 295], "auxillar": [105, 218, 295], "powpdf": [105, 218, 295], "normed_i": [105, 218, 295], "diff": [105, 191, 218, 255, 295, 361], "rv": [105, 218, 295], "rvsp": [105, 218, 295], "powerlaw": [105, 218, 295], "d0": [105, 218, 295], "d1": [105, 218, 295], "dn": [105, 218, 295], "That": [12, 105, 120, 187, 191, 218, 252, 255, 295, 310, 359, 361], "ones": [105, 140, 177, 187, 202, 217, 218, 251, 252, 266, 295, 329, 357, 359, 368, 377], "14022471": [105, 218, 295], "96360618": [105, 218, 295], "37601032": [105, 218, 295], "25528411": [105, 218, 295], "49313049": [105, 218, 295], "94909878": [105, 218, 295], "inclus": [105, 218, 295], "exclus": [105, 218, 295], "highest": [105, 218, 295], "byteord": [105, 218, 295], "nativ": [105, 218, 295], "appropri": [105, 153, 169, 218, 232, 295, 338, 352], "omit": [105, 156, 218, 235, 295, 341], "int_lik": [105, 218, 295], "suppli": [105, 218, 295], "1923875335537315": [105, 218, 295], "int_": [105, 218, 295], "deprec": [105, 218, 295], "sinc": [15, 105, 123, 154, 160, 216, 218, 233, 237, 295, 313, 339, 345, 376], "evenli": [105, 140, 214, 218, 295, 329, 374], "choos": [105, 169, 218, 295, 352], "five": [105, 218, 295], "625": [105, 218, 295], "roll": [105, 218, 295], "six": [105, 218, 295], "d2": [105, 218, 295], "dsum": [105, 218, 295], "unif": [105, 218, 295], "47108547995356098": [105, 218, 295], "30220482": [105, 218, 295], "86820401": [105, 218, 295], "1654503": [105, 218, 295], "11659149": [105, 218, 295], "54323428": [105, 218, 295], "three": [105, 218, 295], "99149989": [105, 218, 295], "52338984": [105, 218, 295], "99091858": [105, 218, 295], "79479508": [105, 218, 295], "23204345": [105, 218, 295], "75224494": [105, 218, 295], "cdotp": [105, 218, 295], "would": [8, 13, 39, 105, 116, 121, 130, 218, 295, 306, 311, 320], "east": [105, 218, 295], "north": [105, 218, 295], "veloc": [105, 140, 160, 218, 237, 295, 329, 345], "brighton": [105, 218, 295], "ltd": [105, 218, 295], "20090514091424": [105, 218, 295], "co": [105, 155, 187, 202, 217, 218, 234, 252, 266, 295, 340, 359, 368, 377], "asp": [105, 218, 295], "rayleigh_distribut": [105, 218, 295], "tend": [105, 140, 218, 295, 329], "meter": [105, 218, 295], "meanvalu": [105, 218, 295], "modevalu": [105, 218, 295], "percentag": [105, 214, 218, 295, 374], "087300000000000003": [105, 218, 295], "rese": [105, 218, 295], "best": [105, 189, 197, 218, 261, 295, 360, 364], "recreat": [105, 218, 295], "randomst": [105, 218, 295], "seedsequ": [105, 218, 295], "123456789": [105, 218, 295], "stream": [105, 218, 295], "987654321": [105, 218, 295], "mersenn": [105, 218, 295], "twister": [105, 218, 295], "pseudo": [105, 218, 295], "although": [105, 197, 218, 261, 295, 364], "matsumoto": [105, 218, 295], "nishimura": [105, 218, 295], "623": [105, 218, 295], "equidistribut": [105, 218, 295], "pseudorandom": [105, 218, 295], "acm": [105, 218, 295], "jan": [105, 218, 295], "1998": [105, 218, 295], "place": [105, 140, 218, 295, 329], "mutablesequ": [105, 218, 295], "cauchi": [105, 218, 295], "lorentz": [105, 218, 295], "bigl": [105, 218, 295], "bigr": [105, 218, 295], "harmon": [105, 218, 295], "oscil": [105, 160, 218, 237, 295, 345], "spectral": [105, 141, 144, 146, 173, 218, 247, 295, 330, 332, 333, 354], "broaden": [105, 218, 295], "tilt": [105, 218, 295], "look": [105, 153, 156, 218, 232, 235, 295, 338, 341], "heavier": [105, 218, 295], "sematech": [105, 218, 295], "eda3663": [105, 218, 295], "cauchydistribut": [105, 218, 295], "cauchy_distribut": [105, 218, 295], "3x8000": [105, 218, 295], "8000": [105, 218, 295], "stdev": [105, 218, 295], "6888893": [105, 218, 295], "78096262": [105, 218, 295], "89086505": [105, 218, 295], "49876311": [105, 218, 295], "38672696": [105, 218, 295], "4685006": [105, 218, 295], "student": [105, 218, 295], "hyperbol": [105, 218, 295], "come": [105, 192, 218, 256, 295, 362], "1908": [105, 218, 295], "gosset": [105, 218, 295], "guin": [105, 218, 295], "breweri": [105, 218, 295], "dublin": [105, 218, 295], "proprietari": [105, 218, 295], "issu": [105, 154, 218, 233, 295, 339], "pseudonym": [105, 218, 295], "With": [105, 218, 295], "s_t": [105, 218, 295], "daili": [105, 218, 295], "energi": [105, 192, 218, 256, 295, 362], "intak": [105, 218, 295], "women": [105, 218, 295], "kilojoul": [105, 218, 295], "kj": [105, 218, 295], "5260": [105, 218, 295], "5470": [105, 218, 295], "5640": [105, 218, 295], "6180": [105, 218, 295], "6390": [105, 218, 295], "6515": [105, 218, 295], "6805": [105, 218, 295], "7515": [105, 218, 295], "8230": [105, 218, 295], "8770": [105, 218, 295], "systemat": [105, 218, 295], "recommend": [105, 201, 218, 265, 295, 367], "7725": [105, 218, 295], "our": [105, 147, 218, 295, 334], "absenc": [105, 218, 295], "presenc": [105, 147, 153, 218, 232, 295, 334, 338], "empir": [105, 218, 295], "unbias": [105, 141, 147, 172, 218, 246, 295, 330, 334, 353], "final": [105, 168, 174, 202, 218, 243, 248, 266, 295, 351, 355, 368], "concav": [105, 218, 295], "6753": [105, 218, 295], "636363636364": [105, 218, 295], "1142": [105, 218, 295], "1232221373727": [105, 218, 295], "8207540608310198": [105, 218, 295], "adequ": [105, 218, 295], "critic": [105, 153, 154, 156, 218, 232, 233, 235, 295, 338, 339, 341], "018318": [105, 218, 295], "pre": [105, 218, 295], "condition": [105, 218, 295], "being": [105, 154, 218, 220, 233, 295, 339], "begin": [105, 140, 218, 295, 329], "leq": [105, 218, 295], "end": [18, 105, 126, 140, 168, 169, 218, 243, 295, 316, 329, 351, 352], "ill": [105, 218, 295], "knowledg": [105, 218, 295], "triangular_distribut": [105, 218, 295], "uniformli": [105, 218, 295], "equat": [13, 39, 105, 121, 130, 218, 295, 311, 320], "anywher": [105, 218, 295], "offici": [105, 218, 295], "eventu": [105, 218, 295], "satisfi": [105, 218, 295], "inequ": [105, 218, 295], "99999999": [105, 218, 295], "ones_lik": [105, 218, 295], "kappa": [105, 218, 295], "von": [105, 218, 295], "mise": [105, 218, 295], "dispers": [105, 160, 201, 218, 237, 265, 295, 345, 367], "circl": [105, 218, 295], "thought": [105, 218, 295], "i_0": [105, 218, 295], "bessel": [105, 218, 295], "richard": [105, 218, 295], "edler": [105, 218, 295], "born": [105, 218, 295], "austria": [105, 218, 295], "hungari": [105, 218, 295], "ukrain": [105, 218, 295], "fled": [105, 218, 295], "1939": [105, 218, 295], "becam": [105, 218, 295], "professor": [105, 218, 295], "harvard": [105, 218, 295], "aerodynam": [105, 218, 295], "fluid": [105, 218, 295], "mechan": [105, 218, 295], "philosophi": [105, 218, 295], "academ": [105, 218, 295], "1964": [105, 218, 295], "i0": [105, 218, 295], "num": [105, 218, 295], "infin": [105, 218, 295], "relationship": [105, 218, 295], "brownian": [105, 218, 295], "motion": [105, 140, 218, 295, 329], "1956": [105, 218, 295], "tweedi": [105, 218, 295], "cover": [105, 218, 295], "2x": [105, 218, 295], "competitor": [105, 218, 295], "reliabl": [105, 153, 160, 218, 232, 237, 295, 338, 345], "stock": [105, 218, 295], "interest": [105, 218, 295], "20090423014010": [105, 218, 295], "chhikara": [105, 218, 295], "raj": [105, 218, 295], "folk": [105, 218, 295], "leroi": [105, 218, 295], "methodologi": [105, 218, 295], "applic": [105, 218, 295], "1988": [105, 218, 295], "inverse_gaussian_distribut": [105, 218, 295], "weibull_max": [105, 218, 295], "weibull_min": [105, 218, 295], "iii": [105, 218, 295], "asymptot": [105, 202, 218, 266, 295, 368], "rosin": [105, 218, 295], "rammler": [105, 218, 295], "reduc": [105, 140, 147, 153, 218, 232, 295, 329, 334, 338], "waloddi": [105, 218, 295], "royal": [105, 201, 218, 265, 295, 367], "technic": [105, 218, 295], "stockholm": [105, 218, 295], "Of": [105, 218, 295], "strength": [105, 218, 295], "materi": [105, 218, 295], "ingeniorsvetenskapsakademien": [105, 218, 295], "handlingar": [105, 218, 295], "nr": [105, 218, 295], "151": [105, 218, 295], "generalstaben": [105, 218, 295], "litografiska": [105, 218, 295], "anstalt": [105, 218, 295], "forlag": [105, 218, 295], "asm": [105, 218, 295], "paper": [105, 218, 295], "1951": [105, 218, 295], "weibull_distribut": [105, 218, 295], "weib": [105, 218, 295], "zeta": [105, 218, 295], "geq": [105, 218, 295], "riemann": [105, 218, 295], "american": [105, 218, 295], "linguist": [105, 218, 295], "georg": [105, 218, 295], "kingslei": [105, 218, 295], "languag": [105, 218, 295], "cambridg": [105, 218, 295], "ma": [105, 218, 295], "univ": [105, 218, 295], "1932": [105, 218, 295], "bincount": [105, 218, 295], "semilogi": [105, 218, 295], "huffman": [50, 106, 107, 296, 297], "naryhuffman": [50, 106, 107, 296, 297], "cl": [2, 55, 106, 110, 296, 300], "cpu": [2, 9, 12, 55, 106, 110, 117, 120, 144, 296, 300, 307, 310, 332], "cu": [2, 55, 106, 110, 296, 300], "izh": [37, 95, 106, 128, 296, 318], "dv_izh": [37, 38, 106, 128, 129, 296, 318, 319], "du_izh": [37, 38, 106, 128, 129, 296, 318, 319], "update_izh": [37, 38, 106, 128, 129, 296, 318, 319], "sim_izh": [37, 38, 106, 128, 129, 296, 318, 319], "lif": [37, 95, 106, 128, 296, 318], "euler_integrate_lif": [37, 39, 106, 128, 130, 296, 318, 320], "exponential_integrate_lif": [37, 39, 106, 128, 130, 296, 318, 320], "exponential_moving_averag": [37, 39, 106, 128, 130, 296, 318, 320], "unmaintain": [106, 296], "walk": [107, 108, 109, 297, 298, 299], "encode_packet": [107, 108, 109, 297, 298, 299], "decod": [107, 108, 109, 297, 298, 299], "symbol": [108, 109, 298, 299], "devic": [2, 3, 9, 55, 56, 62, 110, 111, 117, 300, 301, 307], "flat": [2, 7, 8, 110, 115, 116, 300, 305, 306], "idivup": [2, 7, 8, 110, 115, 116, 300, 305, 306], "fanci": [2, 7, 8, 110, 115, 116, 300, 305, 306], "elem": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mmap": [2, 7, 8, 110, 115, 116, 300, 305, 306], "ldif": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lsum": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lmul": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lpow": [2, 7, 8, 110, 115, 116, 300, 305, 306], "ldif2": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lsum2": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lmul2": [2, 7, 8, 110, 115, 116, 300, 305, 306], "ldiv2": [2, 7, 8, 110, 115, 116, 300, 305, 306], "lpow2": [2, 7, 8, 110, 115, 116, 300, 305, 306], "var": [2, 7, 8, 110, 115, 116, 140, 191, 217, 255, 300, 305, 306, 329, 361, 377], "svar": [2, 7, 8, 110, 115, 116, 300, 305, 306], "sstd": [2, 7, 8, 110, 115, 116, 300, 305, 306], "sem": [2, 7, 8, 110, 115, 116, 300, 305, 306], "corr": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mdif": [2, 7, 8, 110, 115, 116, 300, 305, 306], "msum": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mmul": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mdiv": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mpow": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mmean": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mstd": [2, 7, 8, 110, 115, 116, 300, 305, 306], "mvar": [2, 7, 8, 110, 115, 116, 300, 305, 306], "rnorm": [2, 7, 8, 110, 115, 116, 300, 305, 306], "gpuboxconv_cor": [2, 9, 10, 110, 117, 118, 300, 307, 308], "gpuboxconv": [2, 9, 10, 110, 117, 118, 300, 307, 308], "estimatethreadsperblock": [2, 9, 11, 110, 117, 119, 300, 307, 309], "estimateblock": [2, 9, 11, 110, 117, 119, 300, 307, 309], "estimateloop": [2, 9, 11, 110, 117, 119, 300, 307, 309], "card_info": [2, 9, 11, 110, 117, 119, 300, 307, 309], "printkernel": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpubin": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpuscalar": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpumap": [2, 9, 12, 15, 110, 117, 120, 123, 300, 307, 310, 313], "gpuintmap": [2, 9, 12, 110, 117, 120, 300, 307, 310], "expsub": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpumapeq": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpubinaryeq": [2, 9, 12, 15, 110, 117, 120, 123, 300, 307, 310, 313], "guessgputyp": [2, 9, 12, 110, 117, 120, 300, 307, 310], "togputyp": [2, 9, 12, 110, 117, 120, 300, 307, 310], "ezkern": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpupoint": [2, 9, 12, 18, 110, 117, 120, 126, 300, 307, 310, 316], "gpufloat": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpufloatmat": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpufloatr": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpuint": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpuintmat": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpuintr": [2, 9, 12, 110, 117, 120, 300, 307, 310], "gpufun": [2, 9, 55, 62, 110, 117, 300, 307], "gpulcomb": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpumean": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpunpdf": [2, 9, 13, 18, 110, 117, 121, 126, 300, 307, 311, 316], "gpulogpdf": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpuhil": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpurandf": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpuuniform": [2, 9, 13, 110, 117, 121, 300, 307, 311], "gpurandexp": [2, 9, 13, 110, 117, 121, 300, 307, 311], "random_point_sheet": [2, 9, 14, 110, 117, 122, 300, 307, 312], "uniform_point_sheet": [2, 9, 14, 110, 117, 122, 300, 307, 312], "connect_gaussian": [2, 9, 14, 110, 117, 122, 300, 307, 312], "spherepoint": [2, 9, 14, 110, 117, 122, 300, 307, 312], "logic": [2, 9, 55, 62, 110, 117, 217, 300, 307, 377], "gpult": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpugt": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpueq": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpuneq": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpulteq": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpugteq": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpunot": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpuy": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpuand": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpunor": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpuhzero": [2, 9, 15, 110, 117, 123, 300, 307, 313], "gpurang": [2, 9, 15, 110, 117, 123, 300, 307, 313], "elementwisekernel": [2, 9, 17, 110, 117, 125, 300, 307, 315], "gpubarlinedata": [2, 9, 17, 110, 117, 125, 300, 307, 315], "sebarlin": [2, 9, 17, 110, 117, 125, 300, 307, 315], "sebarline2": [2, 9, 17, 110, 117, 125, 300, 307, 315], "gpuhistogram": [2, 9, 17, 110, 117, 125, 300, 307, 315], "gpusequenceautodetect": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpupointautodist": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpuautometr": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpumagmetr": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpudotmetr": [2, 9, 18, 110, 117, 126, 300, 307, 316], "deltamag": [2, 9, 18, 110, 117, 126, 300, 307, 316], "summag": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpuderiv": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpusmooth": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gputh": [2, 9, 18, 110, 117, 126, 300, 307, 316], "mulmag": [2, 9, 18, 110, 117, 126, 300, 307, 316], "frameeat": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpusubsetmean": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpusubsetgfit": [2, 9, 18, 110, 117, 126, 300, 307, 316], "gpulognpdf": [2, 9, 18, 110, 117, 126, 300, 307, 316], "fitgaussbimod": [2, 9, 18, 110, 117, 126, 300, 307, 316], "fitgausstrimod": [2, 9, 18, 110, 117, 126, 300, 307, 316], "live": [7, 115, 305], "anonym": [8, 116, 306], "sphinx": [8, 116, 306], "autodoc": [8, 116, 306], "tripl": [8, 116, 306], "quot": [8, 116, 306], "follo": [8, 116, 306], "declataion": [8, 116, 306], "naiv": [8, 116, 306], "concaten": [8, 116, 214, 306, 374], "lot": [8, 116, 141, 306, 330], "composit": [8, 116, 306], "interpret": [8, 116, 140, 153, 160, 232, 237, 306, 329, 338, 345], "eqival": [8, 116, 306], "ceil": [8, 116, 140, 306, 329], "wap": [8, 116, 306], "math": [8, 116, 306], "markup": [8, 116, 306], "elementwis": [8, 13, 116, 121, 306, 311], "lista": [8, 116, 306], "listb": [8, 116, 306], "verion": [8, 116, 306], "succesor": [8, 116, 306], "everi": [8, 116, 153, 156, 160, 169, 191, 232, 235, 237, 255, 306, 338, 341, 345, 352, 361], "pearson": [8, 116, 169, 306, 352], "rowlen": [8, 116, 306], "subscript": [8, 116, 306], "facilit": [8, 116, 306], "creation": [8, 12, 116, 120, 306, 310], "100x100": [8, 116, 306], "gpuarrai": [8, 12, 13, 116, 120, 121, 306, 310, 311], "slice": [8, 116, 140, 306, 329], "section": [8, 116, 142, 306, 331], "cudamodul": [11, 119, 309], "accepta": [11, 119, 309], "cuda": [11, 12, 119, 120, 309, 310], "block": [11, 12, 119, 120, 140, 160, 169, 173, 187, 237, 247, 252, 309, 310, 329, 345, 352, 354, 359], "per": [11, 39, 119, 130, 153, 160, 232, 237, 309, 320, 338, 345], "warp": [11, 119, 309], "n_unit": [11, 119, 309], "multiprocessor": [11, 119, 309], "my": [11, 12, 119, 120, 309, 310], "convent": [11, 15, 119, 123, 140, 309, 313, 329], "unclear": [11, 119, 309], "weather": [11, 119, 309], "processor": [11, 119, 309], "enough": [11, 119, 309], "pycuda": [11, 12, 13, 119, 120, 121, 309, 310, 311], "formatt": [12, 120, 310], "mostli": [12, 120, 142, 310, 331], "indent": [12, 120, 310], "fun": [12, 120, 217, 310, 377], "autom": [12, 120, 310], "dollar": [12, 120, 310], "clone": [12, 13, 120, 121, 310, 311], "idenitii": [12, 120, 310], "assign": [12, 120, 174, 191, 198, 248, 255, 262, 310, 355, 361, 365], "nontrivi": [12, 120, 310], "nonlinear": [12, 120, 153, 201, 232, 265, 310, 338, 367], "datatyp": [12, 120, 196, 260, 310, 363], "alloc": [12, 120, 310], "suppliment": [12, 120, 310], "hold": [12, 120, 310], "moment": [12, 120, 172, 191, 196, 246, 255, 260, 310, 353, 361, 363], "header": [12, 120, 310], "easi": [12, 120, 310], "bodi": [12, 120, 310], "tid": [12, 120, 310], "manag": [12, 120, 310], "gpuarr": [12, 120, 310], "reduct": [12, 120, 310], "succint": [12, 120, 310], "sever": [13, 121, 177, 251, 311, 357], "simpl": [13, 121, 311], "orix": [13, 121, 311], "succinctli": [13, 121, 311], "overload": [13, 121, 311], "duplic": [13, 121, 164, 240, 311, 348], "useless": [13, 121, 311], "cumath": [13, 121, 311], "syntax": [13, 121, 311], "weight1": [13, 121, 311], "weight2": [13, 121, 311], "data1": [13, 121, 311], "data2": [13, 121, 311], "succes": [13, 121, 311], "recompili": [13, 121, 311], "evalu": [0, 13, 121, 147, 169, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 196, 197, 211, 248, 249, 252, 260, 261, 311, 334, 352, 355, 356, 358, 359, 360, 363, 364, 371], "gpupdf": [13, 121, 311], "compili": [13, 121, 311], "standard_devi": [13, 121, 311], "distribt": [13, 121, 311], "noncoop": [13, 121, 311], "curandom": [13, 121, 311], "basic": [15, 123, 313], "iverson": [15, 123, 313], "0f": [15, 123, 313], "nevertheless": [15, 123, 313], "circumst": [15, 123, 313], "xdata": [17, 125, 315], "ydata": [17, 125, 315], "minval": [17, 125, 315], "maxval": [17, 125, 315], "lx": [17, 125, 315], "thresh": [18, 126, 153, 232, 316, 338], "13k": [18, 126, 316], "timestep": [18, 126, 316], "256x256": [18, 126, 316], "datapoint": [18, 126, 316], "inner": [18, 126, 316], "rad": [18, 126, 316], "maxfram": [18, 126, 316], "frame": [18, 126, 140, 153, 160, 172, 220, 230, 232, 237, 246, 316, 329, 338, 345, 353], "tab": [18, 126, 316], "next": [18, 126, 316], "izhikevich": [38, 129, 319], "dv": [38, 39, 129, 130, 319, 320], "neuron": [38, 129, 173, 247, 319, 354], "ntime": [38, 129, 141, 144, 153, 156, 160, 169, 232, 235, 237, 319, 330, 332, 338, 341, 345, 352], "leaki": [39, 130, 320], "fire": [39, 130, 320], "g_l": [39, 130, 320], "g_e": [39, 130, 320], "00074": [39, 130, 320], "e_": [39, 130, 320], "e_l": [39, 130, 320], "g_": [39, 130, 320], "baker": [39, 130, 320], "pinch": [39, 130, 320], "lemon": [39, 130, 320], "euler": [39, 130, 320], "though": [39, 130, 320], "synapt": [39, 130, 320], "activ": [39, 130, 160, 237, 320, 345], "uf": [39, 130, 320], "membran": [39, 130, 320], "capacit": [39, 130, 320], "leak": [39, 130, 320], "conduct": [39, 130, 320], "mv": [39, 130, 160, 237, 320, 345], "rest": [39, 130, 320], "excitatori": [39, 130, 320], "constant": [0, 39, 130, 150, 154, 160, 169, 175, 187, 202, 211, 233, 237, 249, 252, 266, 320, 336, 339, 345, 352, 356, 359, 368, 371], "hz": [39, 130, 140, 144, 146, 147, 149, 160, 174, 237, 248, 320, 329, 332, 333, 334, 335, 345, 355], "10m": [39, 130, 320], "rc": [39, 130, 320], "epsp": [39, 130, 320], "microvolt": [39, 130, 320], "1mv": [39, 130, 320], "emper": [39, 130, 320], "farad": [39, 130, 320], "volt": [39, 130, 320], "amper": [39, 130, 320], "siemen": [39, 130, 320], "ohm": [39, 130, 320], "millisiemen": [39, 130, 320], "millivolt": [39, 130, 320], "microamp": [39, 130, 320], "microfarad": [39, 130, 320], "millisecond": [39, 130, 216, 320, 376], "clf": [39, 130, 320], "y_n": [39, 130, 320], "convolv": [39, 130, 140, 142, 158, 236, 320, 329, 331, 343], "heavisid": [39, 130, 320], "And": [39, 130, 320], "exact": [39, 130, 320], "impuls": [39, 130, 173, 202, 247, 266, 320, 354, 368], "y_0": [39, 130, 320], "rbm_util": [37, 40, 95, 98, 106, 132, 322], "stutil": [37, 40, 44, 98, 102, 132, 136, 322, 326], "rbm_helper": [37, 40, 95, 98, 106, 132, 322], "rbm_sampl": [37, 40, 95, 98, 106, 132, 322], "gemoetr": [140, 329], "fa": [140, 141, 144, 160, 237, 329, 330, 332, 345], "cutoff": [140, 144, 149, 153, 154, 156, 232, 233, 235, 329, 332, 335, 338, 339, 341], "fb": [140, 141, 144, 160, 173, 237, 247, 329, 330, 332, 345, 354], "guassian": [140, 329], "clamp": [140, 329], "filter": [140, 141, 149, 154, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 233, 247, 255, 329, 330, 335, 339, 354, 358, 361], "nbasi": [140, 329], "tile": [140, 329], "minima": [140, 153, 156, 232, 235, 329, 338, 341], "amplitud": [140, 153, 156, 160, 202, 232, 235, 237, 266, 329, 338, 341, 345, 368], "envelop": [140, 153, 232, 329, 338], "hilbert": [140, 329], "narrow": [140, 329], "watch": [140, 329], "snippit": [140, 147, 329, 334], "surrond": [140, 329], "typic": [140, 160, 177, 237, 251, 329, 345, 357], "summari": [140, 146, 147, 153, 169, 172, 189, 232, 246, 329, 333, 334, 338, 352, 353, 360], "dimensionan": [140, 329], "erro": [140, 329], "handi": [140, 329], "middl": [140, 158, 160, 236, 237, 329, 343, 345], "mirrord": [140, 329], "condtit": [140, 329], "zerophas": [140, 329], "bandstop": [140, 329], "ring": [140, 329], "fiter": [140, 329], "unrealist": [140, 329], "compens": [140, 329], "underflow": [140, 187, 252, 329, 359], "stabil": [140, 160, 237, 329, 345], "freq": [140, 141, 144, 147, 329, 330, 332, 334], "lowpass": [140, 329], "highpass": [140, 329], "butterworth": [140, 329], "IF": [140, 329], "smoothat": [140, 329], "padmod": [140, 329], "filtr": [140, 329], "trim": [140, 153, 232, 329, 338], "slide": [140, 141, 160, 237, 329, 330, 345], "pct": [140, 329], "wraparound": [140, 329], "undesir": [140, 329], "ambigu": [140, 329], "halfwai": [140, 329], "instantan": [140, 329], "od": [140, 329], "decreas": [140, 329], "wari": [140, 329], "nois": [140, 153, 160, 232, 237, 329, 338, 345], "contract": [140, 329], "pad_edg": [140, 329], "treatch": [140, 329], "treat": [140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 329, 358], "2xn": [140, 329], "period": [140, 329], "outsiz": [140, 329], "gap": [140, 329], "streach": [140, 329], "durat": [140, 167, 168, 242, 243, 329, 350, 351], "advanc": [140, 329], "portion": [140, 329], "reson": [140, 220, 329], "resonantdr": [140, 329], "statfunct": [140, 329], "sample_match": [140, 329], "buit": [140, 329], "ins": [140, 329], "opposit": [140, 147, 329, 334], "nyquist": [140, 147, 329, 334], "address": [140, 197, 201, 261, 265, 329, 364, 367], "bandwidth": [140, 141, 146, 147, 329, 330, 333, 334], "artifact": [140, 329], "240": [140, 329], "singnal": [140, 329], "quadrat": [140, 329], "particularli": [140, 329], "higkinemat": [140, 329], "trajectori": [140, 191, 255, 329, 361], "track": [140, 178, 179, 180, 181, 182, 183, 184, 185, 186, 329, 358], "sharp": [140, 329], "spectrum": [140, 141, 146, 329, 330, 333], "cc": [140, 169, 329, 352], "ignore_nan": [140, 329], "trend": [140, 329], "score": [140, 141, 160, 237, 329, 330, 345], "preven": [140, 329], "instabl": [140, 329], "refular": [140, 329], "subtract": [140, 169, 329, 352], "analytic_sign": [140, 329], "doplot": [140, 172, 246, 329, 353], "analyt": [140, 153, 156, 160, 232, 235, 237, 329, 338, 341, 345], "cross": [140, 141, 156, 167, 169, 173, 187, 235, 242, 247, 252, 329, 330, 341, 350, 352, 354, 359], "rectifi": [140, 329], "heuriddddst": [140, 329], "basd": [140, 329], "abnorm": [140, 329], "extremum": [140, 329], "voltag": [140, 329], "curvatur": [140, 329], "demodul": [140, 329], "lag": [140, 167, 173, 242, 247, 329, 350, 354], "fft": [140, 141, 144, 147, 329, 330, 332, 334], "matter": [140, 329], "acf": [140, 329], "mirror": [140, 142, 154, 233, 329, 331, 339], "partial_t": [140, 329], "syst": [140, 329], "nlag": [140, 329], "lagspac": [140, 329], "retrospect": [140, 329], "causal": [140, 329], "featur": [140, 168, 169, 187, 243, 252, 329, 351, 352, 359], "interp1d": [140, 174, 248, 329, 355], "autocorrelogram": [140, 329], "triggerd": [140, 329], "dspguru": [140, 329], "dsp": [140, 329], "howto": [140, 329], "gloabal": [140, 329], "smoothli": [140, 154, 233, 329, 339], "group_siz": [140, 329], "killep": [140, 329], "quirk": [140, 329], "done": [140, 329], "maze": [140, 329], "mous": [140, 329], "spend": [140, 329], "dynam": [140, 153, 232, 329, 338], "dedicatd": [140, 329], "heurist": [140, 147, 329, 334], "dan": [140, 329], "helen": [140, 329], "ethan": [140, 329], "isn": [140, 329], "rankdata": [140, 329], "dedic": [140, 329], "timepoint": [140, 153, 160, 232, 237, 329, 338, 345], "actual": [140, 147, 329, 334], "uinform": [140, 329], "raw": [140, 147, 329, 334], "blank": [140, 329], "did": [140, 168, 243, 329, 351], "recontruct": [140, 329], "original_x": [140, 329], "lfp": [140, 141, 144, 147, 173, 247, 329, 330, 332, 334, 354], "hbw": [140, 329], "record": [140, 329], "1000hz": [140, 329], "60hz": [140, 329], "overton": [140, 329], "usa": [140, 329], "replc": [140, 329], "stastist": [140, 329], "nchannel": [141, 144, 153, 156, 160, 232, 235, 237, 330, 332, 338, 341, 345], "essenti": [141, 177, 251, 330, 357], "bandpass": [141, 330], "bank": [141, 330], "timescal": [141, 144, 330, 332], "synchroni": [141, 144, 160, 237, 330, 332, 345], "kuromoto": [141, 330], "attain": [141, 330], "z_i": [141, 330], "z_j": [141, 330], "involv": [141, 330], "ramirez": [141, 330], "OF": [141, 330], "THE": [141, 330], "FOR": [141, 330], "AND": [141, 330], "nch": [141, 144, 330, 332], "ntaper": [141, 146, 147, 330, 333, 334], "taper": [141, 146, 147, 330, 333, 334], "ft": [141, 173, 247, 330, 354], "bw": [141, 146, 330, 333], "strang": [141, 330], "preserv": [141, 169, 330, 352], "jarvi": [141, 330], "mitra": [141, 330], "comp": [141, 330], "p732": [141, 330], "pesaran": [141, 330], "2008": [141, 330], "supp": [141, 330], "p5": [141, 330], "suggest": [141, 330], "citep": [141, 330], "jarvis2001sampl": [141, 330], "pesaran2008fre": [141, 330], "nt": [141, 330], "nvariabl": [141, 330], "ntrial": [141, 150, 173, 201, 247, 265, 330, 336, 354, 367], "bootstrap": [141, 201, 265, 330, 367], "resampl": [141, 201, 265, 330, 367], "bia": [141, 147, 172, 191, 246, 255, 330, 334, 353, 361], "occassion": [141, 330], "\u00b2": [141, 163, 239, 330, 347], "2h": [142, 331], "2w": [142, 331], "shaoe": [142, 331], "3d": [142, 153, 232, 331, 338], "supersed": [142, 154, 233, 331, 339], "k2": [142, 331], "wavelength": [144, 153, 232, 332, 338], "tempor": [144, 332], "nfreqss": [144, 332], "post": [144, 168, 199, 243, 263, 332, 351, 366], "magnitu": [144, 332], "nfreq": [144, 332], "specral": [144, 332], "tradeoff": [144, 332], "wavelt": [144, 332], "half_bandwidth_paramet": [146, 333], "dpss": [146, 333], "advantag": [146, 333], "expens": [146, 147, 333, 334], "nodc": [146, 333], "NOT": [146, 178, 179, 180, 181, 182, 183, 184, 185, 186, 333, 358], "lowf": [146, 333], "highf": [146, 333], "use_parallel": [146, 333], "coupl": [147, 172, 246, 334, 353], "sigal": [147, 334], "vicin": [147, 334], "attai": [147, 334], "npp": [147, 334], "transpose_warn": [147, 334], "nspike": [147, 334], "nwindow": [147, 334], "trace": [147, 334], "surround": [147, 334], "expos": [147, 334], "examin": [147, 160, 220, 237, 334, 345], "lfp_segment": [147, 334], "booleanl": [147, 334], "nrand": [147, 334], "deafult": [147, 334], "nrandom": [147, 334], "trian": [147, 334], "savitski": [149, 335], "golai": [149, 335], "polynomi": [149, 335], "spline": [149, 335], "fc": [149, 335], "2m": [149, 335], "ou": [150, 336], "ornstein": [150, 336], "uhlenbeck": [150, 336], "damp": [150, 202, 266, 336, 368], "rxr": [152, 231, 337], "electrod": [153, 232, 338], "nd": [153, 160, 232, 237, 338, 345], "kuramoto": [153, 160, 232, 237, 338, 345], "kuramotor": [153, 160, 232, 237, 338, 345], "syncroni": [153, 232, 338], "diment": [153, 232, 338], "exept": [153, 232, 338], "arra": [153, 232, 338], "electrode_spac": [153, 232, 338], "mm": [153, 154, 232, 233, 338, 339], "4mm": [153, 232, 338], "utah": [153, 232, 338], "nclockwis": [153, 232, 338], "clockwis": [153, 156, 232, 235, 338, 341], "nanticlockwis": [153, 232, 338], "anticlockwis": [153, 156, 232, 235, 338, 341], "nsaddl": [153, 232, 338], "saddl": [153, 156, 232, 235, 338, 341], "nmaxima": [153, 232, 338], "nminima": [153, 232, 338], "magnitur": [153, 232, 338], "cycl": [153, 160, 232, 237, 338, 345], "accur": [0, 153, 154, 211, 232, 233, 338, 339, 371], "assess": [153, 232, 338], "directionl": [153, 232, 338], "contribut": [153, 232, 338], "direction": [153, 232, 338], "pgd": [153, 232, 338], "planar": [153, 232, 338], "denois": [153, 232, 338], "accuraci": [153, 187, 232, 252, 338, 359], "mitig": [153, 232, 338], "impact": [153, 232, 338], "rubinto": [153, 232, 338], "2009": [153, 232, 338], "pg": [153, 232, 338], "easier": [153, 160, 232, 237, 338, 345], "nonlinearli": [153, 232, 338], "empti": [153, 232, 338], "crop": [153, 232, 338], "lxkxntime": [153, 232, 338], "primarili": [154, 233, 339], "h_w": [154, 233, 339], "aa": [154, 233, 339], "anti": [154, 233, 339], "antialias": [154, 233, 339], "supsampl": [154, 233, 339], "retrun": [154, 233, 339], "intead": [154, 233, 339], "a_i": [154, 233, 339], "b_k": [154, 233, 339], "1j": [154, 233, 339], "guess": [154, 187, 191, 197, 233, 252, 255, 261, 339, 359, 361, 364], "brute": [154, 233, 339], "dctcut": [154, 233, 339], "compact": [154, 233, 339], "whole": [154, 233, 339], "downsampl": [154, 167, 233, 242, 339, 350], "made": [154, 233, 339], "insert": [154, 233, 339], "custom": [154, 233, 339], "impliment": [154, 233, 339], "frist": [154, 233, 339], "aribtrari": [154, 233, 339], "niter": [154, 233, 339], "multielectrod": [155, 234, 340], "session": [155, 234, 340], "ch1": [155, 234, 340], "ch2": [155, 234, 340], "epoch": [155, 160, 234, 237, 340, 345], "phi": [155, 234, 340], "cgid": [155, 234, 340], "dz": [156, 235, 341], "zorder": [156, 235, 341], "wheel": [156, 235, 341], "flow": [156, 235, 341], "anf": [156, 235, 341], "compass": [156, 235, 341], "needl": [156, 235, 341], "complex1": [156, 235, 341], "search": [156, 189, 217, 235, 341, 360, 377], "s1": [156, 160, 235, 237, 341, 345], "s2": [156, 160, 235, 237, 341, 345], "merg": [156, 164, 217, 235, 240, 341, 348, 377], "nearbi": [156, 164, 178, 179, 180, 181, 182, 183, 184, 185, 186, 235, 240, 341, 348, 358], "pk": [156, 235, 341], "neighbord": [156, 235, 341], "docoalesc": [156, 235, 341], "edgeavoid": [156, 235, 341], "antclockwis": [156, 235, 341], "ss": [156, 235, 341], "plotsaddl": [156, 235, 341], "unknown": [156, 220, 235, 341], "defualt": [156, 172, 235, 246, 341, 353], "sadd": [156, 235, 341], "curl": [156, 235, 341], "wt": [156, 235, 341], "smt": [156, 235, 341], "smf": [156, 235, 341], "id": [156, 220, 235, 341], "mesh": [158, 164, 236, 240, 343, 348], "absorb": [158, 236, 343], "showim": [158, 236, 343], "bounari": [158, 236, 343], "continuum": [158, 236, 343], "magic": [158, 236, 343], "piecewis": [158, 236, 343], "johncostella": [158, 236, 343], "conceptu": [158, 236, 343], "repeatli": [158, 236, 343], "orthogon": [158, 236, 343], "help": [158, 236, 343], "maintain": [158, 236, 343], "oppos": [158, 236, 343], "pop": [160, 237, 345], "unitless": [160, 237, 345], "analag": [160, 237, 345], "tr": [160, 237, 345], "spk120918": [160, 237, 345], "get_all_analytic_pop": [160, 237, 345], "600": [160, 237, 345], "han": [160, 237, 345], "population_signal_coher": [160, 237, 345], "textrm": [160, 237, 345], "langl": [160, 237, 345], "rangl": [160, 237, 345], "notion": [160, 237, 345], "medv": [160, 237, 345], "intoform": [161, 346], "poini": [161, 346], "otherpoint": [161, 346], "inf": [0, 161, 211, 346, 371], "witin": [161, 346], "imatch": [161, 346], "xymatch": [161, 346], "closestmatch": [161, 346], "z1": [161, 346], "z2": [161, 346], "xypoint": [163, 239, 347], "ntriangl": [164, 240, 348], "indec": [164, 240, 348], "delaunai": [164, 240, 348], "simplic": [164, 240, 348], "nedg": [164, 240, 348], "iz": [164, 240, 348], "microd": [164, 240, 348], "edgelist": [164, 240, 348], "join": [164, 214, 240, 348, 374], "centroid": [164, 240, 348], "keword": [164, 240, 348], "train": [167, 168, 169, 173, 187, 242, 243, 247, 252, 350, 351, 352, 354, 359], "t1": [167, 242, 350], "t2": [167, 242, 350], "maxlag": [167, 242, 350], "stand": [167, 242, 350], "sampleat": [167, 242, 350], "adapt": [167, 177, 242, 251, 350, 357], "xc": [167, 173, 242, 247, 350, 354], "raster": [167, 242, 350], "binsiz": [167, 242, 350], "snip": [168, 243, 351], "li": [168, 243, 351], "wf": [168, 243, 351], "vallei": [168, 243, 351], "trough": [168, 243, 351], "extrema": [168, 243, 351], "123": [168, 243, 351], "thin": [168, 243, 351], "amplituc": [168, 243, 351], "300": [168, 201, 243, 265, 351, 367], "isol": [168, 243, 351], "20160802_waveform_segment": [168, 243, 351], "0349055393": [168, 243, 351], "i_f": [168, 243, 351], "logpdf": [178, 179, 180, 181, 182, 183, 184, 185, 186, 352, 358], "fwd": [169, 191, 255, 352, 361], "bwd": [169, 191, 255, 352, 361], "mvpoissonapproxim": [169, 191, 255, 352, 361], "estiamt": [169, 352], "nfold": [169, 352], "parrit": [169, 352], "crossvalid": [169, 187, 252, 352, 359], "partit": [169, 352], "xtrain": [169, 352], "ytrain": [169, 352], "xtest": [169, 352], "ytest": [169, 352], "ntimepoint": [169, 352], "ndatapoint": [169, 352], "xh": [169, 352], "l1": [169, 202, 266, 352, 368], "vali": [169, 352], "hx": [169, 352], "err": [169, 352], "errmethod": [169, 352], "fold": [169, 187, 252, 352, 359], "lstsq": [169, 352], "anoth": [169, 352], "penalti": [169, 187, 202, 252, 266, 352, 359, 368], "constand": [169, 352], "extra": [169, 197, 214, 261, 352, 364, 374], "bhat": [169, 191, 255, 352, 361], "traina": [169, 352], "trainb": [169, 352], "testa": [169, 352], "testb": [169, 352], "blocksiz": [169, 352], "blockshuffl": [169, 352], "integet": [169, 352], "prefix": [169, 213, 214, 216, 352, 373, 374, 376], "ndarari": [169, 191, 255, 352, 361], "halv": [169, 352], "kept": [169, 352], "n_keep": [169, 352], "rank_defici": [169, 352], "princip": [169, 352], "nyfeatur": [169, 352], "fewer": [169, 214, 352, 374], "covariac": [169, 352], "abbrevi": [169, 352], "colum": [169, 352], "nobserv": [169, 352], "regressor": [169, 352], "intercept": [169, 352], "auc": [169, 352], "gini": [169, 352], "impur": [169, 352], "r\u00b2": [169, 352], "g\u00b2": [169, 352], "l0": [169, 352], "explain": [169, 352], "devianc": [169, 352], "likelihood": [169, 189, 191, 255, 352, 360, 361], "held": [169, 352], "contour": [172, 246, 353], "dof": [172, 246, 353], "squared_averag": [172, 246, 353], "averagind": [173, 247, 354], "apologi": [173, 247, 354], "nreplica": [173, 247, 354], "nneuron": [173, 247, 354], "fftspike": [173, 247, 354], "shrinkag": [173, 247, 354], "strenth": [173, 247, 354], "prior_var": [173, 247, 354], "x_grid": [174, 248, 355], "gaussian_kd": [174, 177, 248, 251, 355, 357], "kde": [174, 177, 199, 248, 251, 263, 355, 357, 366], "input_unit": [174, 248, 355], "intens": [174, 248, 355], "divis": [174, 248, 355], "ngrid": [174, 248, 355], "histogram2d": [174, 248, 355], "counterpart": [175, 249, 356], "longdoubl": [0, 175, 211, 249, 356, 371], "whih": [175, 249, 356], "pobabl": [175, 191, 249, 255, 356, 361], "pick": [175, 191, 249, 255, 356, 361], "accord": [175, 191, 249, 255, 356, 361], "gist": [177, 251, 357], "joferkington": [177, 251, 357], "d95101a61a02e0ba63e5": [177, 251, 357], "joe": [177, 251, 357], "kington": [177, 251, 357], "gridsiz": [177, 251, 357], "400": [177, 251, 357], "1e7": [177, 251, 357], "coord": [177, 251, 357], "nx": [177, 251, 357], "ny": [177, 251, 357], "xmin": [177, 251, 357], "xmax": [177, 251, 357], "ymin": [177, 251, 357], "ymax": [177, 251, 357], "weigh": [177, 251, 357], "w_i": [177, 251, 357], "sampled_dens": [177, 251, 357], "applicationss": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "logp": [178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 255, 358, 361], "abstract": [178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 255, 358, 361], "kxn": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "OR": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "pinv": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "nxk": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "p1": [178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 255, 358, 361], "p2": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "handle_neg": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "unitari": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "entropi": [178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 256, 358, 362], "m0": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "p0": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "kl": [178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 256, 358, 362], "diverg": [178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 256, 358, 362], "mgv_dkl": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "c0": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "joint": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "kalman": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "posterior": [178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 255, 358, 361], "inva": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "transit": [178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 255, 358, 361], "aca": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "inv": [178, 179, 180, 181, 182, 183, 184, 185, 186, 358], "instal": [187, 252, 359], "sklearn": [187, 252, 359], "scikit": [187, 198, 252, 262, 359, 365], "stabl": [187, 191, 252, 255, 359, 361], "net": [187, 252, 359], "devel": [187, 252, 359], "hessian": [187, 197, 252, 261, 359, 364], "jacobian": [187, 197, 252, 261, 359, 364], "overflow": [187, 191, 252, 255, 359, 361], "penal": [187, 252, 359], "solver": [187, 197, 252, 261, 359, 364], "link": [187, 252, 359], "explicitli": [187, 252, 359], "n_observ": [187, 252, 359], "n_featur": [187, 252, 359], "l2penalti": [187, 252, 359], "mu0": [187, 191, 198, 252, 255, 262, 359, 361, 365], "b0": [187, 252, 359], "descent": [187, 252, 359], "nxval": [187, 252, 359], "roc": [187, 252, 359], "mu_hat": [187, 252, 359], "b_hat": [187, 252, 359], "tfrac": [187, 252, 359], "1920929e": [187, 252, 359], "07": [187, 252, 359], "jac": [187, 197, 252, 261, 359, 364], "climb": [189, 360], "pargrid": [189, 360], "hyperparamet": [189, 360], "qualiti": [189, 360], "par": [189, 360], "allresult": [189, 360], "hidden": [191, 255, 361], "markov": [191, 255, 361], "loga": [191, 255, 361], "logb": [191, 255, 361], "param": [191, 197, 255, 261, 361, 364], "p01": [191, 255, 361], "p10": [191, 255, 361], "mu1": [191, 198, 255, 262, 361, 365], "maxim": [191, 255, 361], "latent": [191, 255, 361], "em": [191, 255, 361], "asymmetr": [191, 255, 361], "viterbi_algorithm": [191, 255, 361], "nstate": [191, 255, 361], "emiss": [191, 255, 361], "probabilti": [191, 255, 361], "maxit": [191, 196, 255, 260, 361, 363], "overal": [191, 255, 361], "baum": [191, 255, 361], "welch": [191, 255, 361], "algoirthm": [191, 255, 361], "n_timepoint": [191, 255, 361], "n_hidden_st": [191, 255, 361], "n_observable_st": [191, 255, 361], "pr": [191, 255, 361], "n_state": [191, 255, 361], "n_hid": [191, 255, 361], "converg": [191, 196, 197, 255, 260, 261, 361, 363, 364], "0001": [191, 255, 361], "minit": [191, 255, 361], "x0hat": [191, 255, 361], "llikelihood": [191, 255, 361], "tranisit": [191, 255, 361], "go": [191, 255, 361], "diffus": [191, 255, 361], "quadratur": [191, 255, 361], "\u03bb": [191, 255, 361], "cox": [191, 255, 361], "a\u00b2x\u00b2": [191, 255, 361], "2abx": [191, 255, 361], "b\u00b2": [191, 255, 361], "tm": [191, 255, 361], "evolv": [191, 255, 361], "px": [191, 255, 361], "concern": [192, 256, 362], "dkl": [192, 256, 362], "nat": [192, 256, 362], "shannon": [192, 256, 362], "minp": [192, 256, 362], "mayb": [192, 256, 362], "extrapol": [192, 256, 362], "mont": [196, 260, 363], "carlo": [196, 260, 363], "simplicit": [196, 260, 363], "slowli": [196, 260, 363], "ex": [196, 260, 363], "ask": [196, 215, 260, 363, 375], "exx": [196, 260, 363], "runtimeerror": [197, 261, 364], "distinguish": [197, 261, 364], "hess": [197, 261, 364], "printerror": [197, 261, 364], "failthrough": [197, 261, 364], "simplex_onli": [197, 261, 364], "dontus": [197, 261, 364], "maxfev": [197, 261, 364], "maxgev": [197, 261, 364], "retri": [197, 261, 364], "few": [197, 261, 364], "doesn": [197, 215, 261, 364, 375], "unresolv": [197, 261, 364], "upon": [197, 261, 364], "robus": [197, 261, 364], "ultim": [197, 261, 364], "nelder": [197, 261, 364], "mead": [197, 261, 364], "simplex": [197, 261, 364], "provided": [197, 261, 364], "simple_onli": [197, 261, 364], "dure": [197, 261, 364], "toi": [198, 217, 262, 365, 377], "presum": [198, 215, 262, 365, 375], "mistur": [198, 262, 365], "pr0": [198, 262, 365], "obsrev": [198, 262, 365], "belong": [198, 262, 365], "pr1": [198, 262, 365], "burst": [199, 263, 366], "refractori": [199, 263, 366], "mainli": [199, 263, 366], "isi": [199, 263, 366], "st": [199, 263, 366], "py": [201, 265, 367], "wilson": [201, 265, 367], "pid": [201, 265, 367], "pn": [201, 265, 367], "nonparametr": [201, 265, 367], "societi": [201, 265, 367], "methodolog": [201, 265, 367], "1995": [201, 265, 367], "289": [201, 265, 367], "_____________________________________________________________________________": [201, 265, 367], "tom": [201, 265, 367], "nichol": [201, 265, 367], "02": [201, 265, 367], "2007": [201, 265, 367], "cvid": [201, 265, 367], "cvn": [201, 265, 367], "pvalue_dictionari": [201, 265, 367], "test_popul": [201, 265, 367], "null_popul": [201, 265, 367], "cure": [201, 265, 367], "suffici": [201, 265, 367], "popa": [201, 265, 367], "popb": [201, 265, 367], "na": [201, 265, 367], "nb": [201, 265, 367], "task": [202, 266, 368], "constrain": [202, 266, 368], "lamb": [202, 266, 368], "dc": [202, 266, 368], "mx": [202, 266, 368], "7433921782255195601e": [0, 211, 371], "returntyp": [0, 211, 371], "641747557046326023": [0, 211, 371], "fist": [0, 211, 371], "factori": [0, 211, 371], "secretli": [213, 373], "hdf": [213, 373], "squeez": [213, 373], "detectstr": [213, 373], "detectscalar": [213, 373], "unpack": [213, 373], "subpath": [213, 373], "sep": [213, 214, 373, 374], "hfdf5": [213, 373], "outbut": [213, 373], "tabwidth": [214, 374], "suffix": [214, 374], "newlin": [214, 374], "columnd": [214, 374], "weird": [214, 374], "collat": [214, 374], "decim": [214, 374], "prec": [214, 374], "shortest": [214, 374], "viabl": [214, 374], "notat": [214, 374], "exp_digit": [214, 374], "separtor": [214, 374], "4f": [214, 374], "ncol": [214, 374], "1265665": [214, 374], "filepath": [215, 375], "436198": [215, 375], "ye": [215, 375], "raw_input": [215, 375], "3041986": [215, 375], "apt": [215, 375], "hit": [215, 375], "enter": [215, 217, 375, 377], "yymmdd": [216, 376], "d_": [216, 376], "doprint": [216, 376], "5849800": [216, 376], "elaps": [216, 376], "timestamp": [216, 376], "varnam": [217, 377], "someth": [217, 377], "kw": [217, 377], "prompt": [217, 377], "matlabpath": [217, 377], "concept": [217, 377], "dector": [217, 377], "extend": [217, 377], "emit": [217, 377], "infix": [217, 377], "foo": [217, 377], "pip": [217, 377], "krg": [217, 377], "matfil": [217, 377], "matfilecach": [217, 377], "ext": [217, 377], "png": [217, 377], "dirnam": [217, 377], "944536": [217, 377], "member": [217, 377], "449560": [217, 377], "1175208": [217, 377], "eleg": [217, 377], "camelcas": [217, 377], "camel": [217, 377], "4303492": [217, 377], "underscor": [217, 377], "lost": [217, 377], "synonym": [217, 377], "neurotool": [25, 31, 35, 218], "rbm": [37, 48, 95, 106], "linenois": 220, "morlet_coher": 220, "signalnum": 220, "handler": [220, 230], "action": [220, 230], "sig_dfl": [220, 230], "sig_ign": [220, 230], "getsign": [220, 230], "notic": [220, 230], "interrupt": [220, 230], "stack": [220, 230], "pthread_sigmask": 220, "fetch": 220, "sigpend": 220, "pend": 220, "deliveri": 220, "sigwait": 220, "sigset": 220, "suspend": 220, "valid_sign": 220, "intenum": 220, "itimererror": 220, "itimer_error": 220, "sigmask": 220, "sig_block": 220, "sig_unblock": 220, "sig_setmask": 220, "sighup": 220, "sigint": 220, "sigquit": 220, "sigil": 220, "sigtrap": 220, "sigabrt": 220, "sigiot": 220, "sigbu": 220, "sigfp": 220, "sigkil": 220, "sigusr1": 220, "sigsegv": 220, "sigusr2": 220, "sigpip": 220, "sigalrm": 220, "sigterm": 220, "sigchld": 220, "sigcld": 220, "sigcont": 220, "sigstop": 220, "sigtstp": 220, "sigttin": 220, "sigttou": 220, "sigurg": 220, "sigxcpu": 220, "sigxfsz": 220, "sigvtalrm": 220, "sigprof": 220, "sigwinch": 220, "sigio": 220, "sigpol": 220, "sigpwr": 220, "sigsi": 220, "sigrtmin": 220, "sigrtmax": 220, "struct_siginfo": 220, "sigwaitinfo": 220, "sigtimedwait": 220, "si_signo": 220, "si_cod": 220, "si_errno": 220, "si_pid": 220, "si_uid": 220, "si_statu": 220, "si_band": 220, "n_field": 220, "n_sequence_field": 220, "n_unnamed_field": 220, "errno": 220, "exit": 220, "spatialpsd": 231, "wave_parametric_model": 231}, "objects": {"": [[0, 0, 0, "-", "functions"], [1, 0, 0, "-", "getfftw"], [2, 0, 0, "-", "gpu"], [20, 0, 0, "-", "graphics"], [26, 0, 0, "-", "jobs"], [33, 0, 0, "-", "linalg"], [37, 0, 0, "-", "models"], [273, 0, 0, "-", "neurotools"], [218, 0, 0, "-", "nlab"], [220, 0, 0, "-", "signal"], [231, 0, 0, "-", "spatial"]], "functions": [[0, 1, 1, "", "dsigmoid"], [0, 1, 1, "", "f"], [0, 1, 1, "", "f1"], [0, 1, 1, "", "f2"], [0, 1, 1, "", "g"], [0, 1, 1, "", "inversesigmoid"], [0, 1, 1, "", "log_factorial"], [0, 1, 1, "", "npdf"], [0, 1, 1, "", "sexp"], [0, 1, 1, "", "sigmoid"], [0, 1, 1, "", "slog"]], "getfftw": [[1, 1, 1, "", "ftwthr"]], "gpu": [[3, 0, 0, "-", "cl"], [7, 0, 0, "-", "cpu"], [9, 0, 0, "-", "cu"]], "gpu.cl": [[3, 1, 1, "", "missing"]], "gpu.cpu": [[8, 0, 0, "-", "util"]], "gpu.cpu.util": [[8, 1, 1, "", "cmap"], [8, 1, 1, "", "compose"], [8, 1, 1, "", "corr"], [8, 1, 1, "", "cov"], [8, 1, 1, "", "cut"], [8, 1, 1, "", "document"], [8, 1, 1, "", "dot"], [8, 1, 1, "", "elem"], [8, 1, 1, "", "fancy"], [8, 1, 1, "", "flat"], [8, 1, 1, "", "idivup"], [8, 1, 1, "", "ldif"], [8, 1, 1, "", "ldif2"], [8, 1, 1, "", "ldiv"], [8, 1, 1, "", "ldiv2"], [8, 1, 1, "", "length"], [8, 1, 1, "", "lmul"], [8, 1, 1, "", "lmul2"], [8, 1, 1, "", "lpow"], [8, 1, 1, "", "lpow2"], [8, 1, 1, "", "lsum"], [8, 1, 1, "", "lsum2"], [8, 1, 1, "", "mdif"], [8, 1, 1, "", "mdiv"], [8, 1, 1, "", "mean"], [8, 1, 1, "", "mmap"], [8, 1, 1, "", "mmean"], [8, 1, 1, "", "mmul"], [8, 1, 1, "", "mpow"], [8, 1, 1, "", "mstd"], [8, 1, 1, "", "msum"], [8, 1, 1, "", "mu"], [8, 1, 1, "", "mvar"], [8, 1, 1, "", "norm"], [8, 1, 1, "", "rnorm"], [8, 1, 1, "", "scale"], [8, 1, 1, "", "sem"], [8, 1, 1, "", "shift"], [8, 1, 1, "", "sigma"], [8, 1, 1, "", "sstd"], [8, 1, 1, "", "std"], [8, 1, 1, "", "svar"], [8, 1, 1, "", "var"]], "gpu.cu": [[10, 0, 0, "-", "convolution"], [11, 0, 0, "-", "device"], [12, 0, 0, "-", "function"], [13, 0, 0, "-", "gpufun"], [14, 0, 0, "-", "graph"], [15, 0, 0, "-", "logic"], [17, 0, 0, "-", "plot"], [18, 0, 0, "-", "sequence"]], "gpu.cu.convolution": [[10, 1, 1, "", "gpuboxconv"], [10, 1, 1, "", "gpuboxconv_core"]], "gpu.cu.device": [[11, 1, 1, "", "card_info"], [11, 1, 1, "", "estimateBlocks"], [11, 1, 1, "", "estimateLoop"], [11, 1, 1, "", "estimateThreadsPerBlock"], [11, 1, 1, "", "missing"]], "gpu.cu.function": [[12, 1, 1, "", "cpu"], [12, 1, 1, "", "expsub"], [12, 1, 1, "", "ezkern"], [12, 1, 1, "", "format"], [12, 1, 1, "", "gpubin"], [12, 1, 1, "", "gpubinaryeq"], [12, 1, 1, "", "gpufloat"], [12, 1, 1, "", "gpufloatmat"], [12, 1, 1, "", "gpufloatred"], [12, 1, 1, "", "gpuint"], [12, 1, 1, "", "gpuintmap"], [12, 1, 1, "", "gpuintmat"], [12, 1, 1, "", "gpuintred"], [12, 1, 1, "", "gpumap"], [12, 1, 1, "", "gpumapeq"], [12, 1, 1, "", "gpupointer"], [12, 1, 1, "", "gpuscalar"], [12, 1, 1, "", "guessGPUType"], [12, 1, 1, "", "kernel"], [12, 1, 1, "", "printKernel"], [12, 1, 1, "", "toGPUType"]], "gpu.cu.gpufun": [[13, 1, 1, "", "gpuhill"], [13, 1, 1, "", "gpulcomb"], [13, 1, 1, "", "gpulogpdf"], [13, 1, 1, "", "gpumean"], [13, 1, 1, "", "gpunpdf"], [13, 1, 1, "", "gpurandexp"], [13, 1, 1, "", "gpurandf"], [13, 1, 1, "", "gpuuniform"]], "gpu.cu.graph": [[14, 1, 1, "", "connect_gaussian"], [14, 1, 1, "", "random_point_sheet"], [14, 1, 1, "", "spherepoints"], [14, 1, 1, "", "uniform_point_sheet"]], "gpu.cu.logic": [[15, 1, 1, "", "gpuand"], [15, 1, 1, "", "gpueq"], [15, 1, 1, "", "gpugt"], [15, 1, 1, "", "gpugteq"], [15, 1, 1, "", "gpuhzero"], [15, 1, 1, "", "gpult"], [15, 1, 1, "", "gpulteq"], [15, 1, 1, "", "gpuneq"], [15, 1, 1, "", "gpunor"], [15, 1, 1, "", "gpunot"], [15, 1, 1, "", "gpurange"], [15, 1, 1, "", "gpuyes"]], "gpu.cu.plot": [[17, 1, 1, "", "ElementwiseKernel"], [17, 1, 1, "", "gpubarlinedata"], [17, 1, 1, "", "gpuhistogram"], [17, 1, 1, "", "missing"], [17, 1, 1, "", "sebarline"], [17, 1, 1, "", "sebarline2"]], "gpu.cu.sequence": [[18, 1, 1, "", "FrameEater"], [18, 1, 1, "", "GPUAutometric"], [18, 1, 1, "", "GPUDotmetric"], [18, 1, 1, "", "GPUMagmetric"], [18, 1, 1, "", "GPUPointAutoDistance"], [18, 1, 1, "", "GPUSequenceAutoDetect"], [18, 1, 1, "", "deltamag"], [18, 1, 1, "", "fitgaussbimodal"], [18, 1, 1, "", "fitgausstrimodal"], [18, 1, 1, "", "gpuderivative"], [18, 1, 1, "", "gpulognpdf"], [18, 1, 1, "", "gpunpdf"], [18, 1, 1, "", "gpusmooth"], [18, 1, 1, "", "gpusubsetgfit"], [18, 1, 1, "", "gpusubsetmean"], [18, 1, 1, "", "gputhing"], [18, 1, 1, "", "mulmag"], [18, 1, 1, "", "summag"]], "graphics": [[21, 0, 0, "-", "color"], [22, 0, 0, "-", "image"], [23, 0, 0, "-", "matplotlib"], [24, 0, 0, "-", "plot"], [25, 0, 0, "-", "pygame"]], "graphics.color": [[21, 1, 1, "", "RGBtoHCL"], [21, 1, 1, "", "bit16_RGB_to_tuple"], [21, 1, 1, "", "bit16_print_color"], [21, 1, 1, "", "circularly_smooth_colormap"], [21, 1, 1, "", "code_to_16bit"], [21, 1, 1, "", "color_boxplot"], [21, 1, 1, "", "complexHLArr2RGB"], [21, 1, 1, "", "darkhues"], [21, 1, 1, "", "enumerate_fast_colors"], [21, 1, 1, "", "hcl2rgb"], [21, 1, 1, "", "hex2rgb"], [21, 1, 1, "", "hex_pack_BGR"], [21, 1, 1, "", "hsv2rgb"], [21, 1, 1, "", "hue_angle"], [21, 1, 1, "", "isoluminance1"], [21, 1, 1, "", "isoluminance2"], [21, 1, 1, "", "isoluminance3"], [21, 1, 1, "", "isoluminance4"], [21, 1, 1, "", "lighthues"], [21, 1, 1, "", "lightness"], [21, 1, 1, "", "luminance_matrix"], [21, 1, 1, "", "match_luminance"], [21, 1, 1, "", "medhues"], [21, 1, 1, "", "radl2rgb"], [21, 1, 1, "", "radl2rgbLUT"], [21, 1, 1, "", "rgb2hex"], [21, 1, 1, "", "rotate"], [21, 1, 1, "", "show_complete_fast_pallet"], [21, 1, 1, "", "show_complete_fastest_pallet"], [21, 1, 1, "", "show_fast_pallet"], [21, 1, 1, "", "show_hex_pallet"], [21, 1, 1, "", "tuple_to_bit16"], [21, 1, 1, "", "tuple_to_bit24"]], "graphics.image": [[22, 1, 1, "", "mean_center"], [22, 1, 1, "", "median_center"], [22, 1, 1, "", "unitize"], [22, 1, 1, "", "visualize_derivatives"]], "graphics.matplotlib": [[23, 1, 1, "", "draw_array"], [23, 1, 1, "", "hide_toolbar"], [23, 1, 1, "", "start"]], "graphics.plot": [[24, 1, 1, "", "Gaussian2D_covellipse"], [24, 2, 1, "", "HandlerSquare"], [24, 1, 1, "", "addspikes"], [24, 1, 1, "", "adjust_axis_height_pixels"], [24, 1, 1, "", "adjust_xlabel_space"], [24, 1, 1, "", "adjust_ylabel_space"], [24, 1, 1, "", "adjustmap"], [24, 1, 1, "", "animate_complex"], [24, 1, 1, "", "arrow_between"], [24, 1, 1, "", "axvbands"], [24, 1, 1, "", "axvstripe"], [24, 1, 1, "", "barcompare"], [24, 1, 1, "", "base_legend"], [24, 1, 1, "", "border_width"], [24, 1, 1, "", "boxplot_significance"], [24, 1, 1, "", "broken_step"], [24, 1, 1, "", "ceil_to_precision"], [24, 1, 1, "", "centers"], [24, 1, 1, "", "clean_y_range"], [24, 1, 1, "", "cleartop"], [24, 1, 1, "", "colored_boxplot"], [24, 1, 1, "", "complex_axis"], [24, 1, 1, "", "covariance_crosshairs"], [24, 1, 1, "", "darken"], [24, 1, 1, "", "domask"], [24, 1, 1, "", "draw_circle"], [24, 1, 1, "", "expand_axis_x"], [24, 1, 1, "", "expand_axis_y"], [24, 1, 1, "", "expand_y_range"], [24, 1, 1, "", "figurebox"], [24, 1, 1, "", "flathist"], [24, 1, 1, "", "floor_to_precision"], [24, 1, 1, "", "force_aspect"], [24, 1, 1, "", "fsize"], [24, 1, 1, "", "fudgex"], [24, 1, 1, "", "fudgexy"], [24, 1, 1, "", "fudgey"], [24, 1, 1, "", "get_aspect"], [24, 1, 1, "", "get_ax_pixel"], [24, 1, 1, "", "get_ax_pixel_ratio"], [24, 1, 1, "", "get_ax_size"], [24, 1, 1, "", "get_bbox"], [24, 1, 1, "", "good_colorbar"], [24, 1, 1, "", "hsigbar"], [24, 1, 1, "", "inhibition_arrow"], [24, 1, 1, "", "label"], [24, 1, 1, "", "left_legend"], [24, 1, 1, "", "lighten"], [24, 1, 1, "", "match_image_aspect"], [24, 1, 1, "", "mock_legend"], [24, 1, 1, "", "more_xticks"], [24, 1, 1, "", "more_yticks"], [24, 1, 1, "", "nice_legend"], [24, 1, 1, "", "nicebp"], [24, 1, 1, "", "nicex"], [24, 1, 1, "", "nicexy"], [24, 1, 1, "", "nicey"], [24, 1, 1, "", "noaxis"], [24, 1, 1, "", "noclip"], [24, 1, 1, "", "nolabels"], [24, 1, 1, "", "notick"], [24, 1, 1, "", "nox"], [24, 1, 1, "", "noxlabels"], [24, 1, 1, "", "noxyaxes"], [24, 1, 1, "", "noy"], [24, 1, 1, "", "noylabels"], [24, 1, 1, "", "nudge_axis_baseline"], [24, 1, 1, "", "nudge_axis_left"], [24, 1, 1, "", "nudge_axis_x"], [24, 1, 1, "", "nudge_axis_y"], [24, 1, 1, "", "nudge_axis_y_pixels"], [24, 1, 1, "", "pikeplot"], [24, 1, 1, "", "pixels_to_xfigureunits"], [24, 1, 1, "", "pixels_to_xunits"], [24, 1, 1, "", "pixels_to_yfigureunits"], [24, 1, 1, "", "pixels_to_yunits"], [24, 1, 1, "", "plotCWT"], [24, 1, 1, "", "plotWTPhase"], [24, 1, 1, "", "plotWTPhaseFig"], [24, 1, 1, "", "plot_complex"], [24, 1, 1, "", "plotz"], [24, 1, 1, "", "positivex"], [24, 1, 1, "", "positivexy"], [24, 1, 1, "", "positivey"], [24, 1, 1, "", "px2x"], [24, 1, 1, "", "px2y"], [24, 1, 1, "", "rangeover"], [24, 1, 1, "", "rangeto"], [24, 1, 1, "", "restore_limits"], [24, 1, 1, "", "right_legend"], [24, 1, 1, "", "rightaxis"], [24, 1, 1, "", "righty"], [24, 1, 1, "", "round_to_precision"], [24, 1, 1, "", "save_limits"], [24, 1, 1, "", "savefigure"], [24, 1, 1, "", "shade_edges"], [24, 1, 1, "", "shellmean"], [24, 1, 1, "", "shellplot"], [24, 1, 1, "", "sigbar"], [24, 1, 1, "", "simple_arrow"], [24, 1, 1, "", "simpleaxis"], [24, 1, 1, "", "simpleraxis"], [24, 1, 1, "", "simplerright"], [24, 1, 1, "", "splitz"], [24, 1, 1, "", "stderrplot"], [24, 1, 1, "", "subfigurelabel"], [24, 1, 1, "", "trendline"], [24, 1, 1, "", "unit_crosshairs"], [24, 1, 1, "", "unitaxes"], [24, 1, 1, "", "unitx"], [24, 1, 1, "", "unity"], [24, 1, 1, "", "widths_to_centers"], [24, 1, 1, "", "widths_to_edges"], [24, 1, 1, "", "wtpshow"], [24, 1, 1, "", "xbartext"], [24, 1, 1, "", "xfigureunits_to_pixels"], [24, 1, 1, "", "xin"], [24, 1, 1, "", "xscalebar"], [24, 1, 1, "", "xticklen"], [24, 1, 1, "", "xtickpad"], [24, 1, 1, "", "xunits_to_pixels"], [24, 1, 1, "", "xylim"], [24, 1, 1, "", "ybartext"], [24, 1, 1, "", "yfigureunits_to_pixels"], [24, 1, 1, "", "yin"], [24, 1, 1, "", "yscalebar"], [24, 1, 1, "", "yticklen"], [24, 1, 1, "", "ytickpad"], [24, 1, 1, "", "yunits_to_pixels"], [24, 1, 1, "", "zerohline"], [24, 1, 1, "", "zerovline"], [24, 1, 1, "", "zoombox"]], "graphics.plot.HandlerSquare": [[24, 3, 1, "", "create_artists"]], "graphics.pygame": [[25, 1, 1, "", "draw_array"], [25, 1, 1, "", "enable_vsync"], [25, 1, 1, "", "start"]], "jobs": [[27, 0, 0, "-", "cache"], [28, 0, 0, "-", "closure"], [30, 0, 0, "-", "filenames"], [31, 0, 0, "-", "initialize_system_cache"], [32, 0, 0, "-", "parallel"]], "jobs.cache": [[27, 1, 1, "", "base64hash"], [27, 1, 1, "", "base64hash2byte"], [27, 1, 1, "", "disk_cacher"], [27, 1, 1, "", "file_string_to_signature"], [27, 1, 1, "", "function_hash_no_subroutines"], [27, 1, 1, "", "function_hash_with_subroutines"], [27, 1, 1, "", "function_signature"], [27, 1, 1, "", "get_cache_path"], [27, 1, 1, "", "get_source"], [27, 1, 1, "", "hierarchical_cacher"], [27, 1, 1, "", "human_decode"], [27, 1, 1, "", "human_encode"], [27, 1, 1, "", "locate_cached"], [27, 1, 1, "", "read_cache_entry"], [27, 1, 1, "", "signature_to_file_string"], [27, 1, 1, "", "validate_for_matfile"], [27, 1, 1, "", "validate_for_numpy"]], "jobs.closure": [[28, 1, 1, "", "csv"], [28, 1, 1, "", "get_subroutines"], [28, 1, 1, "", "inspect_function_closure"], [28, 1, 1, "", "is_immutable"], [28, 1, 1, "", "is_probably_safe"], [28, 1, 1, "", "verify_function_closure"]], "jobs.filenames": [[30, 1, 1, "", "check_filename"], [30, 1, 1, "", "is_dangerous_filename"], [30, 1, 1, "", "validate_argument_signature"]], "jobs.initialize_system_cache": [[31, 1, 1, "", "cache_test"], [31, 1, 1, "", "du"], [31, 1, 1, "", "initialize_caches"], [31, 1, 1, "", "launch_cache_synchronizers"], [31, 1, 1, "", "purge_ram_cache"], [31, 1, 1, "", "purge_ssd_cache"], [31, 1, 1, "", "reset_ramdisk"]], "jobs.parallel": [[32, 1, 1, "", "close_pool"], [32, 1, 1, "", "eval_from_cached"], [32, 1, 1, "", "function_fingerprint"], [32, 1, 1, "", "parallel_cached_wrapper"], [32, 1, 1, "", "parallel_error_handling"], [32, 1, 1, "", "parallel_indirect_wrapper"], [32, 1, 1, "", "pararraymap"], [32, 1, 1, "", "parimap"], [32, 1, 1, "", "parmap"], [32, 1, 1, "", "parmap_dict"], [32, 1, 1, "", "reset_pool"]], "linalg": [[34, 0, 0, "-", "arguments"], [35, 0, 0, "-", "matrix"], [36, 0, 0, "-", "operators"]], "linalg.arguments": [[34, 1, 1, "", "ascolumn"], [34, 1, 1, "", "asrow"], [34, 1, 1, "", "assertcolumn"], [34, 1, 1, "", "assertfinite"], [34, 1, 1, "", "assertfinitereal"], [34, 1, 1, "", "assertreal"], [34, 1, 1, "", "assertrow"], [34, 1, 1, "", "assertshape"], [34, 1, 1, "", "assertsquare"], [34, 1, 1, "", "assertvector"], [34, 1, 1, "", "assquare"], [34, 1, 1, "", "asvector"], [34, 1, 1, "", "iscolumn"], [34, 1, 1, "", "isrow"], [34, 1, 1, "", "issquare"], [34, 1, 1, "", "scalar"]], "linalg.matrix": [[35, 1, 1, "", "Ldistance"], [35, 1, 1, "", "Llasso"], [35, 1, 1, "", "abserr"], [35, 1, 1, "", "autopredict"], [35, 1, 1, "", "cartesian_product"], [35, 1, 1, "", "check_covmat"], [35, 1, 1, "", "check_covmat_fast"], [35, 1, 1, "", "check_finite_real"], [35, 1, 1, "", "cholupdate"], [35, 1, 1, "", "cholupdate_eye"], [35, 1, 1, "", "cinv"], [35, 1, 1, "", "column"], [35, 1, 1, "", "csolve"], [35, 1, 1, "", "errmx"], [35, 1, 1, "", "kronsum"], [35, 1, 1, "", "laplace_kernel"], [35, 1, 1, "", "ldiv"], [35, 1, 1, "", "logdet"], [35, 1, 1, "", "match_covariance"], [35, 1, 1, "", "maxeig"], [35, 1, 1, "", "nearPDHigham"], [35, 1, 1, "", "nearPSDRebonatoJackel"], [35, 1, 1, "", "normedcovariance"], [35, 1, 1, "", "psd_eig"], [35, 1, 1, "", "qf"], [35, 1, 1, "", "rcond"], [35, 1, 1, "", "rdiv"], [35, 1, 1, "", "real_eig"], [35, 1, 1, "", "reglstsq"], [35, 1, 1, "", "rmatrix"], [35, 1, 1, "", "row"], [35, 1, 1, "", "rsolt"], [35, 1, 1, "", "rsolve"], [35, 1, 1, "", "selector_matrix"], [35, 1, 1, "", "solt"], [35, 1, 1, "", "top_v"], [35, 1, 1, "", "tril_elements"], [35, 1, 1, "", "triu_elements"], [35, 1, 1, "", "wheremax"], [35, 1, 1, "", "wheremin"]], "linalg.operators": [[36, 1, 1, "", "adjacency1D"], [36, 1, 1, "", "adjacency2D"], [36, 1, 1, "", "adjacency2D_circular"], [36, 1, 1, "", "adjacency2d_rotational"], [36, 1, 1, "", "circular1DblurOperator"], [36, 1, 1, "", "cosine_kernel"], [36, 1, 1, "", "covfrom"], [36, 1, 1, "", "delta"], [36, 1, 1, "", "differentiator"], [36, 1, 1, "", "diffuseFT1D"], [36, 1, 1, "", "flatcov"], [36, 1, 1, "", "gaussian1DblurOperator"], [36, 1, 1, "", "gaussian2DblurOperator"], [36, 1, 1, "", "integrator"], [36, 1, 1, "", "laplacian1D"], [36, 1, 1, "", "laplacian1D_circular"], [36, 1, 1, "", "laplacian2D"], [36, 1, 1, "", "laplacianFT1D"], [36, 1, 1, "", "log_cosine_basis"], [36, 1, 1, "", "make_cosine_basis"], [36, 1, 1, "", "oucov"], [36, 1, 1, "", "separable_guassian_blur"], [36, 1, 1, "", "wienerFT1D"]], "models": [[38, 0, 0, "-", "izh"], [39, 0, 0, "-", "lif"]], "models.izh": [[38, 1, 1, "", "du_izh"], [38, 1, 1, "", "dv_izh"], [38, 1, 1, "", "sim_izh"], [38, 1, 1, "", "update_izh"]], "models.lif": [[39, 1, 1, "", "euler_integrate_LIF"], [39, 1, 1, "", "exponential_integrate_LIF"], [39, 1, 1, "", "exponential_moving_average"]], "neurotools": [[274, 0, 0, "-", "graphics"], [284, 0, 0, "-", "jobs"], [291, 0, 0, "-", "linalg"], [295, 0, 0, "-", "nlab"], [296, 0, 0, "-", "obsolete"], [329, 0, 0, "-", "signal"], [337, 0, 0, "-", "spatial"], [349, 0, 0, "-", "spikes"], [352, 0, 0, "-", "stats"], [369, 0, 0, "-", "util"]], "neurotools.graphics": [[275, 0, 0, "-", "color"], [276, 0, 0, "-", "colormaps"], [277, 0, 0, "-", "dendron"], [278, 0, 0, "-", "fabio_maps"], [279, 0, 0, "-", "image"], [280, 0, 0, "-", "matplotlib"], [281, 0, 0, "-", "plot"], [282, 0, 0, "-", "pygame"]], "neurotools.graphics.color": [[275, 1, 1, "", "RGBtoHCL"], [275, 1, 1, "", "bit16_RGB_to_tuple"], [275, 1, 1, "", "bit16_print_color"], [275, 1, 1, "", "circularly_smooth_colormap"], [275, 1, 1, "", "code_to_16bit"], [275, 1, 1, "", "color_boxplot"], [275, 1, 1, "", "complexHLArr2RGB"], [275, 1, 1, "", "darkhues"], [275, 1, 1, "", "enumerate_fast_colors"], [275, 1, 1, "", "hcl2rgb"], [275, 1, 1, "", "hex2rgb"], [275, 1, 1, "", "hex_pack_BGR"], [275, 1, 1, "", "hsv2rgb"], [275, 1, 1, "", "hue_angle"], [275, 1, 1, "", "isoluminance1"], [275, 1, 1, "", "isoluminance2"], [275, 1, 1, "", "isoluminance3"], [275, 1, 1, "", "isoluminance4"], [275, 1, 1, "", "lighthues"], [275, 1, 1, "", "lightness"], [275, 1, 1, "", "luminance_matrix"], [275, 1, 1, "", "match_luminance"], [275, 1, 1, "", "medhues"], [275, 1, 1, "", "radl2rgb"], [275, 1, 1, "", "radl2rgbLUT"], [275, 1, 1, "", "rgb2hex"], [275, 1, 1, "", "rotate"], [275, 1, 1, "", "show_complete_fast_pallet"], [275, 1, 1, "", "show_complete_fastest_pallet"], [275, 1, 1, "", "show_fast_pallet"], [275, 1, 1, "", "show_hex_pallet"], [275, 1, 1, "", "tuple_to_bit16"], [275, 1, 1, "", "tuple_to_bit24"]], "neurotools.graphics.colormaps": [[276, 1, 1, "", "test_colormaps"]], "neurotools.graphics.dendron": [[277, 1, 1, "", "count_nodes"], [277, 1, 1, "", "get_depth"], [277, 1, 1, "", "inorder_traversal"], [277, 1, 1, "", "list_like"], [277, 1, 1, "", "plot_brackets"], [277, 1, 1, "", "plot_brackets_polar"]], "neurotools.graphics.image": [[279, 1, 1, "", "mean_center"], [279, 1, 1, "", "median_center"], [279, 1, 1, "", "unitize"], [279, 1, 1, "", "visualize_derivatives"]], "neurotools.graphics.matplotlib": [[280, 1, 1, "", "draw_array"], [280, 1, 1, "", "hide_toolbar"], [280, 1, 1, "", "start"]], "neurotools.graphics.plot": [[281, 1, 1, "", "Gaussian2D_covellipse"], [281, 2, 1, "", "HandlerSquare"], [281, 1, 1, "", "addspikes"], [281, 1, 1, "", "adjust_axis_height_pixels"], [281, 1, 1, "", "adjust_xlabel_space"], [281, 1, 1, "", "adjust_ylabel_space"], [281, 1, 1, "", "adjustmap"], [281, 1, 1, "", "animate_complex"], [281, 1, 1, "", "arrow_between"], [281, 1, 1, "", "axvbands"], [281, 1, 1, "", "axvstripe"], [281, 1, 1, "", "barcompare"], [281, 1, 1, "", "base_legend"], [281, 1, 1, "", "border_width"], [281, 1, 1, "", "boxplot_significance"], [281, 1, 1, "", "broken_step"], [281, 1, 1, "", "ceil_to_precision"], [281, 1, 1, "", "centers"], [281, 1, 1, "", "clean_y_range"], [281, 1, 1, "", "cleartop"], [281, 1, 1, "", "colored_boxplot"], [281, 1, 1, "", "complex_axis"], [281, 1, 1, "", "covariance_crosshairs"], [281, 1, 1, "", "darken"], [281, 1, 1, "", "domask"], [281, 1, 1, "", "draw_circle"], [281, 1, 1, "", "expand_axis_x"], [281, 1, 1, "", "expand_axis_y"], [281, 1, 1, "", "expand_y_range"], [281, 1, 1, "", "figurebox"], [281, 1, 1, "", "flathist"], [281, 1, 1, "", "floor_to_precision"], [281, 1, 1, "", "force_aspect"], [281, 1, 1, "", "fsize"], [281, 1, 1, "", "fudgex"], [281, 1, 1, "", "fudgexy"], [281, 1, 1, "", "fudgey"], [281, 1, 1, "", "get_aspect"], [281, 1, 1, "", "get_ax_pixel"], [281, 1, 1, "", "get_ax_pixel_ratio"], [281, 1, 1, "", "get_ax_size"], [281, 1, 1, "", "get_bbox"], [281, 1, 1, "", "good_colorbar"], [281, 1, 1, "", "hsigbar"], [281, 1, 1, "", "inhibition_arrow"], [281, 1, 1, "", "label"], [281, 1, 1, "", "left_legend"], [281, 1, 1, "", "lighten"], [281, 1, 1, "", "match_image_aspect"], [281, 1, 1, "", "mock_legend"], [281, 1, 1, "", "more_xticks"], [281, 1, 1, "", "more_yticks"], [281, 1, 1, "", "nice_legend"], [281, 1, 1, "", "nicebp"], [281, 1, 1, "", "nicex"], [281, 1, 1, "", "nicexy"], [281, 1, 1, "", "nicey"], [281, 1, 1, "", "noaxis"], [281, 1, 1, "", "noclip"], [281, 1, 1, "", "nolabels"], [281, 1, 1, "", "notick"], [281, 1, 1, "", "nox"], [281, 1, 1, "", "noxlabels"], [281, 1, 1, "", "noxyaxes"], [281, 1, 1, "", "noy"], [281, 1, 1, "", "noylabels"], [281, 1, 1, "", "nudge_axis_baseline"], [281, 1, 1, "", "nudge_axis_left"], [281, 1, 1, "", "nudge_axis_x"], [281, 1, 1, "", "nudge_axis_y"], [281, 1, 1, "", "nudge_axis_y_pixels"], [281, 1, 1, "", "pikeplot"], [281, 1, 1, "", "pixels_to_xfigureunits"], [281, 1, 1, "", "pixels_to_xunits"], [281, 1, 1, "", "pixels_to_yfigureunits"], [281, 1, 1, "", "pixels_to_yunits"], [281, 1, 1, "", "plotCWT"], [281, 1, 1, "", "plotWTPhase"], [281, 1, 1, "", "plotWTPhaseFig"], [281, 1, 1, "", "plot_complex"], [281, 1, 1, "", "plotz"], [281, 1, 1, "", "positivex"], [281, 1, 1, "", "positivexy"], [281, 1, 1, "", "positivey"], [281, 1, 1, "", "px2x"], [281, 1, 1, "", "px2y"], [281, 1, 1, "", "rangeover"], [281, 1, 1, "", "rangeto"], [281, 1, 1, "", "restore_limits"], [281, 1, 1, "", "right_legend"], [281, 1, 1, "", "rightaxis"], [281, 1, 1, "", "righty"], [281, 1, 1, "", "round_to_precision"], [281, 1, 1, "", "save_limits"], [281, 1, 1, "", "savefigure"], [281, 1, 1, "", "shade_edges"], [281, 1, 1, "", "shellmean"], [281, 1, 1, "", "shellplot"], [281, 1, 1, "", "sigbar"], [281, 1, 1, "", "simple_arrow"], [281, 1, 1, "", "simpleaxis"], [281, 1, 1, "", "simpleraxis"], [281, 1, 1, "", "simplerright"], [281, 1, 1, "", "splitz"], [281, 1, 1, "", "stderrplot"], [281, 1, 1, "", "subfigurelabel"], [281, 1, 1, "", "trendline"], [281, 1, 1, "", "unit_crosshairs"], [281, 1, 1, "", "unitaxes"], [281, 1, 1, "", "unitx"], [281, 1, 1, "", "unity"], [281, 1, 1, "", "widths_to_centers"], [281, 1, 1, "", "widths_to_edges"], [281, 1, 1, "", "wtpshow"], [281, 1, 1, "", "xbartext"], [281, 1, 1, "", "xfigureunits_to_pixels"], [281, 1, 1, "", "xin"], [281, 1, 1, "", "xscalebar"], [281, 1, 1, "", "xticklen"], [281, 1, 1, "", "xtickpad"], [281, 1, 1, "", "xunits_to_pixels"], [281, 1, 1, "", "xylim"], [281, 1, 1, "", "ybartext"], [281, 1, 1, "", "yfigureunits_to_pixels"], [281, 1, 1, "", "yin"], [281, 1, 1, "", "yscalebar"], [281, 1, 1, "", "yticklen"], [281, 1, 1, "", "ytickpad"], [281, 1, 1, "", "yunits_to_pixels"], [281, 1, 1, "", "zerohline"], [281, 1, 1, "", "zerovline"], [281, 1, 1, "", "zoombox"]], "neurotools.graphics.plot.HandlerSquare": [[281, 3, 1, "", "create_artists"]], "neurotools.graphics.pygame": [[282, 1, 1, "", "draw_array"], [282, 1, 1, "", "enable_vsync"], [282, 1, 1, "", "start"]], "neurotools.jobs": [[285, 0, 0, "-", "cache"], [286, 0, 0, "-", "closure"], [287, 0, 0, "-", "filenames"], [288, 0, 0, "-", "initialize_system_cache"], [289, 0, 0, "-", "ndecorator"], [290, 0, 0, "-", "parallel"]], "neurotools.jobs.cache": [[285, 1, 1, "", "base64hash"], [285, 1, 1, "", "base64hash2byte"], [285, 1, 1, "", "disk_cacher"], [285, 1, 1, "", "file_string_to_signature"], [285, 1, 1, "", "function_hash_no_subroutines"], [285, 1, 1, "", "function_hash_with_subroutines"], [285, 1, 1, "", "function_signature"], [285, 1, 1, "", "get_cache_path"], [285, 1, 1, "", "get_source"], [285, 1, 1, "", "hierarchical_cacher"], [285, 1, 1, "", "human_decode"], [285, 1, 1, "", "human_encode"], [285, 1, 1, "", "locate_cached"], [285, 1, 1, "", "read_cache_entry"], [285, 1, 1, "", "signature_to_file_string"], [285, 1, 1, "", "validate_for_matfile"], [285, 1, 1, "", "validate_for_numpy"]], "neurotools.jobs.closure": [[286, 1, 1, "", "csv"], [286, 1, 1, "", "get_subroutines"], [286, 1, 1, "", "inspect_function_closure"], [286, 1, 1, "", "is_immutable"], [286, 1, 1, "", "is_probably_safe"], [286, 1, 1, "", "verify_function_closure"]], "neurotools.jobs.filenames": [[287, 1, 1, "", "check_filename"], [287, 1, 1, "", "is_dangerous_filename"], [287, 1, 1, "", "validate_argument_signature"]], "neurotools.jobs.initialize_system_cache": [[288, 1, 1, "", "cache_test"], [288, 1, 1, "", "du"], [288, 1, 1, "", "initialize_caches"], [288, 1, 1, "", "launch_cache_synchronizers"], [288, 1, 1, "", "purge_ram_cache"], [288, 1, 1, "", "purge_ssd_cache"], [288, 1, 1, "", "reset_ramdisk"]], "neurotools.jobs.ndecorator": [[289, 1, 1, "", "argument_signature"], [289, 1, 1, "", "clear_memoized"], [289, 1, 1, "", "listit"], [289, 1, 1, "", "memoize"], [289, 1, 1, "", "print_signature"], [289, 1, 1, "", "sanitize"], [289, 1, 1, "", "summarize_function"], [289, 1, 1, "", "timed"], [289, 1, 1, "", "tupleit"], [289, 1, 1, "", "unwrap"]], "neurotools.jobs.parallel": [[290, 1, 1, "", "close_pool"], [290, 1, 1, "", "eval_from_cached"], [290, 1, 1, "", "function_fingerprint"], [290, 1, 1, "", "parallel_cached_wrapper"], [290, 1, 1, "", "parallel_error_handling"], [290, 1, 1, "", "parallel_indirect_wrapper"], [290, 1, 1, "", "pararraymap"], [290, 1, 1, "", "parimap"], [290, 1, 1, "", "parmap"], [290, 1, 1, "", "parmap_dict"], [290, 1, 1, "", "reset_pool"]], "neurotools.linalg": [[292, 0, 0, "-", "arguments"], [293, 0, 0, "-", "matrix"], [294, 0, 0, "-", "operators"]], "neurotools.linalg.arguments": [[292, 1, 1, "", "ascolumn"], [292, 1, 1, "", "asrow"], [292, 1, 1, "", "assertcolumn"], [292, 1, 1, "", "assertfinite"], [292, 1, 1, "", "assertfinitereal"], [292, 1, 1, "", "assertreal"], [292, 1, 1, "", "assertrow"], [292, 1, 1, "", "assertshape"], [292, 1, 1, "", "assertsquare"], [292, 1, 1, "", "assertvector"], [292, 1, 1, "", "assquare"], [292, 1, 1, "", "asvector"], [292, 1, 1, "", "iscolumn"], [292, 1, 1, "", "isrow"], [292, 1, 1, "", "issquare"], [292, 1, 1, "", "scalar"]], "neurotools.linalg.matrix": [[293, 1, 1, "", "Ldistance"], [293, 1, 1, "", "Llasso"], [293, 1, 1, "", "abserr"], [293, 1, 1, "", "autopredict"], [293, 1, 1, "", "cartesian_product"], [293, 1, 1, "", "check_covmat"], [293, 1, 1, "", "check_covmat_fast"], [293, 1, 1, "", "check_finite_real"], [293, 1, 1, "", "cholupdate"], [293, 1, 1, "", "cholupdate_eye"], [293, 1, 1, "", "cinv"], [293, 1, 1, "", "column"], [293, 1, 1, "", "csolve"], [293, 1, 1, "", "errmx"], [293, 1, 1, "", "kronsum"], [293, 1, 1, "", "laplace_kernel"], [293, 1, 1, "", "ldiv"], [293, 1, 1, "", "logdet"], [293, 1, 1, "", "match_covariance"], [293, 1, 1, "", "maxeig"], [293, 1, 1, "", "nearPDHigham"], [293, 1, 1, "", "nearPSDRebonatoJackel"], [293, 1, 1, "", "normedcovariance"], [293, 1, 1, "", "psd_eig"], [293, 1, 1, "", "qf"], [293, 1, 1, "", "rcond"], [293, 1, 1, "", "rdiv"], [293, 1, 1, "", "real_eig"], [293, 1, 1, "", "reglstsq"], [293, 1, 1, "", "rmatrix"], [293, 1, 1, "", "row"], [293, 1, 1, "", "rsolt"], [293, 1, 1, "", "rsolve"], [293, 1, 1, "", "selector_matrix"], [293, 1, 1, "", "solt"], [293, 1, 1, "", "top_v"], [293, 1, 1, "", "tril_elements"], [293, 1, 1, "", "triu_elements"], [293, 1, 1, "", "wheremax"], [293, 1, 1, "", "wheremin"]], "neurotools.linalg.operators": [[294, 1, 1, "", "adjacency1D"], [294, 1, 1, "", "adjacency2D"], [294, 1, 1, "", "adjacency2D_circular"], [294, 1, 1, "", "adjacency2d_rotational"], [294, 1, 1, "", "circular1DblurOperator"], [294, 1, 1, "", "cosine_kernel"], [294, 1, 1, "", "covfrom"], [294, 1, 1, "", "delta"], [294, 1, 1, "", "differentiator"], [294, 1, 1, "", "diffuseFT1D"], [294, 1, 1, "", "flatcov"], [294, 1, 1, "", "gaussian1DblurOperator"], [294, 1, 1, "", "gaussian2DblurOperator"], [294, 1, 1, "", "integrator"], [294, 1, 1, "", "laplacian1D"], [294, 1, 1, "", "laplacian1D_circular"], [294, 1, 1, "", "laplacian2D"], [294, 1, 1, "", "laplacianFT1D"], [294, 1, 1, "", "log_cosine_basis"], [294, 1, 1, "", "make_cosine_basis"], [294, 1, 1, "", "oucov"], [294, 1, 1, "", "separable_guassian_blur"], [294, 1, 1, "", "wienerFT1D"]], "neurotools.nlab": [[295, 1, 1, "", "beta"], [295, 1, 1, "", "binomial"], [295, 1, 1, "", "chisquare"], [295, 1, 1, "", "choice"], [295, 1, 1, "", "dirichlet"], [295, 1, 1, "", "exponential"], [295, 1, 1, "", "f"], [295, 1, 1, "", "gamma"], [295, 1, 1, "", "geometric"], [295, 1, 1, "", "get_state"], [295, 1, 1, "", "gumbel"], [295, 1, 1, "", "hypergeometric"], [295, 1, 1, "", "laplace"], [295, 1, 1, "", "logistic"], [295, 1, 1, "", "lognormal"], [295, 1, 1, "", "logseries"], [295, 1, 1, "", "multinomial"], [295, 1, 1, "", "multivariate_normal"], [295, 1, 1, "", "negative_binomial"], [295, 1, 1, "", "noncentral_chisquare"], [295, 1, 1, "", "noncentral_f"], [295, 1, 1, "", "normal"], [295, 1, 1, "", "pareto"], [295, 1, 1, "", "permutation"], [295, 1, 1, "", "poisson"], [295, 1, 1, "", "power"], [295, 1, 1, "", "rand"], [295, 1, 1, "", "randint"], [295, 1, 1, "", "randn"], [295, 1, 1, "", "random"], [295, 1, 1, "", "random_integers"], [295, 1, 1, "", "random_sample"], [295, 1, 1, "", "rayleigh"], [295, 1, 1, "", "seed"], [295, 1, 1, "", "set_state"], [295, 1, 1, "", "shuffle"], [295, 1, 1, "", "standard_cauchy"], [295, 1, 1, "", "standard_exponential"], [295, 1, 1, "", "standard_gamma"], [295, 1, 1, "", "standard_normal"], [295, 1, 1, "", "standard_t"], [295, 1, 1, "", "triangular"], [295, 1, 1, "", "uniform"], [295, 1, 1, "", "vonmises"], [295, 1, 1, "", "wald"], [295, 1, 1, "", "weibull"], [295, 1, 1, "", "zipf"]], "neurotools.obsolete": [[297, 0, 0, "-", "encoding"], [300, 0, 0, "-", "gpu"], [318, 0, 0, "-", "models"]], "neurotools.obsolete.encoding": [[298, 0, 0, "-", "Huffman"], [299, 0, 0, "-", "NaryHuffman"]], "neurotools.obsolete.encoding.Huffman": [[298, 2, 1, "", "Huffman"]], "neurotools.obsolete.encoding.Huffman.Huffman": [[298, 2, 1, "", "Leaf"], [298, 2, 1, "", "Node"], [298, 3, 1, "", "decode"], [298, 3, 1, "", "encode"], [298, 3, 1, "", "encode_packets"]], "neurotools.obsolete.encoding.Huffman.Huffman.Node": [[298, 3, 1, "", "walk"]], "neurotools.obsolete.encoding.NaryHuffman": [[299, 2, 1, "", "NaryHuffman"]], "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman": [[299, 2, 1, "", "Leaf"], [299, 2, 1, "", "Node"], [299, 3, 1, "", "decode"], [299, 3, 1, "", "encode"], [299, 3, 1, "", "encode_packets"]], "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Node": [[299, 3, 1, "", "walk"]], "neurotools.obsolete.gpu": [[301, 0, 0, "-", "cl"], [305, 0, 0, "-", "cpu"], [307, 0, 0, "-", "cu"]], "neurotools.obsolete.gpu.cl": [[301, 1, 1, "", "missing"]], "neurotools.obsolete.gpu.cpu": [[306, 0, 0, "-", "util"]], "neurotools.obsolete.gpu.cpu.util": [[306, 1, 1, "", "cmap"], [306, 1, 1, "", "compose"], [306, 1, 1, "", "corr"], [306, 1, 1, "", "cov"], [306, 1, 1, "", "cut"], [306, 1, 1, "", "document"], [306, 1, 1, "", "dot"], [306, 1, 1, "", "elem"], [306, 1, 1, "", "fancy"], [306, 1, 1, "", "flat"], [306, 1, 1, "", "idivup"], [306, 1, 1, "", "ldif"], [306, 1, 1, "", "ldif2"], [306, 1, 1, "", "ldiv"], [306, 1, 1, "", "ldiv2"], [306, 1, 1, "", "length"], [306, 1, 1, "", "lmul"], [306, 1, 1, "", "lmul2"], [306, 1, 1, "", "lpow"], [306, 1, 1, "", "lpow2"], [306, 1, 1, "", "lsum"], [306, 1, 1, "", "lsum2"], [306, 1, 1, "", "mdif"], [306, 1, 1, "", "mdiv"], [306, 1, 1, "", "mean"], [306, 1, 1, "", "mmap"], [306, 1, 1, "", "mmean"], [306, 1, 1, "", "mmul"], [306, 1, 1, "", "mpow"], [306, 1, 1, "", "mstd"], [306, 1, 1, "", "msum"], [306, 1, 1, "", "mu"], [306, 1, 1, "", "mvar"], [306, 1, 1, "", "norm"], [306, 1, 1, "", "rnorm"], [306, 1, 1, "", "scale"], [306, 1, 1, "", "sem"], [306, 1, 1, "", "shift"], [306, 1, 1, "", "sigma"], [306, 1, 1, "", "sstd"], [306, 1, 1, "", "std"], [306, 1, 1, "", "svar"], [306, 1, 1, "", "var"]], "neurotools.obsolete.gpu.cu": [[308, 0, 0, "-", "convolution"], [309, 0, 0, "-", "device"], [310, 0, 0, "-", "function"], [311, 0, 0, "-", "gpufun"], [312, 0, 0, "-", "graph"], [313, 0, 0, "-", "logic"], [315, 0, 0, "-", "plot"], [316, 0, 0, "-", "sequence"]], "neurotools.obsolete.gpu.cu.convolution": [[308, 1, 1, "", "gpuboxconv"], [308, 1, 1, "", "gpuboxconv_core"]], "neurotools.obsolete.gpu.cu.device": [[309, 1, 1, "", "card_info"], [309, 1, 1, "", "estimateBlocks"], [309, 1, 1, "", "estimateLoop"], [309, 1, 1, "", "estimateThreadsPerBlock"], [309, 1, 1, "", "missing"]], "neurotools.obsolete.gpu.cu.function": [[310, 1, 1, "", "cpu"], [310, 1, 1, "", "expsub"], [310, 1, 1, "", "ezkern"], [310, 1, 1, "", "format"], [310, 1, 1, "", "gpubin"], [310, 1, 1, "", "gpubinaryeq"], [310, 1, 1, "", "gpufloat"], [310, 1, 1, "", "gpufloatmat"], [310, 1, 1, "", "gpufloatred"], [310, 1, 1, "", "gpuint"], [310, 1, 1, "", "gpuintmap"], [310, 1, 1, "", "gpuintmat"], [310, 1, 1, "", "gpuintred"], [310, 1, 1, "", "gpumap"], [310, 1, 1, "", "gpumapeq"], [310, 1, 1, "", "gpupointer"], [310, 1, 1, "", "gpuscalar"], [310, 1, 1, "", "guessGPUType"], [310, 1, 1, "", "kernel"], [310, 1, 1, "", "printKernel"], [310, 1, 1, "", "toGPUType"]], "neurotools.obsolete.gpu.cu.gpufun": [[311, 1, 1, "", "gpuhill"], [311, 1, 1, "", "gpulcomb"], [311, 1, 1, "", "gpulogpdf"], [311, 1, 1, "", "gpumean"], [311, 1, 1, "", "gpunpdf"], [311, 1, 1, "", "gpurandexp"], [311, 1, 1, "", "gpurandf"], [311, 1, 1, "", "gpuuniform"]], "neurotools.obsolete.gpu.cu.graph": [[312, 1, 1, "", "connect_gaussian"], [312, 1, 1, "", "random_point_sheet"], [312, 1, 1, "", "spherepoints"], [312, 1, 1, "", "uniform_point_sheet"]], "neurotools.obsolete.gpu.cu.logic": [[313, 1, 1, "", "gpuand"], [313, 1, 1, "", "gpueq"], [313, 1, 1, "", "gpugt"], [313, 1, 1, "", "gpugteq"], [313, 1, 1, "", "gpuhzero"], [313, 1, 1, "", "gpult"], [313, 1, 1, "", "gpulteq"], [313, 1, 1, "", "gpuneq"], [313, 1, 1, "", "gpunor"], [313, 1, 1, "", "gpunot"], [313, 1, 1, "", "gpurange"], [313, 1, 1, "", "gpuyes"]], "neurotools.obsolete.gpu.cu.plot": [[315, 1, 1, "", "ElementwiseKernel"], [315, 1, 1, "", "gpubarlinedata"], [315, 1, 1, "", "gpuhistogram"], [315, 1, 1, "", "missing"], [315, 1, 1, "", "sebarline"], [315, 1, 1, "", "sebarline2"]], "neurotools.obsolete.gpu.cu.sequence": [[316, 1, 1, "", "FrameEater"], [316, 1, 1, "", "GPUAutometric"], [316, 1, 1, "", "GPUDotmetric"], [316, 1, 1, "", "GPUMagmetric"], [316, 1, 1, "", "GPUPointAutoDistance"], [316, 1, 1, "", "GPUSequenceAutoDetect"], [316, 1, 1, "", "deltamag"], [316, 1, 1, "", "fitgaussbimodal"], [316, 1, 1, "", "fitgausstrimodal"], [316, 1, 1, "", "gpuderivative"], [316, 1, 1, "", "gpulognpdf"], [316, 1, 1, "", "gpunpdf"], [316, 1, 1, "", "gpusmooth"], [316, 1, 1, "", "gpusubsetgfit"], [316, 1, 1, "", "gpusubsetmean"], [316, 1, 1, "", "gputhing"], [316, 1, 1, "", "mulmag"], [316, 1, 1, "", "summag"]], "neurotools.obsolete.models": [[319, 0, 0, "-", "izh"], [320, 0, 0, "-", "lif"]], "neurotools.obsolete.models.izh": [[319, 1, 1, "", "du_izh"], [319, 1, 1, "", "dv_izh"], [319, 1, 1, "", "sim_izh"], [319, 1, 1, "", "update_izh"]], "neurotools.obsolete.models.lif": [[320, 1, 1, "", "euler_integrate_LIF"], [320, 1, 1, "", "exponential_integrate_LIF"], [320, 1, 1, "", "exponential_moving_average"]], "neurotools.signal": [[329, 1, 1, "", "amp"], [329, 1, 1, "", "ang"], [329, 1, 1, "", "arenear"], [329, 1, 1, "", "aresafe"], [329, 1, 1, "", "autocorrelation"], [329, 1, 1, "", "band_stop_line_noise_removal"], [329, 1, 1, "", "bandpass_filter"], [329, 1, 1, "", "box_filter"], [329, 1, 1, "", "circular_cosine_basis"], [329, 1, 1, "", "circular_gaussian_smooth"], [329, 1, 1, "", "circular_gaussian_smooth_2D"], [330, 0, 0, "-", "coherence"], [329, 1, 1, "", "complex_to_nan"], [331, 0, 0, "-", "conv"], [329, 1, 1, "", "deltaovermean"], [329, 1, 1, "", "drop_nonfinite"], [329, 1, 1, "", "estimate_padding"], [329, 1, 1, "", "fdiff"], [329, 1, 1, "", "fftacorr1d"], [329, 1, 1, "", "fftsta"], [329, 1, 1, "", "fm_mod"], [329, 1, 1, "", "fudge_derivative"], [329, 1, 1, "", "gaussian_kernel"], [329, 1, 1, "", "gaussian_smooth"], [329, 1, 1, "", "gaussianize"], [329, 1, 1, "", "geometric_window"], [329, 1, 1, "", "get_edges"], [329, 1, 1, "", "get_snips"], [329, 1, 1, "", "get_triggered_stats"], [329, 1, 1, "", "highpass_filter"], [329, 1, 1, "", "ifreq"], [329, 1, 1, "", "interpmax1d"], [329, 1, 1, "", "interpolate_NaN"], [329, 1, 1, "", "interpolate_NaN_quadratic"], [329, 1, 1, "", "invert_uniformize"], [329, 1, 1, "", "killSpikes"], [329, 1, 1, "", "linear_cosine_basis"], [329, 1, 1, "", "linfilter"], [329, 1, 1, "", "local_maxima"], [329, 1, 1, "", "local_minima"], [329, 1, 1, "", "local_peak_within"], [329, 1, 1, "", "lowpass_filter"], [329, 1, 1, "", "make_lagged"], [329, 1, 1, "", "make_rebroadcast_slice"], [329, 1, 1, "", "mean_block"], [329, 1, 1, "", "median_block"], [329, 1, 1, "", "median_filter"], [332, 0, 0, "-", "morlet"], [333, 0, 0, "-", "multitaper"], [329, 1, 1, "", "ndargmax"], [329, 1, 1, "", "nice_interp"], [329, 1, 1, "", "nonnegative_bandpass_filter"], [329, 1, 1, "", "pad_signal"], [329, 1, 1, "", "padin"], [329, 1, 1, "", "padout"], [329, 1, 1, "", "pdiff"], [329, 1, 1, "", "peak_within"], [329, 1, 1, "", "percentile_filter"], [329, 1, 1, "", "pghilbert"], [329, 1, 1, "", "phase_randomize"], [329, 1, 1, "", "phase_randomize_from_amplitudes"], [329, 1, 1, "", "phase_rotate"], [329, 1, 1, "", "pieces"], [334, 0, 0, "-", "ppc"], [329, 1, 1, "", "randband"], [329, 1, 1, "", "remove_gaps"], [329, 1, 1, "", "remove_short"], [329, 1, 1, "", "rewrap"], [335, 0, 0, "-", "savitskygolay"], [336, 0, 0, "-", "sde"], [329, 1, 1, "", "set_edges"], [329, 1, 1, "", "sign_preserving_amplitude_demodulate"], [329, 1, 1, "", "spaced_derivative"], [329, 1, 1, "", "span"], [329, 1, 1, "", "split_into_groups"], [329, 1, 1, "", "stats_block"], [329, 1, 1, "", "topercentiles"], [329, 1, 1, "", "triggered_average"], [329, 1, 1, "", "uniformize"], [329, 1, 1, "", "unit_length"], [329, 1, 1, "", "unitscale"], [329, 1, 1, "", "unwrap"], [329, 1, 1, "", "upsample"], [329, 1, 1, "", "var_block"], [329, 1, 1, "", "variance_filter"], [329, 1, 1, "", "virtual_reference_line_noise_removal"], [329, 1, 1, "", "zeromean"], [329, 1, 1, "", "zgrid"], [329, 1, 1, "", "zscore"]], "neurotools.signal.coherence": [[330, 1, 1, "", "coherence_pvalue"], [330, 1, 1, "", "morlet_population_synchrony_spectrum"], [330, 1, 1, "", "multitaper_coherence"], [330, 1, 1, "", "multitaper_multitrial_coherence"], [330, 1, 1, "", "population_coherence_matrix"], [330, 1, 1, "", "population_eigencoherence"], [330, 1, 1, "", "sliding_multitaper_coherence"], [330, 1, 1, "", "sliding_multitaper_coherence_parallel"]], "neurotools.signal.conv": [[331, 1, 1, "", "convolve2dct"], [331, 1, 1, "", "gausskern1d"], [331, 1, 1, "", "gausskern2d"], [331, 1, 1, "", "mirror2d"], [331, 1, 1, "", "reflect2D"], [331, 1, 1, "", "reflect2D_1"], [331, 1, 1, "", "separable2d"]], "neurotools.signal.morlet": [[332, 1, 1, "", "fft_cwt"], [332, 1, 1, "", "fft_cwt_transposed"], [332, 1, 1, "", "fft_cwt_transposed_logspaced"], [332, 1, 1, "", "logfreqs"], [332, 1, 1, "", "normalized_morlet"], [332, 1, 1, "", "population_synchrony_spectrum"], [332, 1, 1, "", "prepare_wavelet_fft_basis"], [332, 1, 1, "", "prepare_wavelet_fft_basis_logspace"]], "neurotools.signal.multitaper": [[333, 1, 1, "", "dpss_cached"], [333, 1, 1, "", "multitaper_population_eigencoherence"], [333, 1, 1, "", "multitaper_spectrum"], [333, 1, 1, "", "multitaper_squared_spectrum"], [333, 1, 1, "", "sliding_multitaper_spectrum"]], "neurotools.signal.ppc": [[334, 1, 1, "", "discard_spikes_closer_than_delta"], [334, 1, 1, "", "estimate_bias_in_uncorrected_ppc"], [334, 1, 1, "", "fftppc"], [334, 1, 1, "", "fftppc_biased"], [334, 1, 1, "", "fftppc_biased_multitaper"], [334, 1, 1, "", "fftppc_multitaper"], [334, 1, 1, "", "pairwise_phase_consistancy"], [334, 1, 1, "", "phase_randomize"], [334, 1, 1, "", "phase_randomized_bias_correction"], [334, 1, 1, "", "ppc_chance_level"], [334, 1, 1, "", "ppc_phase_randomize_chance_level_sample"]], "neurotools.signal.savitskygolay": [[335, 1, 1, "", "SGKern"], [335, 1, 1, "", "SGKernA"], [335, 1, 1, "", "SGKernJ"], [335, 1, 1, "", "SGKernV"], [335, 1, 1, "", "SGOrd"], [335, 1, 1, "", "SGaccelerate"], [335, 1, 1, "", "SGdifferentiate"], [335, 1, 1, "", "SGfilt"], [335, 1, 1, "", "SGfiltA"], [335, 1, 1, "", "SGfiltJ"], [335, 1, 1, "", "SGfiltV"], [335, 1, 1, "", "SGjerk"], [335, 1, 1, "", "SGsmooth"]], "neurotools.signal.sde": [[336, 1, 1, "", "sample_ou_process"], [336, 1, 1, "", "sample_wiener_process"]], "neurotools.spatial": [[338, 0, 0, "-", "array"], [337, 1, 1, "", "brute_force_local_2d_maxima"], [339, 0, 0, "-", "dct"], [340, 0, 0, "-", "distance"], [341, 0, 0, "-", "fftzeros"], [343, 0, 0, "-", "kernels"], [345, 0, 0, "-", "phase"], [346, 0, 0, "-", "points"], [347, 0, 0, "-", "spiking"], [348, 0, 0, "-", "triangulation"]], "neurotools.spatial.array": [[338, 1, 1, "", "array_average_amplitude"], [338, 1, 1, "", "array_count_centers"], [338, 1, 1, "", "array_count_critical"], [338, 1, 1, "", "array_kuramoto"], [338, 1, 1, "", "array_kuramoto_pgd"], [338, 1, 1, "", "array_kuramoto_pgd_standard_deviation"], [338, 1, 1, "", "array_kuramoto_standard_deviation"], [338, 1, 1, "", "array_phase_gradient"], [338, 1, 1, "", "array_phasegradient_local"], [338, 1, 1, "", "array_phasegradient_magnitude_cv"], [338, 1, 1, "", "array_phasegradient_magnitude_sigma"], [338, 1, 1, "", "array_phasegradient_pgd_threshold"], [338, 1, 1, "", "array_phasegradient_planar"], [338, 1, 1, "", "array_speed_local"], [338, 1, 1, "", "array_speed_pgd_threshold"], [338, 1, 1, "", "array_synchrony"], [338, 1, 1, "", "array_synchrony_pgd"], [338, 1, 1, "", "array_synchrony_pgd_standard_deviation"], [338, 1, 1, "", "array_synchrony_standard_deviation"], [338, 1, 1, "", "array_wavelength_local"], [338, 1, 1, "", "array_wavelength_local_pgd_threshold"], [338, 1, 1, "", "array_wavelength_pgd_threshold"], [338, 1, 1, "", "array_wavelength_planar"], [338, 1, 1, "", "pack_array_data"], [338, 1, 1, "", "trim_array"], [338, 1, 1, "", "trim_array_as_if"]], "neurotools.spatial.dct": [[339, 1, 1, "", "dct_cut"], [339, 1, 1, "", "dct_cut_antialias"], [339, 1, 1, "", "dct_cut_downsampled"], [339, 1, 1, "", "dct_upsample"], [339, 1, 1, "", "dct_upsample_notrim"], [339, 1, 1, "", "get_mask"], [339, 1, 1, "", "get_mask_antialiased"], [339, 1, 1, "", "iterated_upsample"], [339, 1, 1, "", "outer_complex"]], "neurotools.spatial.distance": [[340, 1, 1, "", "distance_angular_deviation"], [340, 1, 1, "", "get_average_synchrony_length_constant_parallel"], [340, 1, 1, "", "get_averaged_angular_distance"], [340, 1, 1, "", "get_length_constant_trial"], [340, 1, 1, "", "get_pair_distance"], [340, 1, 1, "", "synchrony_length_constant_areas_summary"]], "neurotools.spatial.fftzeros": [[341, 1, 1, "", "coalesce"], [341, 1, 1, "", "coalesce_points"], [341, 1, 1, "", "cut_array_data"], [341, 1, 1, "", "dPhidx"], [341, 1, 1, "", "dPhidy"], [341, 1, 1, "", "find_critical_points"], [341, 1, 1, "", "find_critical_potential_points"], [341, 1, 1, "", "get_critical_spectra"], [341, 1, 1, "", "get_phase_gradient_as_complex"], [341, 1, 1, "", "getp"], [341, 1, 1, "", "getpeaks2d"], [341, 1, 1, "", "grad"], [341, 1, 1, "", "mirror2D"], [341, 1, 1, "", "plot_critical_points"], [341, 1, 1, "", "plot_critical_spectra"], [341, 1, 1, "", "plot_phase_direction"], [341, 1, 1, "", "plot_phase_gradient"], [341, 1, 1, "", "quickgrad"]], "neurotools.spatial.kernels": [[343, 1, 1, "", "absorbing_gaussian"], [343, 1, 1, "", "absorbing_laplacian"], [343, 1, 1, "", "continuum_kernel"], [343, 1, 1, "", "cosine_kernel"], [343, 1, 1, "", "diffusion_basis"], [343, 1, 1, "", "exponential_basis"], [343, 1, 1, "", "gaussian_2D_kernel"], [343, 1, 1, "", "iterative_orthogonalize_basis"], [343, 1, 1, "", "laplace_kernel"], [343, 1, 1, "", "laplacian"], [343, 1, 1, "", "log_cosine_basis"], [343, 1, 1, "", "log_spline_basis"], [343, 1, 1, "", "magickernel"], [343, 1, 1, "", "magicsharp"], [343, 1, 1, "", "make_cosine_basis"]], "neurotools.spatial.phase": [[345, 1, 1, "", "analytic_signal_coherence"], [345, 1, 1, "", "population_average_amplitude"], [345, 1, 1, "", "population_kuramoto"], [345, 1, 1, "", "population_median_frequency"], [345, 1, 1, "", "population_median_phase_velocity"], [345, 1, 1, "", "population_normalized_sliding_signal_coherence"], [345, 1, 1, "", "population_phase_coherence"], [345, 1, 1, "", "population_phase_relative_sliding_kuramoto"], [345, 1, 1, "", "population_polar_std"], [345, 1, 1, "", "population_signal_amplitude_dispersion"], [345, 1, 1, "", "population_signal_amplitude_precision"], [345, 1, 1, "", "population_signal_amplitude_std"], [345, 1, 1, "", "population_signal_concentration"], [345, 1, 1, "", "population_signal_description"], [345, 1, 1, "", "population_signal_dispersion"], [345, 1, 1, "", "population_signal_phase_dispersion"], [345, 1, 1, "", "population_signal_phase_precision"], [345, 1, 1, "", "population_signal_phase_std"], [345, 1, 1, "", "population_signal_precision"], [345, 1, 1, "", "population_sliding_signal_coherence"], [345, 1, 1, "", "population_synchrony"], [345, 1, 1, "", "population_synchrony_linear"], [345, 1, 1, "", "sliding_population_signal_coherence"]], "neurotools.spatial.points": [[346, 1, 1, "", "c2p"], [346, 1, 1, "", "closest"], [346, 1, 1, "", "p2c"], [346, 1, 1, "", "pair_neighbors"], [346, 1, 1, "", "paired_distances"], [346, 1, 1, "", "to_xypoint"]], "neurotools.spatial.spiking": [[347, 1, 1, "", "interp_bin"]], "neurotools.spatial.triangulation": [[348, 1, 1, "", "coalesce"], [348, 1, 1, "", "edgesNearby"], [348, 1, 1, "", "mergeNearby"], [348, 1, 1, "", "plot_edges"], [348, 1, 1, "", "plot_triangles"], [348, 1, 1, "", "trianglesToEdges"], [348, 1, 1, "", "uniquerow"], [348, 1, 1, "", "z2xy"]], "neurotools.spikes": [[350, 0, 0, "-", "spikes"], [351, 0, 0, "-", "waveform"]], "neurotools.spikes.spikes": [[350, 1, 1, "", "bin_spike_times"], [350, 1, 1, "", "bin_spikes_raster"], [350, 1, 1, "", "cut_spikes"], [350, 1, 1, "", "pack_cross_correlation_matrix"], [350, 1, 1, "", "pp_xcorr"], [350, 1, 1, "", "times_to_raster"], [350, 1, 1, "", "txcorr"]], "neurotools.spikes.waveform": [[351, 1, 1, "", "getFWHM"], [351, 1, 1, "", "getPHP"], [351, 1, 1, "", "getPT"], [351, 1, 1, "", "getPTHW"], [351, 1, 1, "", "getPVT"], [351, 1, 1, "", "getWAHP"], [351, 1, 1, "", "is_thin"], [351, 1, 1, "", "is_thin_pvt"], [351, 1, 1, "", "minmax"], [351, 1, 1, "", "normalized_waveform"], [351, 1, 1, "", "process"], [351, 1, 1, "", "realign"]], "neurotools.stats": [[352, 2, 1, "", "Description"], [352, 1, 1, "", "add_constant"], [352, 1, 1, "", "auc_to_g2"], [352, 1, 1, "", "block_shuffle"], [353, 0, 0, "-", "circular"], [354, 0, 0, "-", "convolutional"], [352, 1, 1, "", "covariance"], [352, 1, 1, "", "crossvalidated_least_squares"], [355, 0, 0, "-", "density"], [356, 0, 0, "-", "distributions"], [357, 0, 0, "-", "fast_kde"], [352, 1, 1, "", "fraction_explained_deviance"], [358, 0, 0, "-", "gaussian"], [359, 0, 0, "-", "glm"], [352, 1, 1, "", "glmfit"], [360, 0, 0, "-", "grid_search"], [361, 0, 0, "-", "hmm"], [362, 0, 0, "-", "information"], [363, 0, 0, "-", "mcint"], [364, 0, 0, "-", "minimize"], [365, 0, 0, "-", "mixtures"], [366, 0, 0, "-", "modefind"], [352, 1, 1, "", "nrmse"], [352, 1, 1, "", "outliers"], [352, 1, 1, "", "partition_data"], [352, 1, 1, "", "partition_data_for_crossvalidation"], [352, 1, 1, "", "partition_trials_for_crossvalidation"], [352, 1, 1, "", "pca"], [352, 1, 1, "", "polar_error"], [352, 1, 1, "", "print_stats"], [367, 0, 0, "-", "pvalues"], [368, 0, 0, "-", "regressions"], [352, 1, 1, "", "reject_outliers"], [352, 1, 1, "", "trial_crossvalidated_least_squares"], [352, 1, 1, "", "weighted_avg_and_std"]], "neurotools.stats.Description": [[352, 3, 1, "", "short"]], "neurotools.stats.circular": [[353, 1, 1, "", "abspolar_stats"], [353, 1, 1, "", "complex_gaussian"], [353, 1, 1, "", "fit_vonmises"], [353, 1, 1, "", "logpolar_gaussian"], [353, 1, 1, "", "logpolar_stats"], [353, 1, 1, "", "squared_first_circular_moment"]], "neurotools.stats.convolutional": [[354, 1, 1, "", "autocorrelation_bayes"], [354, 1, 1, "", "blockccm"], [354, 1, 1, "", "blocksta"], [354, 1, 1, "", "ccm"], [354, 1, 1, "", "ccor"], [354, 1, 1, "", "construct_lowpass_operator"], [354, 1, 1, "", "create_spectral_model"], [354, 1, 1, "", "cspect"], [354, 1, 1, "", "cspectm"], [354, 1, 1, "", "reconstruct"], [354, 1, 1, "", "spectreconstruct"], [354, 1, 1, "", "spike_lfp_filters"], [354, 1, 1, "", "sta"]], "neurotools.stats.density": [[355, 1, 1, "", "adaptive_density_grid"], [355, 1, 1, "", "gridhist"], [355, 1, 1, "", "kdepeak"], [355, 1, 1, "", "knn_1d_density"]], "neurotools.stats.distributions": [[356, 1, 1, "", "explogpdf"], [356, 1, 1, "", "gaussian_logpdf"], [356, 1, 1, "", "gaussian_pdf"], [356, 1, 1, "", "poisson_logpdf"], [356, 1, 1, "", "poisson_pdf"], [356, 1, 1, "", "sample_categorical"]], "neurotools.stats.fast_kde": [[357, 1, 1, "", "fast_kde"], [357, 1, 1, "", "image_cov"]], "neurotools.stats.gaussian": [[358, 2, 1, "", "Gaussian"], [358, 1, 1, "", "MVG_DKL"], [358, 1, 1, "", "MVG_DKL_CP"], [358, 1, 1, "", "MVG_PDF"], [358, 1, 1, "", "MVG_check"], [358, 1, 1, "", "MVG_conditional"], [358, 1, 1, "", "MVG_divide"], [358, 1, 1, "", "MVG_entropy"], [358, 1, 1, "", "MVG_kalman"], [358, 1, 1, "", "MVG_kalman_P_inverseA"], [358, 1, 1, "", "MVG_kalman_joint"], [358, 1, 1, "", "MVG_kalman_joint_P"], [358, 1, 1, "", "MVG_logPDF"], [358, 1, 1, "", "MVG_multiply"], [358, 1, 1, "", "MVG_multiply_C"], [358, 1, 1, "", "MVG_projection"], [358, 1, 1, "", "MVG_sample"], [358, 1, 1, "", "gaussian_quadrature"], [358, 1, 1, "", "gaussian_quadrature_logarithmic"]], "neurotools.stats.gaussian.Gaussian": [[358, 3, 1, "", "logpdf"], [358, 4, 1, "", "m"], [358, 4, 1, "", "t"]], "neurotools.stats.glm": [[359, 1, 1, "", "GLMPenaltyBernoulli"], [359, 1, 1, "", "GLMPenaltyL2"], [359, 1, 1, "", "GLMPenaltyPoisson"], [359, 1, 1, "", "cosine_kernel"], [359, 1, 1, "", "crossvalidatedAUC"], [359, 1, 1, "", "fitGLM"], [359, 1, 1, "", "gradientglmfit"], [359, 1, 1, "", "log_cosine_basis"], [359, 1, 1, "", "make_cosine_basis"], [359, 1, 1, "", "numeric_grad"], [359, 1, 1, "", "numeric_hess"], [359, 1, 1, "", "ppglmfit"], [359, 1, 1, "", "sexp"], [359, 1, 1, "", "sigmoid"]], "neurotools.stats.grid_search": [[360, 1, 1, "", "grid_search"]], "neurotools.stats.hmm": [[361, 2, 1, "", "BernoulliObservationApproximator"], [361, 2, 1, "", "BernoulliObservationModel"], [361, 2, 1, "", "ChisquareCoxApproximator"], [361, 2, 1, "", "ChisquareCoxModel"], [361, 2, 1, "", "DiffusionGaussian"], [361, 2, 1, "", "GaussianCoxApproximator"], [361, 2, 1, "", "GaussianCoxModel"], [361, 2, 1, "", "LogGaussianCoxApproximator"], [361, 2, 1, "", "LogGaussianCoxModel"], [361, 2, 1, "", "MVGOUUpdate"], [361, 2, 1, "", "MVGUpdate"], [361, 2, 1, "", "MVGaussian"], [361, 2, 1, "", "MVLogGaussianCox"], [361, 2, 1, "", "OUGaussian"], [361, 2, 1, "", "PoissonObservationApproximator"], [361, 2, 1, "", "PoissonObservationModel"], [361, 2, 1, "", "TruncatedLogGaussianCoxApproximator"], [361, 2, 1, "", "TruncatedLogGaussianCoxModel"], [361, 2, 1, "", "TruncatedPoissonObservationApproximator"], [361, 2, 1, "", "TruncatedPoissonObservationModel"], [361, 1, 1, "", "backward_abstract"], [361, 1, 1, "", "baum_welch"], [361, 1, 1, "", "forward_abstract"], [361, 1, 1, "", "forward_backward"], [361, 1, 1, "", "forward_backward_abstract"], [361, 1, 1, "", "hasNaN"], [361, 1, 1, "", "jump"], [361, 1, 1, "", "lgcp_observation_minimizer"], [361, 1, 1, "", "log_likelihood"], [361, 1, 1, "", "poisson_baum_welch"], [361, 1, 1, "", "poisson_parameter_guess"], [361, 1, 1, "", "poisson_viterbi_state_infer"], [361, 1, 1, "", "sample"], [361, 1, 1, "", "viterbi"], [361, 1, 1, "", "viterbi_log"]], "neurotools.stats.hmm.DiffusionGaussian": [[361, 3, 1, "", "bwd"], [361, 3, 1, "", "fwd"]], "neurotools.stats.hmm.MVGOUUpdate": [[361, 3, 1, "", "bwd"], [361, 3, 1, "", "fwd"]], "neurotools.stats.hmm.MVGUpdate": [[361, 3, 1, "", "bwd"], [361, 3, 1, "", "fwd"]], "neurotools.stats.hmm.MVLogGaussianCox": [[361, 2, 1, "", "MVPoissonApproximator"]], "neurotools.stats.hmm.OUGaussian": [[361, 3, 1, "", "bwd"], [361, 3, 1, "", "fwd"]], "neurotools.stats.information": [[362, 1, 1, "", "DKL_discrete"], [362, 1, 1, "", "discrete_entropy_distribution"], [362, 1, 1, "", "discrete_entropy_samples"], [362, 1, 1, "", "poisson_entropy_nats"], [362, 1, 1, "", "regularized_discrete_entropy"]], "neurotools.stats.mcint": [[363, 1, 1, "", "monte_carlo_expectation"], [363, 1, 1, "", "monte_carlo_moments"]], "neurotools.stats.minimize": [[364, 5, 1, "", "FailureError"], [364, 1, 1, "", "minimize_retry"]], "neurotools.stats.mixtures": [[365, 1, 1, "", "two_class_poisson_mixture_model"]], "neurotools.stats.modefind": [[366, 1, 1, "", "logmode"], [366, 1, 1, "", "logmodeplot"], [366, 1, 1, "", "modefind"], [366, 1, 1, "", "peakfinder5"]], "neurotools.stats.pvalues": [[367, 1, 1, "", "benjamini_hochberg_positive_correlations"], [367, 1, 1, "", "bootstrap_compare_mean"], [367, 1, 1, "", "bootstrap_compare_median"], [367, 1, 1, "", "bootstrap_compare_statistic_two_sided"], [367, 1, 1, "", "bootstrap_compare_statistic_two_sided_parallel"], [367, 1, 1, "", "bootstrap_mean"], [367, 1, 1, "", "bootstrap_median"], [367, 1, 1, "", "bootstrap_statistic_two_sided"], [367, 1, 1, "", "correct_pvalues"], [367, 1, 1, "", "correct_pvalues_positive_dependent"]], "neurotools.stats.regressions": [[368, 1, 1, "", "damped_cosine"], [368, 1, 1, "", "exponential_decay"], [368, 1, 1, "", "gaussian_function"], [368, 1, 1, "", "half_gaussian_function"], [368, 1, 1, "", "power_law"], [368, 1, 1, "", "robust_line"], [368, 1, 1, "", "weighted_least_squares"]], "neurotools.util": [[371, 0, 0, "-", "functions"], [372, 0, 0, "-", "getfftw"], [373, 0, 0, "-", "hdfmat"], [374, 0, 0, "-", "string"], [375, 0, 0, "-", "system"], [376, 0, 0, "-", "time"], [377, 0, 0, "-", "tools"]], "neurotools.util.functions": [[371, 1, 1, "", "dsigmoid"], [371, 1, 1, "", "f"], [371, 1, 1, "", "f1"], [371, 1, 1, "", "f2"], [371, 1, 1, "", "g"], [371, 1, 1, "", "inversesigmoid"], [371, 1, 1, "", "log_factorial"], [371, 1, 1, "", "npdf"], [371, 1, 1, "", "sexp"], [371, 1, 1, "", "sigmoid"], [371, 1, 1, "", "slog"]], "neurotools.util.getfftw": [[372, 1, 1, "", "ftwthr"]], "neurotools.util.hdfmat": [[373, 1, 1, "", "getHDF"], [373, 1, 1, "", "getHDFvalue"], [373, 1, 1, "", "hdf2dict"], [373, 1, 1, "", "printmatHDF5"], [373, 1, 1, "", "recursive_printmatHDF5"]], "neurotools.util.string": [[374, 1, 1, "", "eformat"], [374, 1, 1, "", "hcat"], [374, 1, 1, "", "incolumns"], [374, 1, 1, "", "isInt"], [374, 1, 1, "", "nicetable"], [374, 1, 1, "", "percent"], [374, 1, 1, "", "shortscientific"], [374, 1, 1, "", "v2str"], [374, 1, 1, "", "v2str_long"], [374, 1, 1, "", "wordwrap"]], "neurotools.util.system": [[375, 1, 1, "", "execfile"], [375, 1, 1, "", "query_yes_no"]], "neurotools.util.time": [[376, 1, 1, "", "current_milli_time"], [376, 1, 1, "", "now"], [376, 1, 1, "", "tic"], [376, 1, 1, "", "toc"], [376, 1, 1, "", "today"], [376, 1, 1, "", "waitfor"]], "neurotools.util.tools": [[377, 1, 1, "", "aap"], [377, 1, 1, "", "amap"], [377, 1, 1, "", "arraymap"], [377, 1, 1, "", "asiterable"], [377, 1, 1, "", "c2p"], [377, 1, 1, "", "camel2underscore"], [377, 1, 1, "", "clear"], [377, 1, 1, "", "debug"], [377, 1, 1, "", "dowarn"], [377, 2, 1, "", "emitter"], [377, 1, 1, "", "ensure_dir"], [377, 1, 1, "", "exists"], [377, 1, 1, "", "ezip"], [377, 1, 1, "", "find"], [377, 1, 1, "", "find_all_extension"], [377, 1, 1, "", "getVariable"], [377, 1, 1, "", "getdict"], [377, 1, 1, "", "getsize"], [377, 1, 1, "", "globalize"], [377, 1, 1, "", "history"], [377, 1, 1, "", "invert_permutation"], [377, 1, 1, "", "lap"], [377, 1, 1, "", "lmap"], [377, 1, 1, "", "mapdict"], [377, 1, 1, "", "matlab"], [377, 1, 1, "", "metaloadmat"], [377, 1, 1, "", "nowarn"], [377, 1, 1, "", "okwarn"], [377, 1, 1, "", "oneslike"], [377, 1, 1, "", "p2c"], [377, 2, 1, "", "piper"], [377, 1, 1, "", "restoreContext"], [377, 1, 1, "", "saveContext"], [377, 1, 1, "", "setinrange"], [377, 1, 1, "", "slist"], [377, 1, 1, "", "sls"], [377, 2, 1, "", "stuff"], [377, 1, 1, "", "underscore2camel"], [377, 1, 1, "", "varexists"], [377, 1, 1, "", "wait"], [377, 1, 1, "", "warn"], [377, 1, 1, "", "zeroslike"]], "neurotools.util.tools.stuff": [[377, 3, 1, "", "add"]], "nlab": [[218, 1, 1, "", "beta"], [218, 1, 1, "", "binomial"], [218, 1, 1, "", "chisquare"], [218, 1, 1, "", "choice"], [218, 1, 1, "", "dirichlet"], [218, 1, 1, "", "exponential"], [218, 1, 1, "", "f"], [218, 1, 1, "", "gamma"], [218, 1, 1, "", "geometric"], [218, 1, 1, "", "get_state"], [218, 1, 1, "", "gumbel"], [218, 1, 1, "", "hypergeometric"], [218, 1, 1, "", "laplace"], [218, 1, 1, "", "logistic"], [218, 1, 1, "", "lognormal"], [218, 1, 1, "", "logseries"], [218, 1, 1, "", "multinomial"], [218, 1, 1, "", "multivariate_normal"], [218, 1, 1, "", "negative_binomial"], [218, 1, 1, "", "noncentral_chisquare"], [218, 1, 1, "", "noncentral_f"], [218, 1, 1, "", "normal"], [218, 1, 1, "", "pareto"], [218, 1, 1, "", "permutation"], [218, 1, 1, "", "poisson"], [218, 1, 1, "", "power"], [218, 1, 1, "", "rand"], [218, 1, 1, "", "randint"], [218, 1, 1, "", "randn"], [218, 1, 1, "", "random"], [218, 1, 1, "", "random_integers"], [218, 1, 1, "", "random_sample"], [218, 1, 1, "", "rayleigh"], [218, 1, 1, "", "seed"], [218, 1, 1, "", "set_state"], [218, 1, 1, "", "shuffle"], [218, 1, 1, "", "standard_cauchy"], [218, 1, 1, "", "standard_exponential"], [218, 1, 1, "", "standard_gamma"], [218, 1, 1, "", "standard_normal"], [218, 1, 1, "", "standard_t"], [218, 1, 1, "", "triangular"], [218, 1, 1, "", "uniform"], [218, 1, 1, "", "vonmises"], [218, 1, 1, "", "wald"], [218, 1, 1, "", "weibull"], [218, 1, 1, "", "zipf"]], "signal": [[220, 2, 1, "", "Handlers"], [220, 4, 1, "", "ItimerError"], [220, 2, 1, "", "Sigmasks"], [220, 2, 1, "", "Signals"], [220, 1, 1, "", "getsignal"], [220, 1, 1, "", "pthread_sigmask"], [230, 0, 0, "-", "signal"], [220, 1, 1, "", "sigpending"], [220, 1, 1, "", "sigwait"], [220, 2, 1, "", "struct_siginfo"], [220, 1, 1, "", "valid_signals"]], "signal.Handlers": [[220, 4, 1, "", "SIG_DFL"], [220, 4, 1, "", "SIG_IGN"]], "signal.Sigmasks": [[220, 4, 1, "", "SIG_BLOCK"], [220, 4, 1, "", "SIG_SETMASK"], [220, 4, 1, "", "SIG_UNBLOCK"]], "signal.Signals": [[220, 4, 1, "", "SIGABRT"], [220, 4, 1, "", "SIGALRM"], [220, 4, 1, "", "SIGBUS"], [220, 4, 1, "", "SIGCHLD"], [220, 4, 1, "", "SIGCLD"], [220, 4, 1, "", "SIGCONT"], [220, 4, 1, "", "SIGFPE"], [220, 4, 1, "", "SIGHUP"], [220, 4, 1, "", "SIGILL"], [220, 4, 1, "", "SIGINT"], [220, 4, 1, "", "SIGIO"], [220, 4, 1, "", "SIGIOT"], [220, 4, 1, "", "SIGKILL"], [220, 4, 1, "", "SIGPIPE"], [220, 4, 1, "", "SIGPOLL"], [220, 4, 1, "", "SIGPROF"], [220, 4, 1, "", "SIGPWR"], [220, 4, 1, "", "SIGQUIT"], [220, 4, 1, "", "SIGRTMAX"], [220, 4, 1, "", "SIGRTMIN"], [220, 4, 1, "", "SIGSEGV"], [220, 4, 1, "", "SIGSTOP"], [220, 4, 1, "", "SIGSYS"], [220, 4, 1, "", "SIGTERM"], [220, 4, 1, "", "SIGTRAP"], [220, 4, 1, "", "SIGTSTP"], [220, 4, 1, "", "SIGTTIN"], [220, 4, 1, "", "SIGTTOU"], [220, 4, 1, "", "SIGURG"], [220, 4, 1, "", "SIGUSR1"], [220, 4, 1, "", "SIGUSR2"], [220, 4, 1, "", "SIGVTALRM"], [220, 4, 1, "", "SIGWINCH"], [220, 4, 1, "", "SIGXCPU"], [220, 4, 1, "", "SIGXFSZ"]], "signal.struct_siginfo": [[220, 4, 1, "", "n_fields"], [220, 4, 1, "", "n_sequence_fields"], [220, 4, 1, "", "n_unnamed_fields"], [220, 4, 1, "", "si_band"], [220, 4, 1, "", "si_code"], [220, 4, 1, "", "si_errno"], [220, 4, 1, "", "si_pid"], [220, 4, 1, "", "si_signo"], [220, 4, 1, "", "si_status"], [220, 4, 1, "", "si_uid"]], "spatial": [[232, 0, 0, "-", "array"], [231, 1, 1, "", "brute_force_local_2d_maxima"], [233, 0, 0, "-", "dct"], [234, 0, 0, "-", "distance"], [235, 0, 0, "-", "fftzeros"], [236, 0, 0, "-", "kernels"], [237, 0, 0, "-", "phase"], [239, 0, 0, "-", "spiking"], [240, 0, 0, "-", "triangulation"]], "spatial.array": [[232, 1, 1, "", "array_average_amplitude"], [232, 1, 1, "", "array_count_centers"], [232, 1, 1, "", "array_count_critical"], [232, 1, 1, "", "array_kuramoto"], [232, 1, 1, "", "array_kuramoto_pgd"], [232, 1, 1, "", "array_kuramoto_pgd_standard_deviation"], [232, 1, 1, "", "array_kuramoto_standard_deviation"], [232, 1, 1, "", "array_phase_gradient"], [232, 1, 1, "", "array_phasegradient_local"], [232, 1, 1, "", "array_phasegradient_magnitude_cv"], [232, 1, 1, "", "array_phasegradient_magnitude_sigma"], [232, 1, 1, "", "array_phasegradient_pgd_threshold"], [232, 1, 1, "", "array_phasegradient_planar"], [232, 1, 1, "", "array_speed_local"], [232, 1, 1, "", "array_speed_pgd_threshold"], [232, 1, 1, "", "array_synchrony"], [232, 1, 1, "", "array_synchrony_pgd"], [232, 1, 1, "", "array_synchrony_pgd_standard_deviation"], [232, 1, 1, "", "array_synchrony_standard_deviation"], [232, 1, 1, "", "array_wavelength_local"], [232, 1, 1, "", "array_wavelength_local_pgd_threshold"], [232, 1, 1, "", "array_wavelength_pgd_threshold"], [232, 1, 1, "", "array_wavelength_planar"], [232, 1, 1, "", "pack_array_data"], [232, 1, 1, "", "trim_array"], [232, 1, 1, "", "trim_array_as_if"]], "spatial.dct": [[233, 1, 1, "", "dct_cut"], [233, 1, 1, "", "dct_cut_antialias"], [233, 1, 1, "", "dct_cut_downsampled"], [233, 1, 1, "", "dct_upsample"], [233, 1, 1, "", "dct_upsample_notrim"], [233, 1, 1, "", "get_mask"], [233, 1, 1, "", "get_mask_antialiased"], [233, 1, 1, "", "iterated_upsample"], [233, 1, 1, "", "outer_complex"]], "spatial.distance": [[234, 1, 1, "", "distance_angular_deviation"], [234, 1, 1, "", "get_average_synchrony_length_constant_parallel"], [234, 1, 1, "", "get_averaged_angular_distance"], [234, 1, 1, "", "get_length_constant_trial"], [234, 1, 1, "", "get_pair_distance"], [234, 1, 1, "", "synchrony_length_constant_areas_summary"]], "spatial.fftzeros": [[235, 1, 1, "", "coalesce"], [235, 1, 1, "", "coalesce_points"], [235, 1, 1, "", "cut_array_data"], [235, 1, 1, "", "dPhidx"], [235, 1, 1, "", "dPhidy"], [235, 1, 1, "", "find_critical_points"], [235, 1, 1, "", "find_critical_potential_points"], [235, 1, 1, "", "get_critical_spectra"], [235, 1, 1, "", "get_phase_gradient_as_complex"], [235, 1, 1, "", "getp"], [235, 1, 1, "", "getpeaks2d"], [235, 1, 1, "", "grad"], [235, 1, 1, "", "mirror2D"], [235, 1, 1, "", "plot_critical_points"], [235, 1, 1, "", "plot_critical_spectra"], [235, 1, 1, "", "plot_phase_direction"], [235, 1, 1, "", "plot_phase_gradient"], [235, 1, 1, "", "quickgrad"]], "spatial.kernels": [[236, 1, 1, "", "absorbing_gaussian"], [236, 1, 1, "", "absorbing_laplacian"], [236, 1, 1, "", "continuum_kernel"], [236, 1, 1, "", "cosine_kernel"], [236, 1, 1, "", "diffusion_basis"], [236, 1, 1, "", "exponential_basis"], [236, 1, 1, "", "gaussian_2D_kernel"], [236, 1, 1, "", "iterative_orthogonalize_basis"], [236, 1, 1, "", "laplace_kernel"], [236, 1, 1, "", "laplacian"], [236, 1, 1, "", "log_cosine_basis"], [236, 1, 1, "", "log_spline_basis"], [236, 1, 1, "", "magickernel"], [236, 1, 1, "", "magicsharp"], [236, 1, 1, "", "make_cosine_basis"]], "spatial.phase": [[237, 1, 1, "", "analytic_signal_coherence"], [237, 1, 1, "", "population_average_amplitude"], [237, 1, 1, "", "population_kuramoto"], [237, 1, 1, "", "population_median_frequency"], [237, 1, 1, "", "population_median_phase_velocity"], [237, 1, 1, "", "population_normalized_sliding_signal_coherence"], [237, 1, 1, "", "population_phase_coherence"], [237, 1, 1, "", "population_phase_relative_sliding_kuramoto"], [237, 1, 1, "", "population_polar_std"], [237, 1, 1, "", "population_signal_amplitude_dispersion"], [237, 1, 1, "", "population_signal_amplitude_precision"], [237, 1, 1, "", "population_signal_amplitude_std"], [237, 1, 1, "", "population_signal_concentration"], [237, 1, 1, "", "population_signal_description"], [237, 1, 1, "", "population_signal_dispersion"], [237, 1, 1, "", "population_signal_phase_dispersion"], [237, 1, 1, "", "population_signal_phase_precision"], [237, 1, 1, "", "population_signal_phase_std"], [237, 1, 1, "", "population_signal_precision"], [237, 1, 1, "", "population_sliding_signal_coherence"], [237, 1, 1, "", "population_synchrony"], [237, 1, 1, "", "population_synchrony_linear"], [237, 1, 1, "", "sliding_population_signal_coherence"]], "spatial.spiking": [[239, 1, 1, "", "interp_bin"]], "spatial.triangulation": [[240, 1, 1, "", "coalesce"], [240, 1, 1, "", "edgesNearby"], [240, 1, 1, "", "mergeNearby"], [240, 1, 1, "", "plot_edges"], [240, 1, 1, "", "plot_triangles"], [240, 1, 1, "", "trianglesToEdges"], [240, 1, 1, "", "uniquerow"], [240, 1, 1, "", "z2xy"]], "spikes": [[242, 0, 0, "-", "spikes"], [243, 0, 0, "-", "waveform"]], "spikes.spikes": [[242, 1, 1, "", "bin_spike_times"], [242, 1, 1, "", "bin_spikes_raster"], [242, 1, 1, "", "cut_spikes"], [242, 1, 1, "", "pack_cross_correlation_matrix"], [242, 1, 1, "", "pp_xcorr"], [242, 1, 1, "", "times_to_raster"], [242, 1, 1, "", "txcorr"]], "spikes.waveform": [[243, 1, 1, "", "getFWHM"], [243, 1, 1, "", "getPHP"], [243, 1, 1, "", "getPT"], [243, 1, 1, "", "getPTHW"], [243, 1, 1, "", "getPVT"], [243, 1, 1, "", "getWAHP"], [243, 1, 1, "", "is_thin"], [243, 1, 1, "", "is_thin_pvt"], [243, 1, 1, "", "minmax"], [243, 1, 1, "", "normalized_waveform"], [243, 1, 1, "", "process"], [243, 1, 1, "", "realign"]], "stats": [[246, 0, 0, "-", "circular"], [247, 0, 0, "-", "convolutional"], [248, 0, 0, "-", "density"], [249, 0, 0, "-", "distributions"], [251, 0, 0, "-", "fast_kde"], [252, 0, 0, "-", "glm"], [255, 0, 0, "-", "hmm"], [256, 0, 0, "-", "information"], [260, 0, 0, "-", "mcint"], [261, 0, 0, "-", "minimize"], [262, 0, 0, "-", "mixtures"], [263, 0, 0, "-", "modefind"], [265, 0, 0, "-", "pvalues"], [266, 0, 0, "-", "regressions"]], "stats.circular": [[246, 1, 1, "", "abspolar_stats"], [246, 1, 1, "", "complex_gaussian"], [246, 1, 1, "", "fit_vonmises"], [246, 1, 1, "", "logpolar_gaussian"], [246, 1, 1, "", "logpolar_stats"], [246, 1, 1, "", "squared_first_circular_moment"]], "stats.convolutional": [[247, 1, 1, "", "autocorrelation_bayes"], [247, 1, 1, "", "blockccm"], [247, 1, 1, "", "blocksta"], [247, 1, 1, "", "ccm"], [247, 1, 1, "", "ccor"], [247, 1, 1, "", "construct_lowpass_operator"], [247, 1, 1, "", "create_spectral_model"], [247, 1, 1, "", "cspect"], [247, 1, 1, "", "cspectm"], [247, 1, 1, "", "reconstruct"], [247, 1, 1, "", "spectreconstruct"], [247, 1, 1, "", "spike_lfp_filters"], [247, 1, 1, "", "sta"]], "stats.density": [[248, 1, 1, "", "adaptive_density_grid"], [248, 1, 1, "", "gridhist"], [248, 1, 1, "", "kdepeak"], [248, 1, 1, "", "knn_1d_density"]], "stats.distributions": [[249, 1, 1, "", "explogpdf"], [249, 1, 1, "", "gaussian_logpdf"], [249, 1, 1, "", "gaussian_pdf"], [249, 1, 1, "", "poisson_logpdf"], [249, 1, 1, "", "poisson_pdf"], [249, 1, 1, "", "sample_categorical"]], "stats.fast_kde": [[251, 1, 1, "", "fast_kde"], [251, 1, 1, "", "image_cov"]], "stats.glm": [[252, 1, 1, "", "GLMPenaltyBernoulli"], [252, 1, 1, "", "GLMPenaltyL2"], [252, 1, 1, "", "GLMPenaltyPoisson"], [252, 1, 1, "", "cosine_kernel"], [252, 1, 1, "", "crossvalidatedAUC"], [252, 1, 1, "", "fitGLM"], [252, 1, 1, "", "gradientglmfit"], [252, 1, 1, "", "log_cosine_basis"], [252, 1, 1, "", "make_cosine_basis"], [252, 1, 1, "", "numeric_grad"], [252, 1, 1, "", "numeric_hess"], [252, 1, 1, "", "ppglmfit"], [252, 1, 1, "", "sexp"], [252, 1, 1, "", "sigmoid"]], "stats.hmm": [[255, 2, 1, "", "BernoulliObservationApproximator"], [255, 2, 1, "", "BernoulliObservationModel"], [255, 2, 1, "", "ChisquareCoxApproximator"], [255, 2, 1, "", "ChisquareCoxModel"], [255, 2, 1, "", "DiffusionGaussian"], [255, 2, 1, "", "GaussianCoxApproximator"], [255, 2, 1, "", "GaussianCoxModel"], [255, 2, 1, "", "LogGaussianCoxApproximator"], [255, 2, 1, "", "LogGaussianCoxModel"], [255, 2, 1, "", "MVGOUUpdate"], [255, 2, 1, "", "MVGUpdate"], [255, 2, 1, "", "MVGaussian"], [255, 2, 1, "", "MVLogGaussianCox"], [255, 2, 1, "", "OUGaussian"], [255, 2, 1, "", "PoissonObservationApproximator"], [255, 2, 1, "", "PoissonObservationModel"], [255, 2, 1, "", "TruncatedLogGaussianCoxApproximator"], [255, 2, 1, "", "TruncatedLogGaussianCoxModel"], [255, 2, 1, "", "TruncatedPoissonObservationApproximator"], [255, 2, 1, "", "TruncatedPoissonObservationModel"], [255, 1, 1, "", "backward_abstract"], [255, 1, 1, "", "baum_welch"], [255, 1, 1, "", "forward_abstract"], [255, 1, 1, "", "forward_backward"], [255, 1, 1, "", "forward_backward_abstract"], [255, 1, 1, "", "hasNaN"], [255, 1, 1, "", "jump"], [255, 1, 1, "", "lgcp_observation_minimizer"], [255, 1, 1, "", "log_likelihood"], [255, 1, 1, "", "poisson_baum_welch"], [255, 1, 1, "", "poisson_parameter_guess"], [255, 1, 1, "", "poisson_viterbi_state_infer"], [255, 1, 1, "", "sample"], [255, 1, 1, "", "viterbi"], [255, 1, 1, "", "viterbi_log"]], "stats.hmm.DiffusionGaussian": [[255, 3, 1, "", "bwd"], [255, 3, 1, "", "fwd"]], "stats.hmm.MVGOUUpdate": [[255, 3, 1, "", "bwd"], [255, 3, 1, "", "fwd"]], "stats.hmm.MVGUpdate": [[255, 3, 1, "", "bwd"], [255, 3, 1, "", "fwd"]], "stats.hmm.MVLogGaussianCox": [[255, 2, 1, "", "MVPoissonApproximator"]], "stats.hmm.OUGaussian": [[255, 3, 1, "", "bwd"], [255, 3, 1, "", "fwd"]], "stats.information": [[256, 1, 1, "", "DKL_discrete"], [256, 1, 1, "", "discrete_entropy_distribution"], [256, 1, 1, "", "discrete_entropy_samples"], [256, 1, 1, "", "poisson_entropy_nats"], [256, 1, 1, "", "regularized_discrete_entropy"]], "stats.mcint": [[260, 1, 1, "", "monte_carlo_expectation"], [260, 1, 1, "", "monte_carlo_moments"]], "stats.minimize": [[261, 5, 1, "", "FailureError"], [261, 1, 1, "", "minimize_retry"]], "stats.mixtures": [[262, 1, 1, "", "two_class_poisson_mixture_model"]], "stats.modefind": [[263, 1, 1, "", "logmode"], [263, 1, 1, "", "logmodeplot"], [263, 1, 1, "", "modefind"], [263, 1, 1, "", "peakfinder5"]], "stats.pvalues": [[265, 1, 1, "", "benjamini_hochberg_positive_correlations"], [265, 1, 1, "", "bootstrap_compare_mean"], [265, 1, 1, "", "bootstrap_compare_median"], [265, 1, 1, "", "bootstrap_compare_statistic_two_sided"], [265, 1, 1, "", "bootstrap_compare_statistic_two_sided_parallel"], [265, 1, 1, "", "bootstrap_mean"], [265, 1, 1, "", "bootstrap_median"], [265, 1, 1, "", "bootstrap_statistic_two_sided"], [265, 1, 1, "", "correct_pvalues"], [265, 1, 1, "", "correct_pvalues_positive_dependent"]], "stats.regressions": [[266, 1, 1, "", "damped_cosine"], [266, 1, 1, "", "exponential_decay"], [266, 1, 1, "", "gaussian_function"], [266, 1, 1, "", "half_gaussian_function"], [266, 1, 1, "", "power_law"], [266, 1, 1, "", "robust_line"], [266, 1, 1, "", "weighted_least_squares"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"depend": [49, 210, 270, 370], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "neurotool": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "indic": 271, "tabl": 271, "subpackag": [2, 37, 40, 48, 55, 95, 98, 106, 110, 132, 271, 273, 296, 300, 322], "packag": [2, 3, 7, 9, 20, 26, 33, 37, 40, 44, 48, 50, 55, 56, 60, 62, 73, 84, 91, 95, 98, 102, 106, 107, 110, 111, 115, 117, 128, 132, 136, 140, 152, 166, 169, 209, 220, 231, 273, 274, 284, 291, 296, 297, 300, 301, 305, 307, 318, 322, 326, 329, 337, 349, 352, 369], "submodul": [3, 7, 9, 20, 26, 33, 37, 40, 44, 48, 50, 56, 60, 62, 73, 84, 91, 95, 98, 102, 106, 107, 111, 115, 117, 128, 132, 136, 140, 152, 166, 169, 209, 220, 231, 273, 274, 284, 291, 296, 297, 301, 305, 307, 318, 322, 326, 329, 337, 349, 352, 369], "content": [2, 3, 7, 9, 20, 26, 33, 37, 40, 44, 48, 50, 55, 56, 60, 62, 73, 84, 91, 95, 98, 102, 106, 107, 110, 111, 115, 117, 128, 132, 136, 140, 152, 166, 169, 209, 220, 231, 273, 274, 284, 291, 296, 297, 300, 301, 305, 307, 318, 322, 326, 329, 337, 349, 352, 369], "graphic": [20, 21, 22, 23, 24, 25, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "color": [21, 74, 275], "colormap": [75, 276], "dendron": [76, 277], "fabio_map": [77, 278], "imag": [22, 78, 279], "matplotlib": [23, 79, 280], "plot": [17, 24, 70, 80, 125, 281, 315], "pygam": [25, 81, 282], "ztransform_plot_help": [82, 283], "job": [26, 27, 28, 29, 30, 31, 32, 84, 85, 86, 87, 88, 89, 90, 284, 285, 286, 287, 288, 289, 290], "cach": [27, 85, 285], "closur": [28, 86, 286], "filenam": [30, 87, 287], "initialize_system_cach": [31, 88, 288], "ndecor": [89, 289], "parallel": [32, 90, 290], "linalg": [33, 34, 35, 36, 91, 92, 93, 94, 291, 292, 293, 294], "argument": [34, 92, 292], "matrix": [6, 16, 35, 59, 69, 93, 114, 124, 293, 304, 314], "oper": [36, 94, 294], "nlab": [105, 218, 295], "obsolet": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "encod": [50, 51, 52, 107, 108, 109, 297, 298, 299], "huffman": [51, 108, 298], "naryhuffman": [52, 109, 299], "gpu": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "cl": [3, 4, 5, 6, 56, 57, 58, 59, 111, 112, 113, 114, 301, 302, 303, 304], "devic": [4, 11, 57, 64, 112, 119, 302, 309], "function": [0, 5, 12, 53, 58, 65, 113, 120, 211, 303, 310, 371], "cpu": [7, 8, 60, 61, 115, 116, 305, 306], "util": [8, 61, 116, 209, 210, 211, 212, 213, 214, 215, 216, 217, 306, 369, 370, 371, 372, 373, 374, 375, 376, 377], "cu": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "convolut": [10, 63, 118, 173, 247, 308, 354], "gpufun": [13, 66, 121, 311], "graph": [14, 67, 122, 312], "logic": [15, 68, 123, 313], "sequenc": [18, 71, 126, 316], "statist": [19, 72, 127, 317], "model": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 128, 129, 130, 318, 319, 320], "izh": [38, 96, 129, 319], "lif": [39, 97, 130, 320], "opto": [131, 139, 219, 321], "rbm": [40, 41, 42, 43, 44, 45, 46, 98, 99, 100, 101, 102, 103, 104, 132, 133, 134, 135, 136, 137, 138, 322, 323, 324, 325, 326, 327, 328], "rbm_helper": [42, 100, 134, 324], "rbm_sampl": [43, 101, 135, 325], "rbm_util": [44, 45, 46, 102, 103, 104, 136, 137, 138, 326, 327, 328], "stutil": [46, 104, 138, 328], "signal": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 329, 330, 331, 332, 333, 334, 335, 336], "coher": [141, 221, 330], "conv": [142, 222, 331], "morlet": [144, 224, 332], "multitap": [146, 226, 333], "ppc": [147, 227, 334], "savitskygolai": [149, 229, 335], "sde": [150, 203, 267, 336], "spatial": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "arrai": [153, 232, 338], "dct": [154, 233, 339], "distanc": [155, 234, 340], "fftzero": [156, 235, 341], "geometri": [157, 342], "kernel": [158, 236, 343], "mask": [159, 344], "phase": [160, 237, 345], "point": [161, 346], "spike": [163, 166, 167, 168, 239, 242, 243, 347, 349, 350, 351], "triangul": [164, 240, 348], "waveform": [168, 243, 351], "stat": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "circular": [172, 246, 353], "densiti": [174, 248, 355], "distribut": [175, 249, 356], "fast_kd": [177, 251, 357], "gaussian": [171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 245, 358], "glm": [187, 252, 359], "grid_search": [189, 360], "hmm": [191, 255, 361], "inform": [192, 256, 362], "mcint": [196, 260, 363], "minim": [197, 261, 364], "mixtur": [198, 262, 365], "modefind": [199, 263, 366], "pvalu": [201, 265, 367], "regress": [202, 266, 368], "getfftw": [1, 54, 212, 372], "hdfmat": [83, 213, 373], "string": [214, 374], "system": [206, 215, 375], "time": [216, 376], "tool": [208, 217, 377], "decor": 29, "linenois": [143, 223], "morlet_coher": [145, 225], "reson": [148, 228], "spatialpsd": [162, 238], "wave_parametric_model": [165, 241], "glmfit": [170, 244], "entropi": [176, 250], "gmm": [188, 253], "history_basi": [190, 254], "kent_reimann": [193, 257], "lesson": [194, 258], "matzner_bar": [195, 259], "gad_plos_2015": [195, 259], "mvg": [200, 264], "spatiotemporal_glm_util": [204, 268], "text": 207}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"functions module": [[0, "module-functions"]], "getfftw module": [[1, "module-getfftw"]], "gpu package": [[2, "gpu-package"]], "Subpackages": [[2, "subpackages"], [37, "subpackages"], [40, "subpackages"], [48, "subpackages"], [55, "subpackages"], [95, "subpackages"], [98, "subpackages"], [106, "subpackages"], [110, "subpackages"], [132, "subpackages"], [273, "subpackages"], [296, "subpackages"], [300, "subpackages"], [322, "subpackages"]], "Module contents": [[2, "module-gpu"], [3, "module-gpu.cl"], [7, "module-gpu.cpu"], [9, "module-gpu.cu"], [20, "module-graphics"], [26, "module-jobs"], [33, "module-linalg"], [37, "module-models"], [40, "module-contents"], [44, "module-contents"], [48, "module-neurotools"], [50, "module-contents"], [55, "module-contents"], [56, "module-contents"], [60, "module-contents"], [62, "module-contents"], [73, "module-neurotools.graphics"], [84, "module-neurotools.jobs"], [91, "module-neurotools.linalg"], [95, "module-contents"], [98, "module-contents"], [102, "module-contents"], [106, "module-neurotools.obsolete"], [107, "module-neurotools.obsolete.encoding"], [110, "module-neurotools.obsolete.gpu"], [111, "module-neurotools.obsolete.gpu.cl"], [115, "module-neurotools.obsolete.gpu.cpu"], [117, "module-neurotools.obsolete.gpu.cu"], [128, "module-neurotools.obsolete.models"], [132, "module-contents"], [136, "module-contents"], [140, "module-neurotools.signal"], [152, "module-neurotools.spatial"], [166, "module-neurotools.spikes"], [169, "module-neurotools.stats"], [209, "module-neurotools.util"], [220, "module-signal"], [231, "module-spatial"], [273, "module-neurotools"], [274, "module-neurotools.graphics"], [284, "module-neurotools.jobs"], [291, "module-neurotools.linalg"], [296, "module-neurotools.obsolete"], [297, "module-neurotools.obsolete.encoding"], [300, "module-neurotools.obsolete.gpu"], [301, "module-neurotools.obsolete.gpu.cl"], [305, "module-neurotools.obsolete.gpu.cpu"], [307, "module-neurotools.obsolete.gpu.cu"], [318, "module-neurotools.obsolete.models"], [322, "module-contents"], [326, "module-contents"], [329, "module-neurotools.signal"], [337, "module-neurotools.spatial"], [349, "module-neurotools.spikes"], [352, "module-neurotools.stats"], [369, "module-neurotools.util"]], "gpu.cl package": [[3, "gpu-cl-package"]], "Submodules": [[3, "submodules"], [7, "submodules"], [9, "submodules"], [20, "submodules"], [26, "submodules"], [33, "submodules"], [37, "submodules"], [40, "submodules"], [44, "submodules"], [48, "submodules"], [50, "submodules"], [56, "submodules"], [60, "submodules"], [62, "submodules"], [73, "submodules"], [84, "submodules"], [91, "submodules"], [95, "submodules"], [98, "submodules"], [102, "submodules"], [106, "submodules"], [107, "submodules"], [111, "submodules"], [115, "submodules"], [117, "submodules"], [128, "submodules"], [132, "submodules"], [136, "submodules"], [140, "submodules"], [152, "submodules"], [166, "submodules"], [169, "submodules"], [209, "submodules"], [220, "submodules"], [231, "submodules"], [273, "submodules"], [274, "submodules"], [284, "submodules"], [291, "submodules"], [296, "submodules"], [297, "submodules"], [301, "submodules"], [305, "submodules"], [307, "submodules"], [318, "submodules"], [322, "submodules"], [326, "submodules"], [329, "submodules"], [337, "submodules"], [349, "submodules"], [352, "submodules"], [369, "submodules"]], "gpu.cl.device module": [[4, "gpu-cl-device-module"]], "gpu.cl.function module": [[5, "gpu-cl-function-module"]], "gpu.cl.matrix module": [[6, "gpu-cl-matrix-module"]], "gpu.cpu package": [[7, "gpu-cpu-package"]], "gpu.cpu.util module": [[8, "module-gpu.cpu.util"]], "gpu.cu package": [[9, "gpu-cu-package"]], "gpu.cu.convolution module": [[10, "module-gpu.cu.convolution"]], "gpu.cu.device module": [[11, "module-gpu.cu.device"]], "gpu.cu.function module": [[12, "module-gpu.cu.function"]], "gpu.cu.gpufun module": [[13, "module-gpu.cu.gpufun"]], "gpu.cu.graph module": [[14, "module-gpu.cu.graph"]], "gpu.cu.logic module": [[15, "module-gpu.cu.logic"]], "gpu.cu.matrix module": [[16, "gpu-cu-matrix-module"]], "gpu.cu.plot module": [[17, "module-gpu.cu.plot"]], "gpu.cu.sequence module": [[18, "module-gpu.cu.sequence"]], "gpu.cu.statistics module": [[19, "gpu-cu-statistics-module"]], "graphics package": [[20, "graphics-package"]], "graphics.color module": [[21, "module-graphics.color"]], "graphics.image module": [[22, "module-graphics.image"]], "graphics.matplotlib module": [[23, "module-graphics.matplotlib"]], "graphics.plot module": [[24, "module-graphics.plot"]], "graphics.pygame module": [[25, "module-graphics.pygame"]], "jobs package": [[26, "jobs-package"]], "jobs.cache module": [[27, "module-jobs.cache"]], "jobs.closure module": [[28, "module-jobs.closure"]], "jobs.decorator module": [[29, "jobs-decorator-module"]], "jobs.filenames module": [[30, "module-jobs.filenames"]], "jobs.initialize_system_cache module": [[31, "module-jobs.initialize_system_cache"]], "jobs.parallel module": [[32, "module-jobs.parallel"]], "linalg package": [[33, "linalg-package"]], "linalg.arguments module": [[34, "module-linalg.arguments"]], "linalg.matrix module": [[35, "module-linalg.matrix"]], "linalg.operators module": [[36, "module-linalg.operators"]], "models package": [[37, "models-package"]], "models.izh module": [[38, "module-models.izh"]], "models.lif module": [[39, "module-models.lif"]], "models.rbm package": [[40, "models-rbm-package"]], "models.rbm.rbm module": [[41, "models-rbm-rbm-module"]], "models.rbm.rbm_helper module": [[42, "models-rbm-rbm-helper-module"]], "models.rbm.rbm_sample module": [[43, "models-rbm-rbm-sample-module"]], "models.rbm.rbm_utils package": [[44, "models-rbm-rbm-utils-package"]], "models.rbm.rbm_utils.rbm module": [[45, "models-rbm-rbm-utils-rbm-module"]], "models.rbm.rbm_utils.stutils module": [[46, "models-rbm-rbm-utils-stutils-module"]], "neurotools": [[47, "neurotools"], [272, "neurotools"]], "neurotools package": [[48, "neurotools-package"], [273, "neurotools-package"]], "neurotools.dependencies module": [[49, "neurotools-dependencies-module"]], "neurotools.encoding package": [[50, "neurotools-encoding-package"]], "neurotools.encoding.Huffman module": [[51, "neurotools-encoding-huffman-module"]], "neurotools.encoding.NaryHuffman module": [[52, "neurotools-encoding-naryhuffman-module"]], "neurotools.functions module": [[53, "neurotools-functions-module"]], "neurotools.getfftw module": [[54, "neurotools-getfftw-module"]], "neurotools.gpu package": [[55, "neurotools-gpu-package"]], "neurotools.gpu.cl package": [[56, "neurotools-gpu-cl-package"]], "neurotools.gpu.cl.device module": [[57, "neurotools-gpu-cl-device-module"]], "neurotools.gpu.cl.function module": [[58, "neurotools-gpu-cl-function-module"]], "neurotools.gpu.cl.matrix module": [[59, "neurotools-gpu-cl-matrix-module"]], "neurotools.gpu.cpu package": [[60, "neurotools-gpu-cpu-package"]], "neurotools.gpu.cpu.util module": [[61, "neurotools-gpu-cpu-util-module"]], "neurotools.gpu.cu package": [[62, "neurotools-gpu-cu-package"]], "neurotools.gpu.cu.convolution module": [[63, "neurotools-gpu-cu-convolution-module"]], "neurotools.gpu.cu.device module": [[64, "neurotools-gpu-cu-device-module"]], "neurotools.gpu.cu.function module": [[65, "neurotools-gpu-cu-function-module"]], "neurotools.gpu.cu.gpufun module": [[66, "neurotools-gpu-cu-gpufun-module"]], "neurotools.gpu.cu.graph module": [[67, "neurotools-gpu-cu-graph-module"]], "neurotools.gpu.cu.logic module": [[68, "neurotools-gpu-cu-logic-module"]], "neurotools.gpu.cu.matrix module": [[69, "neurotools-gpu-cu-matrix-module"]], "neurotools.gpu.cu.plot module": [[70, "neurotools-gpu-cu-plot-module"]], "neurotools.gpu.cu.sequence module": [[71, "neurotools-gpu-cu-sequence-module"]], "neurotools.gpu.cu.statistics module": [[72, "neurotools-gpu-cu-statistics-module"]], "neurotools.graphics package": [[73, "neurotools-graphics-package"], [274, "neurotools-graphics-package"]], "neurotools.graphics.color module": [[74, "module-neurotools.graphics.color"], [275, "module-neurotools.graphics.color"]], "neurotools.graphics.colormaps module": [[75, "module-neurotools.graphics.colormaps"], [276, "module-neurotools.graphics.colormaps"]], "neurotools.graphics.dendron module": [[76, "module-neurotools.graphics.dendron"], [277, "module-neurotools.graphics.dendron"]], "neurotools.graphics.fabio_maps module": [[77, "module-neurotools.graphics.fabio_maps"], [278, "module-neurotools.graphics.fabio_maps"]], "neurotools.graphics.image module": [[78, "module-neurotools.graphics.image"], [279, "module-neurotools.graphics.image"]], "neurotools.graphics.matplotlib module": [[79, "module-neurotools.graphics.matplotlib"], [280, "module-neurotools.graphics.matplotlib"]], "neurotools.graphics.plot module": [[80, "module-neurotools.graphics.plot"], [281, "module-neurotools.graphics.plot"]], "neurotools.graphics.pygame module": [[81, "module-neurotools.graphics.pygame"], [282, "module-neurotools.graphics.pygame"]], "neurotools.graphics.ztransform_plot_helpers module": [[82, "neurotools-graphics-ztransform-plot-helpers-module"], [283, "neurotools-graphics-ztransform-plot-helpers-module"]], "neurotools.hdfmat module": [[83, "neurotools-hdfmat-module"]], "neurotools.jobs package": [[84, "neurotools-jobs-package"], [284, "neurotools-jobs-package"]], "neurotools.jobs.cache module": [[85, "module-neurotools.jobs.cache"], [285, "module-neurotools.jobs.cache"]], "neurotools.jobs.closure module": [[86, "module-neurotools.jobs.closure"], [286, "module-neurotools.jobs.closure"]], "neurotools.jobs.filenames module": [[87, "module-neurotools.jobs.filenames"], [287, "module-neurotools.jobs.filenames"]], "neurotools.jobs.initialize_system_cache module": [[88, "module-neurotools.jobs.initialize_system_cache"], [288, "module-neurotools.jobs.initialize_system_cache"]], "neurotools.jobs.ndecorator module": [[89, "module-neurotools.jobs.ndecorator"], [289, "module-neurotools.jobs.ndecorator"]], "neurotools.jobs.parallel module": [[90, "module-neurotools.jobs.parallel"], [290, "module-neurotools.jobs.parallel"]], "neurotools.linalg package": [[91, "neurotools-linalg-package"], [291, "neurotools-linalg-package"]], "neurotools.linalg.arguments module": [[92, "module-neurotools.linalg.arguments"], [292, "module-neurotools.linalg.arguments"]], "neurotools.linalg.matrix module": [[93, "module-neurotools.linalg.matrix"], [293, "module-neurotools.linalg.matrix"]], "neurotools.linalg.operators module": [[94, "module-neurotools.linalg.operators"], [294, "module-neurotools.linalg.operators"]], "neurotools.models package": [[95, "neurotools-models-package"]], "neurotools.models.izh module": [[96, "neurotools-models-izh-module"]], "neurotools.models.lif module": [[97, "neurotools-models-lif-module"]], "neurotools.models.rbm package": [[98, "neurotools-models-rbm-package"]], "neurotools.models.rbm.rbm module": [[99, "neurotools-models-rbm-rbm-module"]], "neurotools.models.rbm.rbm_helper module": [[100, "neurotools-models-rbm-rbm-helper-module"]], "neurotools.models.rbm.rbm_sample module": [[101, "neurotools-models-rbm-rbm-sample-module"]], "neurotools.models.rbm.rbm_utils package": [[102, "neurotools-models-rbm-rbm-utils-package"]], "neurotools.models.rbm.rbm_utils.rbm module": [[103, "neurotools-models-rbm-rbm-utils-rbm-module"]], "neurotools.models.rbm.rbm_utils.stutils module": [[104, "neurotools-models-rbm-rbm-utils-stutils-module"]], "neurotools.nlab module": [[105, "module-neurotools.nlab"], [295, "module-neurotools.nlab"]], "neurotools.obsolete package": [[106, "neurotools-obsolete-package"], [296, "neurotools-obsolete-package"]], "neurotools.obsolete.encoding package": [[107, "neurotools-obsolete-encoding-package"], [297, "neurotools-obsolete-encoding-package"]], "neurotools.obsolete.encoding.Huffman module": [[108, "module-neurotools.obsolete.encoding.Huffman"], [298, "module-neurotools.obsolete.encoding.Huffman"]], "neurotools.obsolete.encoding.NaryHuffman module": [[109, "module-neurotools.obsolete.encoding.NaryHuffman"], [299, "module-neurotools.obsolete.encoding.NaryHuffman"]], "neurotools.obsolete.gpu package": [[110, "neurotools-obsolete-gpu-package"], [300, "neurotools-obsolete-gpu-package"]], "neurotools.obsolete.gpu.cl package": [[111, "neurotools-obsolete-gpu-cl-package"], [301, "neurotools-obsolete-gpu-cl-package"]], "neurotools.obsolete.gpu.cl.device module": [[112, "neurotools-obsolete-gpu-cl-device-module"], [302, "neurotools-obsolete-gpu-cl-device-module"]], "neurotools.obsolete.gpu.cl.function module": [[113, "neurotools-obsolete-gpu-cl-function-module"], [303, "neurotools-obsolete-gpu-cl-function-module"]], "neurotools.obsolete.gpu.cl.matrix module": [[114, "neurotools-obsolete-gpu-cl-matrix-module"], [304, "neurotools-obsolete-gpu-cl-matrix-module"]], "neurotools.obsolete.gpu.cpu package": [[115, "neurotools-obsolete-gpu-cpu-package"], [305, "neurotools-obsolete-gpu-cpu-package"]], "neurotools.obsolete.gpu.cpu.util module": [[116, "module-neurotools.obsolete.gpu.cpu.util"], [306, "module-neurotools.obsolete.gpu.cpu.util"]], "neurotools.obsolete.gpu.cu package": [[117, "neurotools-obsolete-gpu-cu-package"], [307, "neurotools-obsolete-gpu-cu-package"]], "neurotools.obsolete.gpu.cu.convolution module": [[118, "module-neurotools.obsolete.gpu.cu.convolution"], [308, "module-neurotools.obsolete.gpu.cu.convolution"]], "neurotools.obsolete.gpu.cu.device module": [[119, "module-neurotools.obsolete.gpu.cu.device"], [309, "module-neurotools.obsolete.gpu.cu.device"]], "neurotools.obsolete.gpu.cu.function module": [[120, "module-neurotools.obsolete.gpu.cu.function"], [310, "module-neurotools.obsolete.gpu.cu.function"]], "neurotools.obsolete.gpu.cu.gpufun module": [[121, "module-neurotools.obsolete.gpu.cu.gpufun"], [311, "module-neurotools.obsolete.gpu.cu.gpufun"]], "neurotools.obsolete.gpu.cu.graph module": [[122, "module-neurotools.obsolete.gpu.cu.graph"], [312, "module-neurotools.obsolete.gpu.cu.graph"]], "neurotools.obsolete.gpu.cu.logic module": [[123, "module-neurotools.obsolete.gpu.cu.logic"], [313, "module-neurotools.obsolete.gpu.cu.logic"]], "neurotools.obsolete.gpu.cu.matrix module": [[124, "neurotools-obsolete-gpu-cu-matrix-module"], [314, "neurotools-obsolete-gpu-cu-matrix-module"]], "neurotools.obsolete.gpu.cu.plot module": [[125, "module-neurotools.obsolete.gpu.cu.plot"], [315, "module-neurotools.obsolete.gpu.cu.plot"]], "neurotools.obsolete.gpu.cu.sequence module": [[126, "module-neurotools.obsolete.gpu.cu.sequence"], [316, "module-neurotools.obsolete.gpu.cu.sequence"]], "neurotools.obsolete.gpu.cu.statistics module": [[127, "neurotools-obsolete-gpu-cu-statistics-module"], [317, "neurotools-obsolete-gpu-cu-statistics-module"]], "neurotools.obsolete.models package": [[128, "neurotools-obsolete-models-package"], [318, "neurotools-obsolete-models-package"]], "neurotools.obsolete.models.izh module": [[129, "module-neurotools.obsolete.models.izh"], [319, "module-neurotools.obsolete.models.izh"]], "neurotools.obsolete.models.lif module": [[130, "module-neurotools.obsolete.models.lif"], [320, "module-neurotools.obsolete.models.lif"]], "neurotools.obsolete.opto module": [[131, "neurotools-obsolete-opto-module"], [321, "neurotools-obsolete-opto-module"]], "neurotools.obsolete.rbm package": [[132, "neurotools-obsolete-rbm-package"], [322, "neurotools-obsolete-rbm-package"]], "neurotools.obsolete.rbm.rbm module": [[133, "neurotools-obsolete-rbm-rbm-module"], [323, "neurotools-obsolete-rbm-rbm-module"]], "neurotools.obsolete.rbm.rbm_helper module": [[134, "neurotools-obsolete-rbm-rbm-helper-module"], [324, "neurotools-obsolete-rbm-rbm-helper-module"]], "neurotools.obsolete.rbm.rbm_sample module": [[135, "neurotools-obsolete-rbm-rbm-sample-module"], [325, "neurotools-obsolete-rbm-rbm-sample-module"]], "neurotools.obsolete.rbm.rbm_utils package": [[136, "neurotools-obsolete-rbm-rbm-utils-package"], [326, "neurotools-obsolete-rbm-rbm-utils-package"]], "neurotools.obsolete.rbm.rbm_utils.rbm module": [[137, "neurotools-obsolete-rbm-rbm-utils-rbm-module"], [327, "neurotools-obsolete-rbm-rbm-utils-rbm-module"]], "neurotools.obsolete.rbm.rbm_utils.stutils module": [[138, "neurotools-obsolete-rbm-rbm-utils-stutils-module"], [328, "neurotools-obsolete-rbm-rbm-utils-stutils-module"]], "neurotools.opto module": [[139, "neurotools-opto-module"]], "neurotools.signal package": [[140, "neurotools-signal-package"], [329, "neurotools-signal-package"]], "neurotools.signal.coherence module": [[141, "module-neurotools.signal.coherence"], [330, "module-neurotools.signal.coherence"]], "neurotools.signal.conv module": [[142, "module-neurotools.signal.conv"], [331, "module-neurotools.signal.conv"]], "neurotools.signal.linenoise module": [[143, "neurotools-signal-linenoise-module"]], "neurotools.signal.morlet module": [[144, "module-neurotools.signal.morlet"], [332, "module-neurotools.signal.morlet"]], "neurotools.signal.morlet_coherence module": [[145, "neurotools-signal-morlet-coherence-module"]], "neurotools.signal.multitaper module": [[146, "module-neurotools.signal.multitaper"], [333, "module-neurotools.signal.multitaper"]], "neurotools.signal.ppc module": [[147, "module-neurotools.signal.ppc"], [334, "module-neurotools.signal.ppc"]], "neurotools.signal.resonator module": [[148, "neurotools-signal-resonator-module"]], "neurotools.signal.savitskygolay module": [[149, "module-neurotools.signal.savitskygolay"], [335, "module-neurotools.signal.savitskygolay"]], "neurotools.signal.sde module": [[150, "module-neurotools.signal.sde"], [336, "module-neurotools.signal.sde"]], "neurotools.signal.signal module": [[151, "neurotools-signal-signal-module"]], "neurotools.spatial package": [[152, "neurotools-spatial-package"], [337, "neurotools-spatial-package"]], "neurotools.spatial.array module": [[153, "module-neurotools.spatial.array"], [338, "module-neurotools.spatial.array"]], "neurotools.spatial.dct module": [[154, "module-neurotools.spatial.dct"], [339, "module-neurotools.spatial.dct"]], "neurotools.spatial.distance module": [[155, "module-neurotools.spatial.distance"], [340, "module-neurotools.spatial.distance"]], "neurotools.spatial.fftzeros module": [[156, "module-neurotools.spatial.fftzeros"], [341, "module-neurotools.spatial.fftzeros"]], "neurotools.spatial.geometry module": [[157, "neurotools-spatial-geometry-module"], [342, "neurotools-spatial-geometry-module"]], "neurotools.spatial.kernels module": [[158, "module-neurotools.spatial.kernels"], [343, "module-neurotools.spatial.kernels"]], "neurotools.spatial.masking module": [[159, "neurotools-spatial-masking-module"], [344, "neurotools-spatial-masking-module"]], "neurotools.spatial.phase module": [[160, "module-neurotools.spatial.phase"], [345, "module-neurotools.spatial.phase"]], "neurotools.spatial.points module": [[161, "module-neurotools.spatial.points"], [346, "module-neurotools.spatial.points"]], "neurotools.spatial.spatialPSD module": [[162, "neurotools-spatial-spatialpsd-module"]], "neurotools.spatial.spiking module": [[163, "module-neurotools.spatial.spiking"], [347, "module-neurotools.spatial.spiking"]], "neurotools.spatial.triangulation module": [[164, "module-neurotools.spatial.triangulation"], [348, "module-neurotools.spatial.triangulation"]], "neurotools.spatial.wave_parametric_models module": [[165, "neurotools-spatial-wave-parametric-models-module"]], "neurotools.spikes package": [[166, "neurotools-spikes-package"], [349, "neurotools-spikes-package"]], "neurotools.spikes.spikes module": [[167, "module-neurotools.spikes.spikes"], [350, "module-neurotools.spikes.spikes"]], "neurotools.spikes.waveform module": [[168, "module-neurotools.spikes.waveform"], [351, "module-neurotools.spikes.waveform"]], "neurotools.stats package": [[169, "neurotools-stats-package"], [352, "neurotools-stats-package"]], "neurotools.stats.GLMFit module": [[170, "neurotools-stats-glmfit-module"]], "neurotools.stats.Gaussian module": [[171, "neurotools-stats-gaussian-module"]], "neurotools.stats.circular module": [[172, "module-neurotools.stats.circular"], [353, "module-neurotools.stats.circular"]], "neurotools.stats.convolutional module": [[173, "module-neurotools.stats.convolutional"], [354, "module-neurotools.stats.convolutional"]], "neurotools.stats.density module": [[174, "module-neurotools.stats.density"], [355, "module-neurotools.stats.density"]], "neurotools.stats.distributions module": [[175, "module-neurotools.stats.distributions"], [356, "module-neurotools.stats.distributions"]], "neurotools.stats.entropy module": [[176, "neurotools-stats-entropy-module"]], "neurotools.stats.fast_kde module": [[177, "module-neurotools.stats.fast_kde"], [357, "module-neurotools.stats.fast_kde"]], "neurotools.stats.gaussian module": [[178, "module-neurotools.stats.gaussian"], [179, "module-neurotools.stats.gaussian"], [180, "module-neurotools.stats.gaussian"], [181, "module-neurotools.stats.gaussian"], [182, "module-neurotools.stats.gaussian"], [183, "module-neurotools.stats.gaussian"], [184, "module-neurotools.stats.gaussian"], [185, "module-neurotools.stats.gaussian"], [186, "module-neurotools.stats.gaussian"], [358, "module-neurotools.stats.gaussian"]], "neurotools.stats.glm module": [[187, "module-neurotools.stats.glm"], [359, "module-neurotools.stats.glm"]], "neurotools.stats.gmm module": [[188, "neurotools-stats-gmm-module"]], "neurotools.stats.grid_search module": [[189, "module-neurotools.stats.grid_search"], [360, "module-neurotools.stats.grid_search"]], "neurotools.stats.history_basis module": [[190, "neurotools-stats-history-basis-module"]], "neurotools.stats.hmm module": [[191, "module-neurotools.stats.hmm"], [361, "module-neurotools.stats.hmm"]], "neurotools.stats.information module": [[192, "module-neurotools.stats.information"], [362, "module-neurotools.stats.information"]], "neurotools.stats.kent_reimann module": [[193, "neurotools-stats-kent-reimann-module"]], "neurotools.stats.lessons module": [[194, "neurotools-stats-lessons-module"]], "neurotools.stats.matzner_bar-gad_PLoS_2015 module": [[195, "neurotools-stats-matzner-bar-gad-plos-2015-module"]], "neurotools.stats.mcint module": [[196, "module-neurotools.stats.mcint"], [363, "module-neurotools.stats.mcint"]], "neurotools.stats.minimize module": [[197, "module-neurotools.stats.minimize"], [364, "module-neurotools.stats.minimize"]], "neurotools.stats.mixtures module": [[198, "module-neurotools.stats.mixtures"], [365, "module-neurotools.stats.mixtures"]], "neurotools.stats.modefind module": [[199, "module-neurotools.stats.modefind"], [366, "module-neurotools.stats.modefind"]], "neurotools.stats.mvg module": [[200, "neurotools-stats-mvg-module"]], "neurotools.stats.pvalues module": [[201, "module-neurotools.stats.pvalues"], [367, "module-neurotools.stats.pvalues"]], "neurotools.stats.regressions module": [[202, "module-neurotools.stats.regressions"], [368, "module-neurotools.stats.regressions"]], "neurotools.stats.sde module": [[203, "neurotools-stats-sde-module"]], "neurotools.stats.spatiotemporal_glm_utils module": [[204, "neurotools-stats-spatiotemporal-glm-utils-module"]], "neurotools.stats.stats module": [[205, "neurotools-stats-stats-module"]], "neurotools.system module": [[206, "neurotools-system-module"]], "neurotools.text module": [[207, "neurotools-text-module"]], "neurotools.tools module": [[208, "neurotools-tools-module"]], "neurotools.util package": [[209, "neurotools-util-package"], [369, "neurotools-util-package"]], "neurotools.util.dependencies module": [[210, "neurotools-util-dependencies-module"], [370, "neurotools-util-dependencies-module"]], "neurotools.util.functions module": [[211, "module-neurotools.util.functions"], [371, "module-neurotools.util.functions"]], "neurotools.util.getfftw module": [[212, "module-neurotools.util.getfftw"], [372, "module-neurotools.util.getfftw"]], "neurotools.util.hdfmat module": [[213, "module-neurotools.util.hdfmat"], [373, "module-neurotools.util.hdfmat"]], "neurotools.util.string module": [[214, "module-neurotools.util.string"], [374, "module-neurotools.util.string"]], "neurotools.util.system module": [[215, "module-neurotools.util.system"], [375, "module-neurotools.util.system"]], "neurotools.util.time module": [[216, "module-neurotools.util.time"], [376, "module-neurotools.util.time"]], "neurotools.util.tools module": [[217, "module-neurotools.util.tools"], [377, "module-neurotools.util.tools"]], "nlab module": [[218, "module-nlab"]], "opto module": [[219, "opto-module"]], "signal package": [[220, "signal-package"]], "signal.coherence module": [[221, "signal-coherence-module"]], "signal.conv module": [[222, "signal-conv-module"]], "signal.linenoise module": [[223, "signal-linenoise-module"]], "signal.morlet module": [[224, "signal-morlet-module"]], "signal.morlet_coherence module": [[225, "signal-morlet-coherence-module"]], "signal.multitaper module": [[226, "signal-multitaper-module"]], "signal.ppc module": [[227, "signal-ppc-module"]], "signal.resonator module": [[228, "signal-resonator-module"]], "signal.savitskygolay module": [[229, "signal-savitskygolay-module"]], "signal.signal module": [[230, "module-signal.signal"]], "spatial package": [[231, "spatial-package"]], "spatial.array module": [[232, "module-spatial.array"]], "spatial.dct module": [[233, "module-spatial.dct"]], "spatial.distance module": [[234, "module-spatial.distance"]], "spatial.fftzeros module": [[235, "module-spatial.fftzeros"]], "spatial.kernels module": [[236, "module-spatial.kernels"]], "spatial.phase module": [[237, "module-spatial.phase"]], "spatial.spatialPSD module": [[238, "spatial-spatialpsd-module"]], "spatial.spiking module": [[239, "module-spatial.spiking"]], "spatial.triangulation module": [[240, "module-spatial.triangulation"]], "spatial.wave_parametric_models module": [[241, "spatial-wave-parametric-models-module"]], "spikes.spikes module": [[242, "module-spikes.spikes"]], "spikes.waveform module": [[243, "module-spikes.waveform"]], "stats.GLMFit module": [[244, "stats-glmfit-module"]], "stats.Gaussian module": [[245, "stats-gaussian-module"]], "stats.circular module": [[246, "module-stats.circular"]], "stats.convolutional module": [[247, "module-stats.convolutional"]], "stats.density module": [[248, "module-stats.density"]], "stats.distributions module": [[249, "module-stats.distributions"]], "stats.entropy module": [[250, "stats-entropy-module"]], "stats.fast_kde module": [[251, "module-stats.fast_kde"]], "stats.glm module": [[252, "module-stats.glm"]], "stats.gmm module": [[253, "stats-gmm-module"]], "stats.history_basis module": [[254, "stats-history-basis-module"]], "stats.hmm module": [[255, "module-stats.hmm"]], "stats.information module": [[256, "module-stats.information"]], "stats.kent_reimann module": [[257, "stats-kent-reimann-module"]], "stats.lessons module": [[258, "stats-lessons-module"]], "stats.matzner_bar-gad_PLoS_2015 module": [[259, "stats-matzner-bar-gad-plos-2015-module"]], "stats.mcint module": [[260, "module-stats.mcint"]], "stats.minimize module": [[261, "module-stats.minimize"]], "stats.mixtures module": [[262, "module-stats.mixtures"]], "stats.modefind module": [[263, "module-stats.modefind"]], "stats.mvg module": [[264, "stats-mvg-module"]], "stats.pvalues module": [[265, "module-stats.pvalues"]], "stats.regressions module": [[266, "module-stats.regressions"]], "stats.sde module": [[267, "stats-sde-module"]], "stats.spatiotemporal_glm_utils module": [[268, "stats-spatiotemporal-glm-utils-module"]], "stats.stats module": [[269, "stats-stats-module"]], "dependencies module": [[270, "dependencies-module"]], "Neurotools": [[271, "neurotools"]], "Indices and tables": [[271, "indices-and-tables"]], "Subpackages:": [[271, null]]}, "indexentries": {"dsigmoid() (in module functions)": [[0, "functions.dsigmoid"]], "f() (in module functions)": [[0, "functions.f"]], "f1() (in module functions)": [[0, "functions.f1"]], "f2() (in module functions)": [[0, "functions.f2"]], "functions": [[0, "module-functions"]], "g() (in module functions)": [[0, "functions.g"]], "inversesigmoid() (in module functions)": [[0, "functions.inversesigmoid"]], "log_factorial() (in module functions)": [[0, "functions.log_factorial"]], "module": [[0, "module-functions"], [1, "module-getfftw"], [2, "module-gpu"], [3, "module-gpu.cl"], [7, "module-gpu.cpu"], [8, "module-gpu.cpu.util"], [9, "module-gpu.cu"], [10, "module-gpu.cu.convolution"], [11, "module-gpu.cu.device"], [12, "module-gpu.cu.function"], [13, "module-gpu.cu.gpufun"], [14, "module-gpu.cu.graph"], [15, "module-gpu.cu.logic"], [17, "module-gpu.cu.plot"], [18, "module-gpu.cu.sequence"], [20, "module-graphics"], [21, "module-graphics.color"], [22, "module-graphics.image"], [23, "module-graphics.matplotlib"], [24, "module-graphics.plot"], [25, "module-graphics.pygame"], [26, "module-jobs"], [27, "module-jobs.cache"], [28, "module-jobs.closure"], [30, "module-jobs.filenames"], [31, "module-jobs.initialize_system_cache"], [32, "module-jobs.parallel"], [33, "module-linalg"], [34, "module-linalg.arguments"], [35, "module-linalg.matrix"], [36, "module-linalg.operators"], [37, "module-models"], [38, "module-models.izh"], [39, "module-models.lif"], [48, "module-neurotools"], [73, "module-neurotools.graphics"], [74, "module-neurotools.graphics.color"], [75, "module-neurotools.graphics.colormaps"], [76, "module-neurotools.graphics.dendron"], [77, "module-neurotools.graphics.fabio_maps"], [78, "module-neurotools.graphics.image"], [79, "module-neurotools.graphics.matplotlib"], [80, "module-neurotools.graphics.plot"], [81, "module-neurotools.graphics.pygame"], [84, "module-neurotools.jobs"], [85, "module-neurotools.jobs.cache"], [86, "module-neurotools.jobs.closure"], [87, "module-neurotools.jobs.filenames"], [88, "module-neurotools.jobs.initialize_system_cache"], [89, "module-neurotools.jobs.ndecorator"], [90, "module-neurotools.jobs.parallel"], [91, "module-neurotools.linalg"], [92, "module-neurotools.linalg.arguments"], [93, "module-neurotools.linalg.matrix"], [94, "module-neurotools.linalg.operators"], [105, "module-neurotools.nlab"], [106, "module-neurotools.obsolete"], [107, "module-neurotools.obsolete.encoding"], [108, "module-neurotools.obsolete.encoding.Huffman"], [109, "module-neurotools.obsolete.encoding.NaryHuffman"], [110, "module-neurotools.obsolete.gpu"], [111, "module-neurotools.obsolete.gpu.cl"], [115, "module-neurotools.obsolete.gpu.cpu"], [116, "module-neurotools.obsolete.gpu.cpu.util"], [117, "module-neurotools.obsolete.gpu.cu"], [118, "module-neurotools.obsolete.gpu.cu.convolution"], [119, "module-neurotools.obsolete.gpu.cu.device"], [120, "module-neurotools.obsolete.gpu.cu.function"], [121, "module-neurotools.obsolete.gpu.cu.gpufun"], [122, "module-neurotools.obsolete.gpu.cu.graph"], [123, "module-neurotools.obsolete.gpu.cu.logic"], [125, "module-neurotools.obsolete.gpu.cu.plot"], [126, "module-neurotools.obsolete.gpu.cu.sequence"], [128, "module-neurotools.obsolete.models"], [129, "module-neurotools.obsolete.models.izh"], [130, "module-neurotools.obsolete.models.lif"], [140, "module-neurotools.signal"], [141, "module-neurotools.signal.coherence"], [142, "module-neurotools.signal.conv"], [144, "module-neurotools.signal.morlet"], [146, "module-neurotools.signal.multitaper"], [147, "module-neurotools.signal.ppc"], [149, "module-neurotools.signal.savitskygolay"], [150, "module-neurotools.signal.sde"], [152, "module-neurotools.spatial"], [153, "module-neurotools.spatial.array"], [154, "module-neurotools.spatial.dct"], [155, "module-neurotools.spatial.distance"], [156, "module-neurotools.spatial.fftzeros"], [158, "module-neurotools.spatial.kernels"], [160, "module-neurotools.spatial.phase"], [161, "module-neurotools.spatial.points"], [163, "module-neurotools.spatial.spiking"], [164, "module-neurotools.spatial.triangulation"], [166, "module-neurotools.spikes"], [167, "module-neurotools.spikes.spikes"], [168, "module-neurotools.spikes.waveform"], [169, "module-neurotools.stats"], [172, "module-neurotools.stats.circular"], [173, "module-neurotools.stats.convolutional"], [174, "module-neurotools.stats.density"], [175, "module-neurotools.stats.distributions"], [177, "module-neurotools.stats.fast_kde"], [178, "module-neurotools.stats.gaussian"], [179, "module-neurotools.stats.gaussian"], [180, "module-neurotools.stats.gaussian"], [181, "module-neurotools.stats.gaussian"], [182, "module-neurotools.stats.gaussian"], [183, "module-neurotools.stats.gaussian"], [184, "module-neurotools.stats.gaussian"], [185, "module-neurotools.stats.gaussian"], [186, "module-neurotools.stats.gaussian"], [187, "module-neurotools.stats.glm"], [189, "module-neurotools.stats.grid_search"], [191, "module-neurotools.stats.hmm"], [192, "module-neurotools.stats.information"], [196, "module-neurotools.stats.mcint"], [197, "module-neurotools.stats.minimize"], [198, "module-neurotools.stats.mixtures"], [199, "module-neurotools.stats.modefind"], [201, "module-neurotools.stats.pvalues"], [202, "module-neurotools.stats.regressions"], [209, "module-neurotools.util"], [211, "module-neurotools.util.functions"], [212, "module-neurotools.util.getfftw"], [213, "module-neurotools.util.hdfmat"], [214, "module-neurotools.util.string"], [215, "module-neurotools.util.system"], [216, "module-neurotools.util.time"], [217, "module-neurotools.util.tools"], [218, "module-nlab"], [220, "module-signal"], [230, "module-signal.signal"], [231, "module-spatial"], [232, "module-spatial.array"], [233, "module-spatial.dct"], [234, "module-spatial.distance"], [235, "module-spatial.fftzeros"], [236, "module-spatial.kernels"], [237, "module-spatial.phase"], [239, "module-spatial.spiking"], [240, "module-spatial.triangulation"], [242, "module-spikes.spikes"], [243, "module-spikes.waveform"], [246, "module-stats.circular"], [247, "module-stats.convolutional"], [248, "module-stats.density"], [249, "module-stats.distributions"], [251, "module-stats.fast_kde"], [252, "module-stats.glm"], [255, "module-stats.hmm"], [256, "module-stats.information"], [260, "module-stats.mcint"], [261, "module-stats.minimize"], [262, "module-stats.mixtures"], [263, "module-stats.modefind"], [265, "module-stats.pvalues"], [266, "module-stats.regressions"], [273, "module-neurotools"], [274, "module-neurotools.graphics"], [275, "module-neurotools.graphics.color"], [276, "module-neurotools.graphics.colormaps"], [277, "module-neurotools.graphics.dendron"], [278, "module-neurotools.graphics.fabio_maps"], [279, "module-neurotools.graphics.image"], [280, "module-neurotools.graphics.matplotlib"], [281, "module-neurotools.graphics.plot"], [282, "module-neurotools.graphics.pygame"], [284, "module-neurotools.jobs"], [285, "module-neurotools.jobs.cache"], [286, "module-neurotools.jobs.closure"], [287, "module-neurotools.jobs.filenames"], [288, "module-neurotools.jobs.initialize_system_cache"], [289, "module-neurotools.jobs.ndecorator"], [290, "module-neurotools.jobs.parallel"], [291, "module-neurotools.linalg"], [292, "module-neurotools.linalg.arguments"], [293, "module-neurotools.linalg.matrix"], [294, "module-neurotools.linalg.operators"], [295, "module-neurotools.nlab"], [296, "module-neurotools.obsolete"], [297, "module-neurotools.obsolete.encoding"], [298, "module-neurotools.obsolete.encoding.Huffman"], [299, "module-neurotools.obsolete.encoding.NaryHuffman"], [300, "module-neurotools.obsolete.gpu"], [301, "module-neurotools.obsolete.gpu.cl"], [305, "module-neurotools.obsolete.gpu.cpu"], [306, "module-neurotools.obsolete.gpu.cpu.util"], [307, "module-neurotools.obsolete.gpu.cu"], [308, "module-neurotools.obsolete.gpu.cu.convolution"], [309, "module-neurotools.obsolete.gpu.cu.device"], [310, "module-neurotools.obsolete.gpu.cu.function"], [311, "module-neurotools.obsolete.gpu.cu.gpufun"], [312, "module-neurotools.obsolete.gpu.cu.graph"], [313, "module-neurotools.obsolete.gpu.cu.logic"], [315, "module-neurotools.obsolete.gpu.cu.plot"], [316, "module-neurotools.obsolete.gpu.cu.sequence"], [318, "module-neurotools.obsolete.models"], [319, "module-neurotools.obsolete.models.izh"], [320, "module-neurotools.obsolete.models.lif"], [329, "module-neurotools.signal"], [330, "module-neurotools.signal.coherence"], [331, "module-neurotools.signal.conv"], [332, "module-neurotools.signal.morlet"], [333, "module-neurotools.signal.multitaper"], [334, "module-neurotools.signal.ppc"], [335, "module-neurotools.signal.savitskygolay"], [336, "module-neurotools.signal.sde"], [337, "module-neurotools.spatial"], [338, "module-neurotools.spatial.array"], [339, "module-neurotools.spatial.dct"], [340, "module-neurotools.spatial.distance"], [341, "module-neurotools.spatial.fftzeros"], [343, "module-neurotools.spatial.kernels"], [345, "module-neurotools.spatial.phase"], [346, "module-neurotools.spatial.points"], [347, "module-neurotools.spatial.spiking"], [348, "module-neurotools.spatial.triangulation"], [349, "module-neurotools.spikes"], [350, "module-neurotools.spikes.spikes"], [351, "module-neurotools.spikes.waveform"], [352, "module-neurotools.stats"], [353, "module-neurotools.stats.circular"], [354, "module-neurotools.stats.convolutional"], [355, "module-neurotools.stats.density"], [356, "module-neurotools.stats.distributions"], [357, "module-neurotools.stats.fast_kde"], [358, "module-neurotools.stats.gaussian"], [359, "module-neurotools.stats.glm"], [360, "module-neurotools.stats.grid_search"], [361, "module-neurotools.stats.hmm"], [362, "module-neurotools.stats.information"], [363, "module-neurotools.stats.mcint"], [364, "module-neurotools.stats.minimize"], [365, "module-neurotools.stats.mixtures"], [366, "module-neurotools.stats.modefind"], [367, "module-neurotools.stats.pvalues"], [368, "module-neurotools.stats.regressions"], [369, "module-neurotools.util"], [371, "module-neurotools.util.functions"], [372, "module-neurotools.util.getfftw"], [373, "module-neurotools.util.hdfmat"], [374, "module-neurotools.util.string"], [375, "module-neurotools.util.system"], [376, "module-neurotools.util.time"], [377, "module-neurotools.util.tools"]], "npdf() (in module functions)": [[0, "functions.npdf"]], "sexp() (in module functions)": [[0, "functions.sexp"]], "sigmoid() (in module functions)": [[0, "functions.sigmoid"]], "slog() (in module functions)": [[0, "functions.slog"]], "ftwthr() (in module getfftw)": [[1, "getfftw.ftwthr"]], "getfftw": [[1, "module-getfftw"]], "gpu": [[2, "module-gpu"]], "gpu.cl": [[3, "module-gpu.cl"]], "missing() (in module gpu.cl)": [[3, "gpu.cl.missing"]], "gpu.cpu": [[7, "module-gpu.cpu"]], "cmap() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.cmap"]], "compose() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.compose"]], "corr() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.corr"]], "cov() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.cov"]], "cut() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.cut"]], "document() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.document"]], "dot() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.dot"]], "elem() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.elem"]], "fancy() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.fancy"]], "flat() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.flat"]], "gpu.cpu.util": [[8, "module-gpu.cpu.util"]], "idivup() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.idivup"]], "ldif() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.ldif"]], "ldif2() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.ldif2"]], "ldiv() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.ldiv"]], "ldiv2() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.ldiv2"]], "length() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.length"]], "lmul() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lmul"]], "lmul2() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lmul2"]], "lpow() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lpow"]], "lpow2() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lpow2"]], "lsum() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lsum"]], "lsum2() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.lsum2"]], "mdif() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mdif"]], "mdiv() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mdiv"]], "mean() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mean"]], "mmap() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mmap"]], "mmean() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mmean"]], "mmul() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mmul"]], "mpow() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mpow"]], "mstd() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mstd"]], "msum() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.msum"]], "mu() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mu"]], "mvar() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.mvar"]], "norm() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.norm"]], "rnorm() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.rnorm"]], "scale() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.scale"]], "sem() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.sem"]], "shift() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.shift"]], "sigma() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.sigma"]], "sstd() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.sstd"]], "std() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.std"]], "svar() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.svar"]], "var() (in module gpu.cpu.util)": [[8, "gpu.cpu.util.var"]], "gpu.cu": [[9, "module-gpu.cu"]], "gpu.cu.convolution": [[10, "module-gpu.cu.convolution"]], "gpuboxconv() (in module gpu.cu.convolution)": [[10, "gpu.cu.convolution.gpuboxconv"]], "gpuboxconv_core() (in module gpu.cu.convolution)": [[10, "gpu.cu.convolution.gpuboxconv_core"]], "card_info() (in module gpu.cu.device)": [[11, "gpu.cu.device.card_info"]], "estimateblocks() (in module gpu.cu.device)": [[11, "gpu.cu.device.estimateBlocks"]], "estimateloop() (in module gpu.cu.device)": [[11, "gpu.cu.device.estimateLoop"]], "estimatethreadsperblock() (in module gpu.cu.device)": [[11, "gpu.cu.device.estimateThreadsPerBlock"]], "gpu.cu.device": [[11, "module-gpu.cu.device"]], "missing() (in module gpu.cu.device)": [[11, "gpu.cu.device.missing"]], "cpu() (in module gpu.cu.function)": [[12, "gpu.cu.function.cpu"]], "expsub() (in module gpu.cu.function)": [[12, "gpu.cu.function.expsub"]], "ezkern() (in module gpu.cu.function)": [[12, "gpu.cu.function.ezkern"]], "format() (in module gpu.cu.function)": [[12, "gpu.cu.function.format"]], "gpu.cu.function": [[12, "module-gpu.cu.function"]], "gpubin() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpubin"]], "gpubinaryeq() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpubinaryeq"]], "gpufloat() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpufloat"]], "gpufloatmat() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpufloatmat"]], "gpufloatred() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpufloatred"]], "gpuint() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpuint"]], "gpuintmap() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpuintmap"]], "gpuintmat() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpuintmat"]], "gpuintred() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpuintred"]], "gpumap() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpumap"]], "gpumapeq() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpumapeq"]], "gpupointer() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpupointer"]], "gpuscalar() (in module gpu.cu.function)": [[12, "gpu.cu.function.gpuscalar"]], "guessgputype() (in module gpu.cu.function)": [[12, "gpu.cu.function.guessGPUType"]], "kernel() (in module gpu.cu.function)": [[12, "gpu.cu.function.kernel"]], "printkernel() (in module gpu.cu.function)": [[12, "gpu.cu.function.printKernel"]], "togputype() (in module gpu.cu.function)": [[12, "gpu.cu.function.toGPUType"]], "gpu.cu.gpufun": [[13, "module-gpu.cu.gpufun"]], "gpuhill() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpuhill"]], "gpulcomb() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpulcomb"]], "gpulogpdf() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpulogpdf"]], "gpumean() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpumean"]], "gpunpdf() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpunpdf"]], "gpurandexp() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpurandexp"]], "gpurandf() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpurandf"]], "gpuuniform() (in module gpu.cu.gpufun)": [[13, "gpu.cu.gpufun.gpuuniform"]], "connect_gaussian() (in module gpu.cu.graph)": [[14, "gpu.cu.graph.connect_gaussian"]], "gpu.cu.graph": [[14, "module-gpu.cu.graph"]], "random_point_sheet() (in module gpu.cu.graph)": [[14, "gpu.cu.graph.random_point_sheet"]], "spherepoints() (in module gpu.cu.graph)": [[14, "gpu.cu.graph.spherepoints"]], "uniform_point_sheet() (in module gpu.cu.graph)": [[14, "gpu.cu.graph.uniform_point_sheet"]], "gpu.cu.logic": [[15, "module-gpu.cu.logic"]], "gpuand() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpuand"]], "gpueq() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpueq"]], "gpugt() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpugt"]], "gpugteq() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpugteq"]], "gpuhzero() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpuhzero"]], "gpult() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpult"]], "gpulteq() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpulteq"]], "gpuneq() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpuneq"]], "gpunor() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpunor"]], "gpunot() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpunot"]], "gpurange() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpurange"]], "gpuyes() (in module gpu.cu.logic)": [[15, "gpu.cu.logic.gpuyes"]], "elementwisekernel() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.ElementwiseKernel"]], "gpu.cu.plot": [[17, "module-gpu.cu.plot"]], "gpubarlinedata() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.gpubarlinedata"]], "gpuhistogram() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.gpuhistogram"]], "missing() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.missing"]], "sebarline() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.sebarline"]], "sebarline2() (in module gpu.cu.plot)": [[17, "gpu.cu.plot.sebarline2"]], "frameeater() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.FrameEater"]], "gpuautometric() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.GPUAutometric"]], "gpudotmetric() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.GPUDotmetric"]], "gpumagmetric() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.GPUMagmetric"]], "gpupointautodistance() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.GPUPointAutoDistance"]], "gpusequenceautodetect() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.GPUSequenceAutoDetect"]], "deltamag() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.deltamag"]], "fitgaussbimodal() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.fitgaussbimodal"]], "fitgausstrimodal() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.fitgausstrimodal"]], "gpu.cu.sequence": [[18, "module-gpu.cu.sequence"]], "gpuderivative() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpuderivative"]], "gpulognpdf() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpulognpdf"]], "gpunpdf() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpunpdf"]], "gpusmooth() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpusmooth"]], "gpusubsetgfit() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpusubsetgfit"]], "gpusubsetmean() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gpusubsetmean"]], "gputhing() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.gputhing"]], "mulmag() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.mulmag"]], "summag() (in module gpu.cu.sequence)": [[18, "gpu.cu.sequence.summag"]], "graphics": [[20, "module-graphics"]], "rgbtohcl() (in module graphics.color)": [[21, "graphics.color.RGBtoHCL"]], "bit16_rgb_to_tuple() (in module graphics.color)": [[21, "graphics.color.bit16_RGB_to_tuple"]], "bit16_print_color() (in module graphics.color)": [[21, "graphics.color.bit16_print_color"]], "circularly_smooth_colormap() (in module graphics.color)": [[21, "graphics.color.circularly_smooth_colormap"]], "code_to_16bit() (in module graphics.color)": [[21, "graphics.color.code_to_16bit"]], "color_boxplot() (in module graphics.color)": [[21, "graphics.color.color_boxplot"]], "complexhlarr2rgb() (in module graphics.color)": [[21, "graphics.color.complexHLArr2RGB"]], "darkhues() (in module graphics.color)": [[21, "graphics.color.darkhues"]], "enumerate_fast_colors() (in module graphics.color)": [[21, "graphics.color.enumerate_fast_colors"]], "graphics.color": [[21, "module-graphics.color"]], "hcl2rgb() (in module graphics.color)": [[21, "graphics.color.hcl2rgb"]], "hex2rgb() (in module graphics.color)": [[21, "graphics.color.hex2rgb"]], "hex_pack_bgr() (in module graphics.color)": [[21, "graphics.color.hex_pack_BGR"]], "hsv2rgb() (in module graphics.color)": [[21, "graphics.color.hsv2rgb"]], "hue_angle() (in module graphics.color)": [[21, "graphics.color.hue_angle"]], "isoluminance1() (in module graphics.color)": [[21, "graphics.color.isoluminance1"]], "isoluminance2() (in module graphics.color)": [[21, "graphics.color.isoluminance2"]], "isoluminance3() (in module graphics.color)": [[21, "graphics.color.isoluminance3"]], "isoluminance4() (in module graphics.color)": [[21, "graphics.color.isoluminance4"]], "lighthues() (in module graphics.color)": [[21, "graphics.color.lighthues"]], "lightness() (in module graphics.color)": [[21, "graphics.color.lightness"]], "luminance_matrix() (in module graphics.color)": [[21, "graphics.color.luminance_matrix"]], "match_luminance() (in module graphics.color)": [[21, "graphics.color.match_luminance"]], "medhues() (in module graphics.color)": [[21, "graphics.color.medhues"]], "radl2rgb() (in module graphics.color)": [[21, "graphics.color.radl2rgb"]], "radl2rgblut() (in module graphics.color)": [[21, "graphics.color.radl2rgbLUT"]], "rgb2hex() (in module graphics.color)": [[21, "graphics.color.rgb2hex"]], "rotate() (in module graphics.color)": [[21, "graphics.color.rotate"]], "show_complete_fast_pallet() (in module graphics.color)": [[21, "graphics.color.show_complete_fast_pallet"]], "show_complete_fastest_pallet() (in module graphics.color)": [[21, "graphics.color.show_complete_fastest_pallet"]], "show_fast_pallet() (in module graphics.color)": [[21, "graphics.color.show_fast_pallet"]], "show_hex_pallet() (in module graphics.color)": [[21, "graphics.color.show_hex_pallet"]], "tuple_to_bit16() (in module graphics.color)": [[21, "graphics.color.tuple_to_bit16"]], "tuple_to_bit24() (in module graphics.color)": [[21, "graphics.color.tuple_to_bit24"]], "graphics.image": [[22, "module-graphics.image"]], "mean_center() (in module graphics.image)": [[22, "graphics.image.mean_center"]], "median_center() (in module graphics.image)": [[22, "graphics.image.median_center"]], "unitize() (in module graphics.image)": [[22, "graphics.image.unitize"]], "visualize_derivatives() (in module graphics.image)": [[22, "graphics.image.visualize_derivatives"]], "draw_array() (in module graphics.matplotlib)": [[23, "graphics.matplotlib.draw_array"]], "graphics.matplotlib": [[23, "module-graphics.matplotlib"]], "hide_toolbar() (in module graphics.matplotlib)": [[23, "graphics.matplotlib.hide_toolbar"]], "start() (in module graphics.matplotlib)": [[23, "graphics.matplotlib.start"]], "gaussian2d_covellipse() (in module graphics.plot)": [[24, "graphics.plot.Gaussian2D_covellipse"]], "handlersquare (class in graphics.plot)": [[24, "graphics.plot.HandlerSquare"]], "addspikes() (in module graphics.plot)": [[24, "graphics.plot.addspikes"]], "adjust_axis_height_pixels() (in module graphics.plot)": [[24, "graphics.plot.adjust_axis_height_pixels"]], "adjust_xlabel_space() (in module graphics.plot)": [[24, "graphics.plot.adjust_xlabel_space"]], "adjust_ylabel_space() (in module graphics.plot)": [[24, "graphics.plot.adjust_ylabel_space"]], "adjustmap() (in module graphics.plot)": [[24, "graphics.plot.adjustmap"]], "animate_complex() (in module graphics.plot)": [[24, "graphics.plot.animate_complex"]], "arrow_between() (in module graphics.plot)": [[24, "graphics.plot.arrow_between"]], "axvbands() (in module graphics.plot)": [[24, "graphics.plot.axvbands"]], "axvstripe() (in module graphics.plot)": [[24, "graphics.plot.axvstripe"]], "barcompare() (in module graphics.plot)": [[24, "graphics.plot.barcompare"]], "base_legend() (in module graphics.plot)": [[24, "graphics.plot.base_legend"]], "border_width() (in module graphics.plot)": [[24, "graphics.plot.border_width"]], "boxplot_significance() (in module graphics.plot)": [[24, "graphics.plot.boxplot_significance"]], "broken_step() (in module graphics.plot)": [[24, "graphics.plot.broken_step"]], "ceil_to_precision() (in module graphics.plot)": [[24, "graphics.plot.ceil_to_precision"]], "centers() (in module graphics.plot)": [[24, "graphics.plot.centers"]], "clean_y_range() (in module graphics.plot)": [[24, "graphics.plot.clean_y_range"]], "cleartop() (in module graphics.plot)": [[24, "graphics.plot.cleartop"]], "colored_boxplot() (in module graphics.plot)": [[24, "graphics.plot.colored_boxplot"]], "complex_axis() (in module graphics.plot)": [[24, "graphics.plot.complex_axis"]], "covariance_crosshairs() (in module graphics.plot)": [[24, "graphics.plot.covariance_crosshairs"]], "create_artists() (graphics.plot.handlersquare method)": [[24, "graphics.plot.HandlerSquare.create_artists"]], "darken() (in module graphics.plot)": [[24, "graphics.plot.darken"]], "domask() (in module graphics.plot)": [[24, "graphics.plot.domask"]], "draw_circle() (in module graphics.plot)": [[24, "graphics.plot.draw_circle"]], "expand_axis_x() (in module graphics.plot)": [[24, "graphics.plot.expand_axis_x"]], "expand_axis_y() (in module graphics.plot)": [[24, "graphics.plot.expand_axis_y"]], "expand_y_range() (in module graphics.plot)": [[24, "graphics.plot.expand_y_range"]], "figurebox() (in module graphics.plot)": [[24, "graphics.plot.figurebox"]], "flathist() (in module graphics.plot)": [[24, "graphics.plot.flathist"]], "floor_to_precision() (in module graphics.plot)": [[24, "graphics.plot.floor_to_precision"]], "force_aspect() (in module graphics.plot)": [[24, "graphics.plot.force_aspect"]], "fsize() (in module graphics.plot)": [[24, "graphics.plot.fsize"]], "fudgex() (in module graphics.plot)": [[24, "graphics.plot.fudgex"]], "fudgexy() (in module graphics.plot)": [[24, "graphics.plot.fudgexy"]], "fudgey() (in module graphics.plot)": [[24, "graphics.plot.fudgey"]], "get_aspect() (in module graphics.plot)": [[24, "graphics.plot.get_aspect"]], "get_ax_pixel() (in module graphics.plot)": [[24, "graphics.plot.get_ax_pixel"]], "get_ax_pixel_ratio() (in module graphics.plot)": [[24, "graphics.plot.get_ax_pixel_ratio"]], "get_ax_size() (in module graphics.plot)": [[24, "graphics.plot.get_ax_size"]], "get_bbox() (in module graphics.plot)": [[24, "graphics.plot.get_bbox"]], "good_colorbar() (in module graphics.plot)": [[24, "graphics.plot.good_colorbar"]], "graphics.plot": [[24, "module-graphics.plot"]], "hsigbar() (in module graphics.plot)": [[24, "graphics.plot.hsigbar"]], "inhibition_arrow() (in module graphics.plot)": [[24, "graphics.plot.inhibition_arrow"]], "label() (in module graphics.plot)": [[24, "graphics.plot.label"]], "left_legend() (in module graphics.plot)": [[24, "graphics.plot.left_legend"]], "lighten() (in module graphics.plot)": [[24, "graphics.plot.lighten"]], "match_image_aspect() (in module graphics.plot)": [[24, "graphics.plot.match_image_aspect"]], "mock_legend() (in module graphics.plot)": [[24, "graphics.plot.mock_legend"]], "more_xticks() (in module graphics.plot)": [[24, "graphics.plot.more_xticks"]], "more_yticks() (in module graphics.plot)": [[24, "graphics.plot.more_yticks"]], "nice_legend() (in module graphics.plot)": [[24, "graphics.plot.nice_legend"]], "nicebp() (in module graphics.plot)": [[24, "graphics.plot.nicebp"]], "nicex() (in module graphics.plot)": [[24, "graphics.plot.nicex"]], "nicexy() (in module graphics.plot)": [[24, "graphics.plot.nicexy"]], "nicey() (in module graphics.plot)": [[24, "graphics.plot.nicey"]], "noaxis() (in module graphics.plot)": [[24, "graphics.plot.noaxis"]], "noclip() (in module graphics.plot)": [[24, "graphics.plot.noclip"]], "nolabels() (in module graphics.plot)": [[24, "graphics.plot.nolabels"]], "notick() (in module graphics.plot)": [[24, "graphics.plot.notick"]], "nox() (in module graphics.plot)": [[24, "graphics.plot.nox"]], "noxlabels() (in module graphics.plot)": [[24, "graphics.plot.noxlabels"]], "noxyaxes() (in module graphics.plot)": [[24, "graphics.plot.noxyaxes"]], "noy() (in module graphics.plot)": [[24, "graphics.plot.noy"]], "noylabels() (in module graphics.plot)": [[24, "graphics.plot.noylabels"]], "nudge_axis_baseline() (in module graphics.plot)": [[24, "graphics.plot.nudge_axis_baseline"]], "nudge_axis_left() (in module graphics.plot)": [[24, "graphics.plot.nudge_axis_left"]], "nudge_axis_x() (in module graphics.plot)": [[24, "graphics.plot.nudge_axis_x"]], "nudge_axis_y() (in module graphics.plot)": [[24, "graphics.plot.nudge_axis_y"]], "nudge_axis_y_pixels() (in module graphics.plot)": [[24, "graphics.plot.nudge_axis_y_pixels"]], "pikeplot() (in module graphics.plot)": [[24, "graphics.plot.pikeplot"]], "pixels_to_xfigureunits() (in module graphics.plot)": [[24, "graphics.plot.pixels_to_xfigureunits"]], "pixels_to_xunits() (in module graphics.plot)": [[24, "graphics.plot.pixels_to_xunits"]], "pixels_to_yfigureunits() (in module graphics.plot)": [[24, "graphics.plot.pixels_to_yfigureunits"]], "pixels_to_yunits() (in module graphics.plot)": [[24, "graphics.plot.pixels_to_yunits"]], "plotcwt() (in module graphics.plot)": [[24, "graphics.plot.plotCWT"]], "plotwtphase() (in module graphics.plot)": [[24, "graphics.plot.plotWTPhase"]], "plotwtphasefig() (in module graphics.plot)": [[24, "graphics.plot.plotWTPhaseFig"]], "plot_complex() (in module graphics.plot)": [[24, "graphics.plot.plot_complex"]], "plotz() (in module graphics.plot)": [[24, "graphics.plot.plotz"]], "positivex() (in module graphics.plot)": [[24, "graphics.plot.positivex"]], "positivexy() (in module graphics.plot)": [[24, "graphics.plot.positivexy"]], "positivey() (in module graphics.plot)": [[24, "graphics.plot.positivey"]], "px2x() (in module graphics.plot)": [[24, "graphics.plot.px2x"]], "px2y() (in module graphics.plot)": [[24, "graphics.plot.px2y"]], "rangeover() (in module graphics.plot)": [[24, "graphics.plot.rangeover"]], "rangeto() (in module graphics.plot)": [[24, "graphics.plot.rangeto"]], "restore_limits() (in module graphics.plot)": [[24, "graphics.plot.restore_limits"]], "right_legend() (in module graphics.plot)": [[24, "graphics.plot.right_legend"]], "rightaxis() (in module graphics.plot)": [[24, "graphics.plot.rightaxis"]], "righty() (in module graphics.plot)": [[24, "graphics.plot.righty"]], "round_to_precision() (in module graphics.plot)": [[24, "graphics.plot.round_to_precision"]], "save_limits() (in module graphics.plot)": [[24, "graphics.plot.save_limits"]], "savefigure() (in module graphics.plot)": [[24, "graphics.plot.savefigure"]], "shade_edges() (in module graphics.plot)": [[24, "graphics.plot.shade_edges"]], "shellmean() (in module graphics.plot)": [[24, "graphics.plot.shellmean"]], "shellplot() (in module graphics.plot)": [[24, "graphics.plot.shellplot"]], "sigbar() (in module graphics.plot)": [[24, "graphics.plot.sigbar"]], "simple_arrow() (in module graphics.plot)": [[24, "graphics.plot.simple_arrow"]], "simpleaxis() (in module graphics.plot)": [[24, "graphics.plot.simpleaxis"]], "simpleraxis() (in module graphics.plot)": [[24, "graphics.plot.simpleraxis"]], "simplerright() (in module graphics.plot)": [[24, "graphics.plot.simplerright"]], "splitz() (in module graphics.plot)": [[24, "graphics.plot.splitz"]], "stderrplot() (in module graphics.plot)": [[24, "graphics.plot.stderrplot"]], "subfigurelabel() (in module graphics.plot)": [[24, "graphics.plot.subfigurelabel"]], "trendline() (in module graphics.plot)": [[24, "graphics.plot.trendline"]], "unit_crosshairs() (in module graphics.plot)": [[24, "graphics.plot.unit_crosshairs"]], "unitaxes() (in module graphics.plot)": [[24, "graphics.plot.unitaxes"]], "unitx() (in module graphics.plot)": [[24, "graphics.plot.unitx"]], "unity() (in module graphics.plot)": [[24, "graphics.plot.unity"]], "widths_to_centers() (in module graphics.plot)": [[24, "graphics.plot.widths_to_centers"]], "widths_to_edges() (in module graphics.plot)": [[24, "graphics.plot.widths_to_edges"]], "wtpshow() (in module graphics.plot)": [[24, "graphics.plot.wtpshow"]], "xbartext() (in module graphics.plot)": [[24, "graphics.plot.xbartext"]], "xfigureunits_to_pixels() (in module graphics.plot)": [[24, "graphics.plot.xfigureunits_to_pixels"]], "xin() (in module graphics.plot)": [[24, "graphics.plot.xin"]], "xscalebar() (in module graphics.plot)": [[24, "graphics.plot.xscalebar"]], "xticklen() (in module graphics.plot)": [[24, "graphics.plot.xticklen"]], "xtickpad() (in module graphics.plot)": [[24, "graphics.plot.xtickpad"]], "xunits_to_pixels() (in module graphics.plot)": [[24, "graphics.plot.xunits_to_pixels"]], "xylim() (in module graphics.plot)": [[24, "graphics.plot.xylim"]], "ybartext() (in module graphics.plot)": [[24, "graphics.plot.ybartext"]], "yfigureunits_to_pixels() (in module graphics.plot)": [[24, "graphics.plot.yfigureunits_to_pixels"]], "yin() (in module graphics.plot)": [[24, "graphics.plot.yin"]], "yscalebar() (in module graphics.plot)": [[24, "graphics.plot.yscalebar"]], "yticklen() (in module graphics.plot)": [[24, "graphics.plot.yticklen"]], "ytickpad() (in module graphics.plot)": [[24, "graphics.plot.ytickpad"]], "yunits_to_pixels() (in module graphics.plot)": [[24, "graphics.plot.yunits_to_pixels"]], "zerohline() (in module graphics.plot)": [[24, "graphics.plot.zerohline"]], "zerovline() (in module graphics.plot)": [[24, "graphics.plot.zerovline"]], "zoombox() (in module graphics.plot)": [[24, "graphics.plot.zoombox"]], "draw_array() (in module graphics.pygame)": [[25, "graphics.pygame.draw_array"]], "enable_vsync() (in module graphics.pygame)": [[25, "graphics.pygame.enable_vsync"]], "graphics.pygame": [[25, "module-graphics.pygame"]], "start() (in module graphics.pygame)": [[25, "graphics.pygame.start"]], "jobs": [[26, "module-jobs"]], "base64hash() (in module jobs.cache)": [[27, "jobs.cache.base64hash"]], "base64hash2byte() (in module jobs.cache)": [[27, "jobs.cache.base64hash2byte"]], "disk_cacher() (in module jobs.cache)": [[27, "jobs.cache.disk_cacher"]], "file_string_to_signature() (in module jobs.cache)": [[27, "jobs.cache.file_string_to_signature"]], "function_hash_no_subroutines() (in module jobs.cache)": [[27, "jobs.cache.function_hash_no_subroutines"]], "function_hash_with_subroutines() (in module jobs.cache)": [[27, "jobs.cache.function_hash_with_subroutines"]], "function_signature() (in module jobs.cache)": [[27, "jobs.cache.function_signature"]], "get_cache_path() (in module jobs.cache)": [[27, "jobs.cache.get_cache_path"]], "get_source() (in module jobs.cache)": [[27, "jobs.cache.get_source"]], "hierarchical_cacher() (in module jobs.cache)": [[27, "jobs.cache.hierarchical_cacher"]], "human_decode() (in module jobs.cache)": [[27, "jobs.cache.human_decode"]], "human_encode() (in module jobs.cache)": [[27, "jobs.cache.human_encode"]], "jobs.cache": [[27, "module-jobs.cache"]], "locate_cached() (in module jobs.cache)": [[27, "jobs.cache.locate_cached"]], "read_cache_entry() (in module jobs.cache)": [[27, "jobs.cache.read_cache_entry"]], "signature_to_file_string() (in module jobs.cache)": [[27, "jobs.cache.signature_to_file_string"]], "validate_for_matfile() (in module jobs.cache)": [[27, "jobs.cache.validate_for_matfile"]], "validate_for_numpy() (in module jobs.cache)": [[27, "jobs.cache.validate_for_numpy"]], "csv() (in module jobs.closure)": [[28, "jobs.closure.csv"]], "get_subroutines() (in module jobs.closure)": [[28, "jobs.closure.get_subroutines"]], "inspect_function_closure() (in module jobs.closure)": [[28, "jobs.closure.inspect_function_closure"]], "is_immutable() (in module jobs.closure)": [[28, "jobs.closure.is_immutable"]], "is_probably_safe() (in module jobs.closure)": [[28, "jobs.closure.is_probably_safe"]], "jobs.closure": [[28, "module-jobs.closure"]], "verify_function_closure() (in module jobs.closure)": [[28, "jobs.closure.verify_function_closure"]], "check_filename() (in module jobs.filenames)": [[30, "jobs.filenames.check_filename"]], "is_dangerous_filename() (in module jobs.filenames)": [[30, "jobs.filenames.is_dangerous_filename"]], "jobs.filenames": [[30, "module-jobs.filenames"]], "validate_argument_signature() (in module jobs.filenames)": [[30, "jobs.filenames.validate_argument_signature"]], "cache_test() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.cache_test"]], "du() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.du"]], "initialize_caches() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.initialize_caches"]], "jobs.initialize_system_cache": [[31, "module-jobs.initialize_system_cache"]], "launch_cache_synchronizers() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.launch_cache_synchronizers"]], "purge_ram_cache() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.purge_ram_cache"]], "purge_ssd_cache() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.purge_ssd_cache"]], "reset_ramdisk() (in module jobs.initialize_system_cache)": [[31, "jobs.initialize_system_cache.reset_ramdisk"]], "close_pool() (in module jobs.parallel)": [[32, "jobs.parallel.close_pool"]], "eval_from_cached() (in module jobs.parallel)": [[32, "jobs.parallel.eval_from_cached"]], "function_fingerprint() (in module jobs.parallel)": [[32, "jobs.parallel.function_fingerprint"]], "jobs.parallel": [[32, "module-jobs.parallel"]], "parallel_cached_wrapper() (in module jobs.parallel)": [[32, "jobs.parallel.parallel_cached_wrapper"]], "parallel_error_handling() (in module jobs.parallel)": [[32, "jobs.parallel.parallel_error_handling"]], "parallel_indirect_wrapper() (in module jobs.parallel)": [[32, "jobs.parallel.parallel_indirect_wrapper"]], "pararraymap() (in module jobs.parallel)": [[32, "jobs.parallel.pararraymap"]], "parimap() (in module jobs.parallel)": [[32, "jobs.parallel.parimap"]], "parmap() (in module jobs.parallel)": [[32, "jobs.parallel.parmap"]], "parmap_dict() (in module jobs.parallel)": [[32, "jobs.parallel.parmap_dict"]], "reset_pool() (in module jobs.parallel)": [[32, "jobs.parallel.reset_pool"]], "linalg": [[33, "module-linalg"]], "ascolumn() (in module linalg.arguments)": [[34, "linalg.arguments.ascolumn"]], "asrow() (in module linalg.arguments)": [[34, "linalg.arguments.asrow"]], "assertcolumn() (in module linalg.arguments)": [[34, "linalg.arguments.assertcolumn"]], "assertfinite() (in module linalg.arguments)": [[34, "linalg.arguments.assertfinite"]], "assertfinitereal() (in module linalg.arguments)": [[34, "linalg.arguments.assertfinitereal"]], "assertreal() (in module linalg.arguments)": [[34, "linalg.arguments.assertreal"]], "assertrow() (in module linalg.arguments)": [[34, "linalg.arguments.assertrow"]], "assertshape() (in module linalg.arguments)": [[34, "linalg.arguments.assertshape"]], "assertsquare() (in module linalg.arguments)": [[34, "linalg.arguments.assertsquare"]], "assertvector() (in module linalg.arguments)": [[34, "linalg.arguments.assertvector"]], "assquare() (in module linalg.arguments)": [[34, "linalg.arguments.assquare"]], "asvector() (in module linalg.arguments)": [[34, "linalg.arguments.asvector"]], "iscolumn() (in module linalg.arguments)": [[34, "linalg.arguments.iscolumn"]], "isrow() (in module linalg.arguments)": [[34, "linalg.arguments.isrow"]], "issquare() (in module linalg.arguments)": [[34, "linalg.arguments.issquare"]], "linalg.arguments": [[34, "module-linalg.arguments"]], "scalar() (in module linalg.arguments)": [[34, "linalg.arguments.scalar"]], "ldistance() (in module linalg.matrix)": [[35, "linalg.matrix.Ldistance"]], "llasso() (in module linalg.matrix)": [[35, "linalg.matrix.Llasso"]], "abserr() (in module linalg.matrix)": [[35, "linalg.matrix.abserr"]], "autopredict() (in module linalg.matrix)": [[35, "linalg.matrix.autopredict"]], "cartesian_product() (in module linalg.matrix)": [[35, "linalg.matrix.cartesian_product"]], "check_covmat() (in module linalg.matrix)": [[35, "linalg.matrix.check_covmat"]], "check_covmat_fast() (in module linalg.matrix)": [[35, "linalg.matrix.check_covmat_fast"]], "check_finite_real() (in module linalg.matrix)": [[35, "linalg.matrix.check_finite_real"]], "cholupdate() (in module linalg.matrix)": [[35, "linalg.matrix.cholupdate"]], "cholupdate_eye() (in module linalg.matrix)": [[35, "linalg.matrix.cholupdate_eye"]], "cinv() (in module linalg.matrix)": [[35, "linalg.matrix.cinv"]], "column() (in module linalg.matrix)": [[35, "linalg.matrix.column"]], "csolve() (in module linalg.matrix)": [[35, "linalg.matrix.csolve"]], "errmx() (in module linalg.matrix)": [[35, "linalg.matrix.errmx"]], "kronsum() (in module linalg.matrix)": [[35, "linalg.matrix.kronsum"]], "laplace_kernel() (in module linalg.matrix)": [[35, "linalg.matrix.laplace_kernel"]], "ldiv() (in module linalg.matrix)": [[35, "linalg.matrix.ldiv"]], "linalg.matrix": [[35, "module-linalg.matrix"]], "logdet() (in module linalg.matrix)": [[35, "linalg.matrix.logdet"]], "match_covariance() (in module linalg.matrix)": [[35, "linalg.matrix.match_covariance"]], "maxeig() (in module linalg.matrix)": [[35, "linalg.matrix.maxeig"]], "nearpdhigham() (in module linalg.matrix)": [[35, "linalg.matrix.nearPDHigham"]], "nearpsdrebonatojackel() (in module linalg.matrix)": [[35, "linalg.matrix.nearPSDRebonatoJackel"]], "normedcovariance() (in module linalg.matrix)": [[35, "linalg.matrix.normedcovariance"]], "psd_eig() (in module linalg.matrix)": [[35, "linalg.matrix.psd_eig"]], "qf() (in module linalg.matrix)": [[35, "linalg.matrix.qf"]], "rcond() (in module linalg.matrix)": [[35, "linalg.matrix.rcond"]], "rdiv() (in module linalg.matrix)": [[35, "linalg.matrix.rdiv"]], "real_eig() (in module linalg.matrix)": [[35, "linalg.matrix.real_eig"]], "reglstsq() (in module linalg.matrix)": [[35, "linalg.matrix.reglstsq"]], "rmatrix() (in module linalg.matrix)": [[35, "linalg.matrix.rmatrix"]], "row() (in module linalg.matrix)": [[35, "linalg.matrix.row"]], "rsolt() (in module linalg.matrix)": [[35, "linalg.matrix.rsolt"]], "rsolve() (in module linalg.matrix)": [[35, "linalg.matrix.rsolve"]], "selector_matrix() (in module linalg.matrix)": [[35, "linalg.matrix.selector_matrix"]], "solt() (in module linalg.matrix)": [[35, "linalg.matrix.solt"]], "top_v() (in module linalg.matrix)": [[35, "linalg.matrix.top_v"]], "tril_elements() (in module linalg.matrix)": [[35, "linalg.matrix.tril_elements"]], "triu_elements() (in module linalg.matrix)": [[35, "linalg.matrix.triu_elements"]], "wheremax() (in module linalg.matrix)": [[35, "linalg.matrix.wheremax"]], "wheremin() (in module linalg.matrix)": [[35, "linalg.matrix.wheremin"]], "adjacency1d() (in module linalg.operators)": [[36, "linalg.operators.adjacency1D"]], "adjacency2d() (in module linalg.operators)": [[36, "linalg.operators.adjacency2D"]], "adjacency2d_circular() (in module linalg.operators)": [[36, "linalg.operators.adjacency2D_circular"]], "adjacency2d_rotational() (in module linalg.operators)": [[36, "linalg.operators.adjacency2d_rotational"]], "circular1dbluroperator() (in module linalg.operators)": [[36, "linalg.operators.circular1DblurOperator"]], "cosine_kernel() (in module linalg.operators)": [[36, "linalg.operators.cosine_kernel"]], "covfrom() (in module linalg.operators)": [[36, "linalg.operators.covfrom"]], "delta() (in module linalg.operators)": [[36, "linalg.operators.delta"]], "differentiator() (in module linalg.operators)": [[36, "linalg.operators.differentiator"]], "diffuseft1d() (in module linalg.operators)": [[36, "linalg.operators.diffuseFT1D"]], "flatcov() (in module linalg.operators)": [[36, "linalg.operators.flatcov"]], "gaussian1dbluroperator() (in module linalg.operators)": [[36, "linalg.operators.gaussian1DblurOperator"]], "gaussian2dbluroperator() (in module linalg.operators)": [[36, "linalg.operators.gaussian2DblurOperator"]], "integrator() (in module linalg.operators)": [[36, "linalg.operators.integrator"]], "laplacian1d() (in module linalg.operators)": [[36, "linalg.operators.laplacian1D"]], "laplacian1d_circular() (in module linalg.operators)": [[36, "linalg.operators.laplacian1D_circular"]], "laplacian2d() (in module linalg.operators)": [[36, "linalg.operators.laplacian2D"]], "laplacianft1d() (in module linalg.operators)": [[36, "linalg.operators.laplacianFT1D"]], "linalg.operators": [[36, "module-linalg.operators"]], "log_cosine_basis() (in module linalg.operators)": [[36, "linalg.operators.log_cosine_basis"]], "make_cosine_basis() (in module linalg.operators)": [[36, "linalg.operators.make_cosine_basis"]], "oucov() (in module linalg.operators)": [[36, "linalg.operators.oucov"]], "separable_guassian_blur() (in module linalg.operators)": [[36, "linalg.operators.separable_guassian_blur"]], "wienerft1d() (in module linalg.operators)": [[36, "linalg.operators.wienerFT1D"]], "models": [[37, "module-models"]], "du_izh() (in module models.izh)": [[38, "models.izh.du_izh"]], "dv_izh() (in module models.izh)": [[38, "models.izh.dv_izh"]], "models.izh": [[38, "module-models.izh"]], "sim_izh() (in module models.izh)": [[38, "models.izh.sim_izh"]], "update_izh() (in module models.izh)": [[38, "models.izh.update_izh"]], "euler_integrate_lif() (in module models.lif)": [[39, "models.lif.euler_integrate_LIF"]], "exponential_integrate_lif() (in module models.lif)": [[39, "models.lif.exponential_integrate_LIF"]], "exponential_moving_average() (in module models.lif)": [[39, "models.lif.exponential_moving_average"]], "models.lif": [[39, "module-models.lif"]], "neurotools": [[48, "module-neurotools"], [273, "module-neurotools"]], "neurotools.graphics": [[73, "module-neurotools.graphics"], [274, "module-neurotools.graphics"]], "rgbtohcl() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.RGBtoHCL"], [275, "neurotools.graphics.color.RGBtoHCL"]], "bit16_rgb_to_tuple() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.bit16_RGB_to_tuple"], [275, "neurotools.graphics.color.bit16_RGB_to_tuple"]], "bit16_print_color() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.bit16_print_color"], [275, "neurotools.graphics.color.bit16_print_color"]], "circularly_smooth_colormap() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.circularly_smooth_colormap"], [275, "neurotools.graphics.color.circularly_smooth_colormap"]], "code_to_16bit() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.code_to_16bit"], [275, "neurotools.graphics.color.code_to_16bit"]], "color_boxplot() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.color_boxplot"], [275, "neurotools.graphics.color.color_boxplot"]], "complexhlarr2rgb() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.complexHLArr2RGB"], [275, "neurotools.graphics.color.complexHLArr2RGB"]], "darkhues() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.darkhues"], [275, "neurotools.graphics.color.darkhues"]], "enumerate_fast_colors() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.enumerate_fast_colors"], [275, "neurotools.graphics.color.enumerate_fast_colors"]], "hcl2rgb() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.hcl2rgb"], [275, "neurotools.graphics.color.hcl2rgb"]], "hex2rgb() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.hex2rgb"], [275, "neurotools.graphics.color.hex2rgb"]], "hex_pack_bgr() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.hex_pack_BGR"], [275, "neurotools.graphics.color.hex_pack_BGR"]], "hsv2rgb() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.hsv2rgb"], [275, "neurotools.graphics.color.hsv2rgb"]], "hue_angle() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.hue_angle"], [275, "neurotools.graphics.color.hue_angle"]], "isoluminance1() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.isoluminance1"], [275, "neurotools.graphics.color.isoluminance1"]], "isoluminance2() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.isoluminance2"], [275, "neurotools.graphics.color.isoluminance2"]], "isoluminance3() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.isoluminance3"], [275, "neurotools.graphics.color.isoluminance3"]], "isoluminance4() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.isoluminance4"], [275, "neurotools.graphics.color.isoluminance4"]], "lighthues() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.lighthues"], [275, "neurotools.graphics.color.lighthues"]], "lightness() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.lightness"], [275, "neurotools.graphics.color.lightness"]], "luminance_matrix() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.luminance_matrix"], [275, "neurotools.graphics.color.luminance_matrix"]], "match_luminance() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.match_luminance"], [275, "neurotools.graphics.color.match_luminance"]], "medhues() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.medhues"], [275, "neurotools.graphics.color.medhues"]], "neurotools.graphics.color": [[74, "module-neurotools.graphics.color"], [275, "module-neurotools.graphics.color"]], "radl2rgb() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.radl2rgb"], [275, "neurotools.graphics.color.radl2rgb"]], "radl2rgblut() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.radl2rgbLUT"], [275, "neurotools.graphics.color.radl2rgbLUT"]], "rgb2hex() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.rgb2hex"], [275, "neurotools.graphics.color.rgb2hex"]], "rotate() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.rotate"], [275, "neurotools.graphics.color.rotate"]], "show_complete_fast_pallet() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.show_complete_fast_pallet"], [275, "neurotools.graphics.color.show_complete_fast_pallet"]], "show_complete_fastest_pallet() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.show_complete_fastest_pallet"], [275, "neurotools.graphics.color.show_complete_fastest_pallet"]], "show_fast_pallet() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.show_fast_pallet"], [275, "neurotools.graphics.color.show_fast_pallet"]], "show_hex_pallet() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.show_hex_pallet"], [275, "neurotools.graphics.color.show_hex_pallet"]], "tuple_to_bit16() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.tuple_to_bit16"], [275, "neurotools.graphics.color.tuple_to_bit16"]], "tuple_to_bit24() (in module neurotools.graphics.color)": [[74, "neurotools.graphics.color.tuple_to_bit24"], [275, "neurotools.graphics.color.tuple_to_bit24"]], "neurotools.graphics.colormaps": [[75, "module-neurotools.graphics.colormaps"], [276, "module-neurotools.graphics.colormaps"]], "test_colormaps() (in module neurotools.graphics.colormaps)": [[75, "neurotools.graphics.colormaps.test_colormaps"], [276, "neurotools.graphics.colormaps.test_colormaps"]], "count_nodes() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.count_nodes"], [277, "neurotools.graphics.dendron.count_nodes"]], "get_depth() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.get_depth"], [277, "neurotools.graphics.dendron.get_depth"]], "inorder_traversal() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.inorder_traversal"], [277, "neurotools.graphics.dendron.inorder_traversal"]], "list_like() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.list_like"], [277, "neurotools.graphics.dendron.list_like"]], "neurotools.graphics.dendron": [[76, "module-neurotools.graphics.dendron"], [277, "module-neurotools.graphics.dendron"]], "plot_brackets() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.plot_brackets"], [277, "neurotools.graphics.dendron.plot_brackets"]], "plot_brackets_polar() (in module neurotools.graphics.dendron)": [[76, "neurotools.graphics.dendron.plot_brackets_polar"], [277, "neurotools.graphics.dendron.plot_brackets_polar"]], "neurotools.graphics.fabio_maps": [[77, "module-neurotools.graphics.fabio_maps"], [278, "module-neurotools.graphics.fabio_maps"]], "mean_center() (in module neurotools.graphics.image)": [[78, "neurotools.graphics.image.mean_center"], [279, "neurotools.graphics.image.mean_center"]], "median_center() (in module neurotools.graphics.image)": [[78, "neurotools.graphics.image.median_center"], [279, "neurotools.graphics.image.median_center"]], "neurotools.graphics.image": [[78, "module-neurotools.graphics.image"], [279, "module-neurotools.graphics.image"]], "unitize() (in module neurotools.graphics.image)": [[78, "neurotools.graphics.image.unitize"], [279, "neurotools.graphics.image.unitize"]], "visualize_derivatives() (in module neurotools.graphics.image)": [[78, "neurotools.graphics.image.visualize_derivatives"], [279, "neurotools.graphics.image.visualize_derivatives"]], "draw_array() (in module neurotools.graphics.matplotlib)": [[79, "neurotools.graphics.matplotlib.draw_array"], [280, "neurotools.graphics.matplotlib.draw_array"]], "hide_toolbar() (in module neurotools.graphics.matplotlib)": [[79, "neurotools.graphics.matplotlib.hide_toolbar"], [280, "neurotools.graphics.matplotlib.hide_toolbar"]], "neurotools.graphics.matplotlib": [[79, "module-neurotools.graphics.matplotlib"], [280, "module-neurotools.graphics.matplotlib"]], "start() (in module neurotools.graphics.matplotlib)": [[79, "neurotools.graphics.matplotlib.start"], [280, "neurotools.graphics.matplotlib.start"]], "gaussian2d_covellipse() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.Gaussian2D_covellipse"], [281, "neurotools.graphics.plot.Gaussian2D_covellipse"]], "handlersquare (class in neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.HandlerSquare"], [281, "neurotools.graphics.plot.HandlerSquare"]], "addspikes() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.addspikes"], [281, "neurotools.graphics.plot.addspikes"]], "adjust_axis_height_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.adjust_axis_height_pixels"], [281, "neurotools.graphics.plot.adjust_axis_height_pixels"]], "adjust_xlabel_space() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.adjust_xlabel_space"], [281, "neurotools.graphics.plot.adjust_xlabel_space"]], "adjust_ylabel_space() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.adjust_ylabel_space"], [281, "neurotools.graphics.plot.adjust_ylabel_space"]], "adjustmap() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.adjustmap"], [281, "neurotools.graphics.plot.adjustmap"]], "animate_complex() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.animate_complex"], [281, "neurotools.graphics.plot.animate_complex"]], "arrow_between() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.arrow_between"], [281, "neurotools.graphics.plot.arrow_between"]], "axvbands() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.axvbands"], [281, "neurotools.graphics.plot.axvbands"]], "axvstripe() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.axvstripe"], [281, "neurotools.graphics.plot.axvstripe"]], "barcompare() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.barcompare"], [281, "neurotools.graphics.plot.barcompare"]], "base_legend() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.base_legend"], [281, "neurotools.graphics.plot.base_legend"]], "border_width() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.border_width"], [281, "neurotools.graphics.plot.border_width"]], "boxplot_significance() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.boxplot_significance"], [281, "neurotools.graphics.plot.boxplot_significance"]], "broken_step() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.broken_step"], [281, "neurotools.graphics.plot.broken_step"]], "ceil_to_precision() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.ceil_to_precision"], [281, "neurotools.graphics.plot.ceil_to_precision"]], "centers() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.centers"], [281, "neurotools.graphics.plot.centers"]], "clean_y_range() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.clean_y_range"], [281, "neurotools.graphics.plot.clean_y_range"]], "cleartop() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.cleartop"], [281, "neurotools.graphics.plot.cleartop"]], "colored_boxplot() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.colored_boxplot"], [281, "neurotools.graphics.plot.colored_boxplot"]], "complex_axis() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.complex_axis"], [281, "neurotools.graphics.plot.complex_axis"]], "covariance_crosshairs() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.covariance_crosshairs"], [281, "neurotools.graphics.plot.covariance_crosshairs"]], "create_artists() (neurotools.graphics.plot.handlersquare method)": [[80, "neurotools.graphics.plot.HandlerSquare.create_artists"], [281, "neurotools.graphics.plot.HandlerSquare.create_artists"]], "darken() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.darken"], [281, "neurotools.graphics.plot.darken"]], "domask() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.domask"], [281, "neurotools.graphics.plot.domask"]], "draw_circle() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.draw_circle"], [281, "neurotools.graphics.plot.draw_circle"]], "expand_axis_x() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.expand_axis_x"], [281, "neurotools.graphics.plot.expand_axis_x"]], "expand_axis_y() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.expand_axis_y"], [281, "neurotools.graphics.plot.expand_axis_y"]], "expand_y_range() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.expand_y_range"], [281, "neurotools.graphics.plot.expand_y_range"]], "figurebox() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.figurebox"], [281, "neurotools.graphics.plot.figurebox"]], "flathist() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.flathist"], [281, "neurotools.graphics.plot.flathist"]], "floor_to_precision() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.floor_to_precision"], [281, "neurotools.graphics.plot.floor_to_precision"]], "force_aspect() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.force_aspect"], [281, "neurotools.graphics.plot.force_aspect"]], "fsize() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.fsize"], [281, "neurotools.graphics.plot.fsize"]], "fudgex() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.fudgex"], [281, "neurotools.graphics.plot.fudgex"]], "fudgexy() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.fudgexy"], [281, "neurotools.graphics.plot.fudgexy"]], "fudgey() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.fudgey"], [281, "neurotools.graphics.plot.fudgey"]], "get_aspect() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.get_aspect"], [281, "neurotools.graphics.plot.get_aspect"]], "get_ax_pixel() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.get_ax_pixel"], [281, "neurotools.graphics.plot.get_ax_pixel"]], "get_ax_pixel_ratio() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.get_ax_pixel_ratio"], [281, "neurotools.graphics.plot.get_ax_pixel_ratio"]], "get_ax_size() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.get_ax_size"], [281, "neurotools.graphics.plot.get_ax_size"]], "get_bbox() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.get_bbox"], [281, "neurotools.graphics.plot.get_bbox"]], "good_colorbar() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.good_colorbar"], [281, "neurotools.graphics.plot.good_colorbar"]], "hsigbar() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.hsigbar"], [281, "neurotools.graphics.plot.hsigbar"]], "inhibition_arrow() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.inhibition_arrow"], [281, "neurotools.graphics.plot.inhibition_arrow"]], "label() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.label"], [281, "neurotools.graphics.plot.label"]], "left_legend() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.left_legend"], [281, "neurotools.graphics.plot.left_legend"]], "lighten() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.lighten"], [281, "neurotools.graphics.plot.lighten"]], "match_image_aspect() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.match_image_aspect"], [281, "neurotools.graphics.plot.match_image_aspect"]], "mock_legend() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.mock_legend"], [281, "neurotools.graphics.plot.mock_legend"]], "more_xticks() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.more_xticks"], [281, "neurotools.graphics.plot.more_xticks"]], "more_yticks() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.more_yticks"], [281, "neurotools.graphics.plot.more_yticks"]], "neurotools.graphics.plot": [[80, "module-neurotools.graphics.plot"], [281, "module-neurotools.graphics.plot"]], "nice_legend() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nice_legend"], [281, "neurotools.graphics.plot.nice_legend"]], "nicebp() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nicebp"], [281, "neurotools.graphics.plot.nicebp"]], "nicex() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nicex"], [281, "neurotools.graphics.plot.nicex"]], "nicexy() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nicexy"], [281, "neurotools.graphics.plot.nicexy"]], "nicey() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nicey"], [281, "neurotools.graphics.plot.nicey"]], "noaxis() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noaxis"], [281, "neurotools.graphics.plot.noaxis"]], "noclip() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noclip"], [281, "neurotools.graphics.plot.noclip"]], "nolabels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nolabels"], [281, "neurotools.graphics.plot.nolabels"]], "notick() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.notick"], [281, "neurotools.graphics.plot.notick"]], "nox() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nox"], [281, "neurotools.graphics.plot.nox"]], "noxlabels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noxlabels"], [281, "neurotools.graphics.plot.noxlabels"]], "noxyaxes() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noxyaxes"], [281, "neurotools.graphics.plot.noxyaxes"]], "noy() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noy"], [281, "neurotools.graphics.plot.noy"]], "noylabels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.noylabels"], [281, "neurotools.graphics.plot.noylabels"]], "nudge_axis_baseline() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nudge_axis_baseline"], [281, "neurotools.graphics.plot.nudge_axis_baseline"]], "nudge_axis_left() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nudge_axis_left"], [281, "neurotools.graphics.plot.nudge_axis_left"]], "nudge_axis_x() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nudge_axis_x"], [281, "neurotools.graphics.plot.nudge_axis_x"]], "nudge_axis_y() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nudge_axis_y"], [281, "neurotools.graphics.plot.nudge_axis_y"]], "nudge_axis_y_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.nudge_axis_y_pixels"], [281, "neurotools.graphics.plot.nudge_axis_y_pixels"]], "pikeplot() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.pikeplot"], [281, "neurotools.graphics.plot.pikeplot"]], "pixels_to_xfigureunits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.pixels_to_xfigureunits"], [281, "neurotools.graphics.plot.pixels_to_xfigureunits"]], "pixels_to_xunits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.pixels_to_xunits"], [281, "neurotools.graphics.plot.pixels_to_xunits"]], "pixels_to_yfigureunits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.pixels_to_yfigureunits"], [281, "neurotools.graphics.plot.pixels_to_yfigureunits"]], "pixels_to_yunits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.pixels_to_yunits"], [281, "neurotools.graphics.plot.pixels_to_yunits"]], "plotcwt() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.plotCWT"], [281, "neurotools.graphics.plot.plotCWT"]], "plotwtphase() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.plotWTPhase"], [281, "neurotools.graphics.plot.plotWTPhase"]], "plotwtphasefig() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.plotWTPhaseFig"], [281, "neurotools.graphics.plot.plotWTPhaseFig"]], "plot_complex() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.plot_complex"], [281, "neurotools.graphics.plot.plot_complex"]], "plotz() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.plotz"], [281, "neurotools.graphics.plot.plotz"]], "positivex() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.positivex"], [281, "neurotools.graphics.plot.positivex"]], "positivexy() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.positivexy"], [281, "neurotools.graphics.plot.positivexy"]], "positivey() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.positivey"], [281, "neurotools.graphics.plot.positivey"]], "px2x() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.px2x"], [281, "neurotools.graphics.plot.px2x"]], "px2y() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.px2y"], [281, "neurotools.graphics.plot.px2y"]], "rangeover() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.rangeover"], [281, "neurotools.graphics.plot.rangeover"]], "rangeto() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.rangeto"], [281, "neurotools.graphics.plot.rangeto"]], "restore_limits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.restore_limits"], [281, "neurotools.graphics.plot.restore_limits"]], "right_legend() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.right_legend"], [281, "neurotools.graphics.plot.right_legend"]], "rightaxis() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.rightaxis"], [281, "neurotools.graphics.plot.rightaxis"]], "righty() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.righty"], [281, "neurotools.graphics.plot.righty"]], "round_to_precision() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.round_to_precision"], [281, "neurotools.graphics.plot.round_to_precision"]], "save_limits() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.save_limits"], [281, "neurotools.graphics.plot.save_limits"]], "savefigure() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.savefigure"], [281, "neurotools.graphics.plot.savefigure"]], "shade_edges() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.shade_edges"], [281, "neurotools.graphics.plot.shade_edges"]], "shellmean() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.shellmean"], [281, "neurotools.graphics.plot.shellmean"]], "shellplot() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.shellplot"], [281, "neurotools.graphics.plot.shellplot"]], "sigbar() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.sigbar"], [281, "neurotools.graphics.plot.sigbar"]], "simple_arrow() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.simple_arrow"], [281, "neurotools.graphics.plot.simple_arrow"]], "simpleaxis() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.simpleaxis"], [281, "neurotools.graphics.plot.simpleaxis"]], "simpleraxis() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.simpleraxis"], [281, "neurotools.graphics.plot.simpleraxis"]], "simplerright() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.simplerright"], [281, "neurotools.graphics.plot.simplerright"]], "splitz() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.splitz"], [281, "neurotools.graphics.plot.splitz"]], "stderrplot() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.stderrplot"], [281, "neurotools.graphics.plot.stderrplot"]], "subfigurelabel() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.subfigurelabel"], [281, "neurotools.graphics.plot.subfigurelabel"]], "trendline() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.trendline"], [281, "neurotools.graphics.plot.trendline"]], "unit_crosshairs() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.unit_crosshairs"], [281, "neurotools.graphics.plot.unit_crosshairs"]], "unitaxes() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.unitaxes"], [281, "neurotools.graphics.plot.unitaxes"]], "unitx() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.unitx"], [281, "neurotools.graphics.plot.unitx"]], "unity() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.unity"], [281, "neurotools.graphics.plot.unity"]], "widths_to_centers() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.widths_to_centers"], [281, "neurotools.graphics.plot.widths_to_centers"]], "widths_to_edges() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.widths_to_edges"], [281, "neurotools.graphics.plot.widths_to_edges"]], "wtpshow() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.wtpshow"], [281, "neurotools.graphics.plot.wtpshow"]], "xbartext() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xbartext"], [281, "neurotools.graphics.plot.xbartext"]], "xfigureunits_to_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xfigureunits_to_pixels"], [281, "neurotools.graphics.plot.xfigureunits_to_pixels"]], "xin() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xin"], [281, "neurotools.graphics.plot.xin"]], "xscalebar() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xscalebar"], [281, "neurotools.graphics.plot.xscalebar"]], "xticklen() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xticklen"], [281, "neurotools.graphics.plot.xticklen"]], "xtickpad() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xtickpad"], [281, "neurotools.graphics.plot.xtickpad"]], "xunits_to_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xunits_to_pixels"], [281, "neurotools.graphics.plot.xunits_to_pixels"]], "xylim() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.xylim"], [281, "neurotools.graphics.plot.xylim"]], "ybartext() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.ybartext"], [281, "neurotools.graphics.plot.ybartext"]], "yfigureunits_to_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.yfigureunits_to_pixels"], [281, "neurotools.graphics.plot.yfigureunits_to_pixels"]], "yin() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.yin"], [281, "neurotools.graphics.plot.yin"]], "yscalebar() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.yscalebar"], [281, "neurotools.graphics.plot.yscalebar"]], "yticklen() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.yticklen"], [281, "neurotools.graphics.plot.yticklen"]], "ytickpad() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.ytickpad"], [281, "neurotools.graphics.plot.ytickpad"]], "yunits_to_pixels() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.yunits_to_pixels"], [281, "neurotools.graphics.plot.yunits_to_pixels"]], "zerohline() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.zerohline"], [281, "neurotools.graphics.plot.zerohline"]], "zerovline() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.zerovline"], [281, "neurotools.graphics.plot.zerovline"]], "zoombox() (in module neurotools.graphics.plot)": [[80, "neurotools.graphics.plot.zoombox"], [281, "neurotools.graphics.plot.zoombox"]], "draw_array() (in module neurotools.graphics.pygame)": [[81, "neurotools.graphics.pygame.draw_array"], [282, "neurotools.graphics.pygame.draw_array"]], "enable_vsync() (in module neurotools.graphics.pygame)": [[81, "neurotools.graphics.pygame.enable_vsync"], [282, "neurotools.graphics.pygame.enable_vsync"]], "neurotools.graphics.pygame": [[81, "module-neurotools.graphics.pygame"], [282, "module-neurotools.graphics.pygame"]], "start() (in module neurotools.graphics.pygame)": [[81, "neurotools.graphics.pygame.start"], [282, "neurotools.graphics.pygame.start"]], "neurotools.jobs": [[84, "module-neurotools.jobs"], [284, "module-neurotools.jobs"]], "base64hash() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.base64hash"], [285, "neurotools.jobs.cache.base64hash"]], "base64hash2byte() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.base64hash2byte"], [285, "neurotools.jobs.cache.base64hash2byte"]], "disk_cacher() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.disk_cacher"], [285, "neurotools.jobs.cache.disk_cacher"]], "file_string_to_signature() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.file_string_to_signature"], [285, "neurotools.jobs.cache.file_string_to_signature"]], "function_hash_no_subroutines() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.function_hash_no_subroutines"], [285, "neurotools.jobs.cache.function_hash_no_subroutines"]], "function_hash_with_subroutines() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.function_hash_with_subroutines"], [285, "neurotools.jobs.cache.function_hash_with_subroutines"]], "function_signature() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.function_signature"], [285, "neurotools.jobs.cache.function_signature"]], "get_cache_path() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.get_cache_path"], [285, "neurotools.jobs.cache.get_cache_path"]], "get_source() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.get_source"], [285, "neurotools.jobs.cache.get_source"]], "hierarchical_cacher() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.hierarchical_cacher"], [285, "neurotools.jobs.cache.hierarchical_cacher"]], "human_decode() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.human_decode"], [285, "neurotools.jobs.cache.human_decode"]], "human_encode() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.human_encode"], [285, "neurotools.jobs.cache.human_encode"]], "locate_cached() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.locate_cached"], [285, "neurotools.jobs.cache.locate_cached"]], "neurotools.jobs.cache": [[85, "module-neurotools.jobs.cache"], [285, "module-neurotools.jobs.cache"]], "read_cache_entry() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.read_cache_entry"], [285, "neurotools.jobs.cache.read_cache_entry"]], "signature_to_file_string() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.signature_to_file_string"], [285, "neurotools.jobs.cache.signature_to_file_string"]], "validate_for_matfile() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.validate_for_matfile"], [285, "neurotools.jobs.cache.validate_for_matfile"]], "validate_for_numpy() (in module neurotools.jobs.cache)": [[85, "neurotools.jobs.cache.validate_for_numpy"], [285, "neurotools.jobs.cache.validate_for_numpy"]], "csv() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.csv"], [286, "neurotools.jobs.closure.csv"]], "get_subroutines() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.get_subroutines"], [286, "neurotools.jobs.closure.get_subroutines"]], "inspect_function_closure() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.inspect_function_closure"], [286, "neurotools.jobs.closure.inspect_function_closure"]], "is_immutable() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.is_immutable"], [286, "neurotools.jobs.closure.is_immutable"]], "is_probably_safe() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.is_probably_safe"], [286, "neurotools.jobs.closure.is_probably_safe"]], "neurotools.jobs.closure": [[86, "module-neurotools.jobs.closure"], [286, "module-neurotools.jobs.closure"]], "verify_function_closure() (in module neurotools.jobs.closure)": [[86, "neurotools.jobs.closure.verify_function_closure"], [286, "neurotools.jobs.closure.verify_function_closure"]], "check_filename() (in module neurotools.jobs.filenames)": [[87, "neurotools.jobs.filenames.check_filename"], [287, "neurotools.jobs.filenames.check_filename"]], "is_dangerous_filename() (in module neurotools.jobs.filenames)": [[87, "neurotools.jobs.filenames.is_dangerous_filename"], [287, "neurotools.jobs.filenames.is_dangerous_filename"]], "neurotools.jobs.filenames": [[87, "module-neurotools.jobs.filenames"], [287, "module-neurotools.jobs.filenames"]], "validate_argument_signature() (in module neurotools.jobs.filenames)": [[87, "neurotools.jobs.filenames.validate_argument_signature"], [287, "neurotools.jobs.filenames.validate_argument_signature"]], "cache_test() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.cache_test"], [288, "neurotools.jobs.initialize_system_cache.cache_test"]], "du() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.du"], [288, "neurotools.jobs.initialize_system_cache.du"]], "initialize_caches() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.initialize_caches"], [288, "neurotools.jobs.initialize_system_cache.initialize_caches"]], "launch_cache_synchronizers() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.launch_cache_synchronizers"], [288, "neurotools.jobs.initialize_system_cache.launch_cache_synchronizers"]], "neurotools.jobs.initialize_system_cache": [[88, "module-neurotools.jobs.initialize_system_cache"], [288, "module-neurotools.jobs.initialize_system_cache"]], "purge_ram_cache() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.purge_ram_cache"], [288, "neurotools.jobs.initialize_system_cache.purge_ram_cache"]], "purge_ssd_cache() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.purge_ssd_cache"], [288, "neurotools.jobs.initialize_system_cache.purge_ssd_cache"]], "reset_ramdisk() (in module neurotools.jobs.initialize_system_cache)": [[88, "neurotools.jobs.initialize_system_cache.reset_ramdisk"], [288, "neurotools.jobs.initialize_system_cache.reset_ramdisk"]], "argument_signature() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.argument_signature"], [289, "neurotools.jobs.ndecorator.argument_signature"]], "clear_memoized() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.clear_memoized"], [289, "neurotools.jobs.ndecorator.clear_memoized"]], "listit() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.listit"], [289, "neurotools.jobs.ndecorator.listit"]], "memoize() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.memoize"], [289, "neurotools.jobs.ndecorator.memoize"]], "neurotools.jobs.ndecorator": [[89, "module-neurotools.jobs.ndecorator"], [289, "module-neurotools.jobs.ndecorator"]], "print_signature() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.print_signature"], [289, "neurotools.jobs.ndecorator.print_signature"]], "sanitize() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.sanitize"], [289, "neurotools.jobs.ndecorator.sanitize"]], "summarize_function() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.summarize_function"], [289, "neurotools.jobs.ndecorator.summarize_function"]], "timed() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.timed"], [289, "neurotools.jobs.ndecorator.timed"]], "tupleit() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.tupleit"], [289, "neurotools.jobs.ndecorator.tupleit"]], "unwrap() (in module neurotools.jobs.ndecorator)": [[89, "neurotools.jobs.ndecorator.unwrap"], [289, "neurotools.jobs.ndecorator.unwrap"]], "close_pool() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.close_pool"], [290, "neurotools.jobs.parallel.close_pool"]], "eval_from_cached() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.eval_from_cached"], [290, "neurotools.jobs.parallel.eval_from_cached"]], "function_fingerprint() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.function_fingerprint"], [290, "neurotools.jobs.parallel.function_fingerprint"]], "neurotools.jobs.parallel": [[90, "module-neurotools.jobs.parallel"], [290, "module-neurotools.jobs.parallel"]], "parallel_cached_wrapper() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parallel_cached_wrapper"], [290, "neurotools.jobs.parallel.parallel_cached_wrapper"]], "parallel_error_handling() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parallel_error_handling"], [290, "neurotools.jobs.parallel.parallel_error_handling"]], "parallel_indirect_wrapper() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parallel_indirect_wrapper"], [290, "neurotools.jobs.parallel.parallel_indirect_wrapper"]], "pararraymap() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.pararraymap"], [290, "neurotools.jobs.parallel.pararraymap"]], "parimap() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parimap"], [290, "neurotools.jobs.parallel.parimap"]], "parmap() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parmap"], [290, "neurotools.jobs.parallel.parmap"]], "parmap_dict() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.parmap_dict"], [290, "neurotools.jobs.parallel.parmap_dict"]], "reset_pool() (in module neurotools.jobs.parallel)": [[90, "neurotools.jobs.parallel.reset_pool"], [290, "neurotools.jobs.parallel.reset_pool"]], "neurotools.linalg": [[91, "module-neurotools.linalg"], [291, "module-neurotools.linalg"]], "ascolumn() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.ascolumn"], [292, "neurotools.linalg.arguments.ascolumn"]], "asrow() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.asrow"], [292, "neurotools.linalg.arguments.asrow"]], "assertcolumn() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertcolumn"], [292, "neurotools.linalg.arguments.assertcolumn"]], "assertfinite() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertfinite"], [292, "neurotools.linalg.arguments.assertfinite"]], "assertfinitereal() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertfinitereal"], [292, "neurotools.linalg.arguments.assertfinitereal"]], "assertreal() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertreal"], [292, "neurotools.linalg.arguments.assertreal"]], "assertrow() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertrow"], [292, "neurotools.linalg.arguments.assertrow"]], "assertshape() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertshape"], [292, "neurotools.linalg.arguments.assertshape"]], "assertsquare() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertsquare"], [292, "neurotools.linalg.arguments.assertsquare"]], "assertvector() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assertvector"], [292, "neurotools.linalg.arguments.assertvector"]], "assquare() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.assquare"], [292, "neurotools.linalg.arguments.assquare"]], "asvector() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.asvector"], [292, "neurotools.linalg.arguments.asvector"]], "iscolumn() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.iscolumn"], [292, "neurotools.linalg.arguments.iscolumn"]], "isrow() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.isrow"], [292, "neurotools.linalg.arguments.isrow"]], "issquare() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.issquare"], [292, "neurotools.linalg.arguments.issquare"]], "neurotools.linalg.arguments": [[92, "module-neurotools.linalg.arguments"], [292, "module-neurotools.linalg.arguments"]], "scalar() (in module neurotools.linalg.arguments)": [[92, "neurotools.linalg.arguments.scalar"], [292, "neurotools.linalg.arguments.scalar"]], "ldistance() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.Ldistance"], [293, "neurotools.linalg.matrix.Ldistance"]], "llasso() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.Llasso"], [293, "neurotools.linalg.matrix.Llasso"]], "abserr() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.abserr"], [293, "neurotools.linalg.matrix.abserr"]], "autopredict() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.autopredict"], [293, "neurotools.linalg.matrix.autopredict"]], "cartesian_product() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.cartesian_product"], [293, "neurotools.linalg.matrix.cartesian_product"]], "check_covmat() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.check_covmat"], [293, "neurotools.linalg.matrix.check_covmat"]], "check_covmat_fast() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.check_covmat_fast"], [293, "neurotools.linalg.matrix.check_covmat_fast"]], "check_finite_real() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.check_finite_real"], [293, "neurotools.linalg.matrix.check_finite_real"]], "cholupdate() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.cholupdate"], [293, "neurotools.linalg.matrix.cholupdate"]], "cholupdate_eye() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.cholupdate_eye"], [293, "neurotools.linalg.matrix.cholupdate_eye"]], "cinv() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.cinv"], [293, "neurotools.linalg.matrix.cinv"]], "column() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.column"], [293, "neurotools.linalg.matrix.column"]], "csolve() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.csolve"], [293, "neurotools.linalg.matrix.csolve"]], "errmx() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.errmx"], [293, "neurotools.linalg.matrix.errmx"]], "kronsum() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.kronsum"], [293, "neurotools.linalg.matrix.kronsum"]], "laplace_kernel() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.laplace_kernel"], [293, "neurotools.linalg.matrix.laplace_kernel"]], "ldiv() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.ldiv"], [293, "neurotools.linalg.matrix.ldiv"]], "logdet() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.logdet"], [293, "neurotools.linalg.matrix.logdet"]], "match_covariance() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.match_covariance"], [293, "neurotools.linalg.matrix.match_covariance"]], "maxeig() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.maxeig"], [293, "neurotools.linalg.matrix.maxeig"]], "nearpdhigham() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.nearPDHigham"], [293, "neurotools.linalg.matrix.nearPDHigham"]], "nearpsdrebonatojackel() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.nearPSDRebonatoJackel"], [293, "neurotools.linalg.matrix.nearPSDRebonatoJackel"]], "neurotools.linalg.matrix": [[93, "module-neurotools.linalg.matrix"], [293, "module-neurotools.linalg.matrix"]], "normedcovariance() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.normedcovariance"], [293, "neurotools.linalg.matrix.normedcovariance"]], "psd_eig() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.psd_eig"], [293, "neurotools.linalg.matrix.psd_eig"]], "qf() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.qf"], [293, "neurotools.linalg.matrix.qf"]], "rcond() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.rcond"], [293, "neurotools.linalg.matrix.rcond"]], "rdiv() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.rdiv"], [293, "neurotools.linalg.matrix.rdiv"]], "real_eig() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.real_eig"], [293, "neurotools.linalg.matrix.real_eig"]], "reglstsq() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.reglstsq"], [293, "neurotools.linalg.matrix.reglstsq"]], "rmatrix() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.rmatrix"], [293, "neurotools.linalg.matrix.rmatrix"]], "row() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.row"], [293, "neurotools.linalg.matrix.row"]], "rsolt() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.rsolt"], [293, "neurotools.linalg.matrix.rsolt"]], "rsolve() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.rsolve"], [293, "neurotools.linalg.matrix.rsolve"]], "selector_matrix() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.selector_matrix"], [293, "neurotools.linalg.matrix.selector_matrix"]], "solt() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.solt"], [293, "neurotools.linalg.matrix.solt"]], "top_v() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.top_v"], [293, "neurotools.linalg.matrix.top_v"]], "tril_elements() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.tril_elements"], [293, "neurotools.linalg.matrix.tril_elements"]], "triu_elements() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.triu_elements"], [293, "neurotools.linalg.matrix.triu_elements"]], "wheremax() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.wheremax"], [293, "neurotools.linalg.matrix.wheremax"]], "wheremin() (in module neurotools.linalg.matrix)": [[93, "neurotools.linalg.matrix.wheremin"], [293, "neurotools.linalg.matrix.wheremin"]], "adjacency1d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.adjacency1D"], [294, "neurotools.linalg.operators.adjacency1D"]], "adjacency2d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.adjacency2D"], [294, "neurotools.linalg.operators.adjacency2D"]], "adjacency2d_circular() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.adjacency2D_circular"], [294, "neurotools.linalg.operators.adjacency2D_circular"]], "adjacency2d_rotational() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.adjacency2d_rotational"], [294, "neurotools.linalg.operators.adjacency2d_rotational"]], "circular1dbluroperator() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.circular1DblurOperator"], [294, "neurotools.linalg.operators.circular1DblurOperator"]], "cosine_kernel() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.cosine_kernel"], [294, "neurotools.linalg.operators.cosine_kernel"]], "covfrom() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.covfrom"], [294, "neurotools.linalg.operators.covfrom"]], "delta() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.delta"], [294, "neurotools.linalg.operators.delta"]], "differentiator() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.differentiator"], [294, "neurotools.linalg.operators.differentiator"]], "diffuseft1d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.diffuseFT1D"], [294, "neurotools.linalg.operators.diffuseFT1D"]], "flatcov() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.flatcov"], [294, "neurotools.linalg.operators.flatcov"]], "gaussian1dbluroperator() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.gaussian1DblurOperator"], [294, "neurotools.linalg.operators.gaussian1DblurOperator"]], "gaussian2dbluroperator() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.gaussian2DblurOperator"], [294, "neurotools.linalg.operators.gaussian2DblurOperator"]], "integrator() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.integrator"], [294, "neurotools.linalg.operators.integrator"]], "laplacian1d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.laplacian1D"], [294, "neurotools.linalg.operators.laplacian1D"]], "laplacian1d_circular() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.laplacian1D_circular"], [294, "neurotools.linalg.operators.laplacian1D_circular"]], "laplacian2d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.laplacian2D"], [294, "neurotools.linalg.operators.laplacian2D"]], "laplacianft1d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.laplacianFT1D"], [294, "neurotools.linalg.operators.laplacianFT1D"]], "log_cosine_basis() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.log_cosine_basis"], [294, "neurotools.linalg.operators.log_cosine_basis"]], "make_cosine_basis() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.make_cosine_basis"], [294, "neurotools.linalg.operators.make_cosine_basis"]], "neurotools.linalg.operators": [[94, "module-neurotools.linalg.operators"], [294, "module-neurotools.linalg.operators"]], "oucov() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.oucov"], [294, "neurotools.linalg.operators.oucov"]], "separable_guassian_blur() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.separable_guassian_blur"], [294, "neurotools.linalg.operators.separable_guassian_blur"]], "wienerft1d() (in module neurotools.linalg.operators)": [[94, "neurotools.linalg.operators.wienerFT1D"], [294, "neurotools.linalg.operators.wienerFT1D"]], "beta() (in module neurotools.nlab)": [[105, "neurotools.nlab.beta"], [295, "neurotools.nlab.beta"]], "binomial() (in module neurotools.nlab)": [[105, "neurotools.nlab.binomial"], [295, "neurotools.nlab.binomial"]], "chisquare() (in module neurotools.nlab)": [[105, "neurotools.nlab.chisquare"], [295, "neurotools.nlab.chisquare"]], "choice() (in module neurotools.nlab)": [[105, "neurotools.nlab.choice"], [295, "neurotools.nlab.choice"]], "dirichlet() (in module neurotools.nlab)": [[105, "neurotools.nlab.dirichlet"], [295, "neurotools.nlab.dirichlet"]], "exponential() (in module neurotools.nlab)": [[105, "neurotools.nlab.exponential"], [295, "neurotools.nlab.exponential"]], "f() (in module neurotools.nlab)": [[105, "neurotools.nlab.f"], [295, "neurotools.nlab.f"]], "gamma() (in module neurotools.nlab)": [[105, "neurotools.nlab.gamma"], [295, "neurotools.nlab.gamma"]], "geometric() (in module neurotools.nlab)": [[105, "neurotools.nlab.geometric"], [295, "neurotools.nlab.geometric"]], "get_state() (in module neurotools.nlab)": [[105, "neurotools.nlab.get_state"], [295, "neurotools.nlab.get_state"]], "gumbel() (in module neurotools.nlab)": [[105, "neurotools.nlab.gumbel"], [295, "neurotools.nlab.gumbel"]], "hypergeometric() (in module neurotools.nlab)": [[105, "neurotools.nlab.hypergeometric"], [295, "neurotools.nlab.hypergeometric"]], "laplace() (in module neurotools.nlab)": [[105, "neurotools.nlab.laplace"], [295, "neurotools.nlab.laplace"]], "logistic() (in module neurotools.nlab)": [[105, "neurotools.nlab.logistic"], [295, "neurotools.nlab.logistic"]], "lognormal() (in module neurotools.nlab)": [[105, "neurotools.nlab.lognormal"], [295, "neurotools.nlab.lognormal"]], "logseries() (in module neurotools.nlab)": [[105, "neurotools.nlab.logseries"], [295, "neurotools.nlab.logseries"]], "multinomial() (in module neurotools.nlab)": [[105, "neurotools.nlab.multinomial"], [295, "neurotools.nlab.multinomial"]], "multivariate_normal() (in module neurotools.nlab)": [[105, "neurotools.nlab.multivariate_normal"], [295, "neurotools.nlab.multivariate_normal"]], "negative_binomial() (in module neurotools.nlab)": [[105, "neurotools.nlab.negative_binomial"], [295, "neurotools.nlab.negative_binomial"]], "neurotools.nlab": [[105, "module-neurotools.nlab"], [295, "module-neurotools.nlab"]], "noncentral_chisquare() (in module neurotools.nlab)": [[105, "neurotools.nlab.noncentral_chisquare"], [295, "neurotools.nlab.noncentral_chisquare"]], "noncentral_f() (in module neurotools.nlab)": [[105, "neurotools.nlab.noncentral_f"], [295, "neurotools.nlab.noncentral_f"]], "normal() (in module neurotools.nlab)": [[105, "neurotools.nlab.normal"], [295, "neurotools.nlab.normal"]], "pareto() (in module neurotools.nlab)": [[105, "neurotools.nlab.pareto"], [295, "neurotools.nlab.pareto"]], "permutation() (in module neurotools.nlab)": [[105, "neurotools.nlab.permutation"], [295, "neurotools.nlab.permutation"]], "poisson() (in module neurotools.nlab)": [[105, "neurotools.nlab.poisson"], [295, "neurotools.nlab.poisson"]], "power() (in module neurotools.nlab)": [[105, "neurotools.nlab.power"], [295, "neurotools.nlab.power"]], "rand() (in module neurotools.nlab)": [[105, "neurotools.nlab.rand"], [295, "neurotools.nlab.rand"]], "randint() (in module neurotools.nlab)": [[105, "neurotools.nlab.randint"], [295, "neurotools.nlab.randint"]], "randn() (in module neurotools.nlab)": [[105, "neurotools.nlab.randn"], [295, "neurotools.nlab.randn"]], "random() (in module neurotools.nlab)": [[105, "neurotools.nlab.random"], [295, "neurotools.nlab.random"]], "random_integers() (in module neurotools.nlab)": [[105, "neurotools.nlab.random_integers"], [295, "neurotools.nlab.random_integers"]], "random_sample() (in module neurotools.nlab)": [[105, "neurotools.nlab.random_sample"], [295, "neurotools.nlab.random_sample"]], "rayleigh() (in module neurotools.nlab)": [[105, "neurotools.nlab.rayleigh"], [295, "neurotools.nlab.rayleigh"]], "seed() (in module neurotools.nlab)": [[105, "neurotools.nlab.seed"], [295, "neurotools.nlab.seed"]], "set_state() (in module neurotools.nlab)": [[105, "neurotools.nlab.set_state"], [295, "neurotools.nlab.set_state"]], "shuffle() (in module neurotools.nlab)": [[105, "neurotools.nlab.shuffle"], [295, "neurotools.nlab.shuffle"]], "standard_cauchy() (in module neurotools.nlab)": [[105, "neurotools.nlab.standard_cauchy"], [295, "neurotools.nlab.standard_cauchy"]], "standard_exponential() (in module neurotools.nlab)": [[105, "neurotools.nlab.standard_exponential"], [295, "neurotools.nlab.standard_exponential"]], "standard_gamma() (in module neurotools.nlab)": [[105, "neurotools.nlab.standard_gamma"], [295, "neurotools.nlab.standard_gamma"]], "standard_normal() (in module neurotools.nlab)": [[105, "neurotools.nlab.standard_normal"], [295, "neurotools.nlab.standard_normal"]], "standard_t() (in module neurotools.nlab)": [[105, "neurotools.nlab.standard_t"], [295, "neurotools.nlab.standard_t"]], "triangular() (in module neurotools.nlab)": [[105, "neurotools.nlab.triangular"], [295, "neurotools.nlab.triangular"]], "uniform() (in module neurotools.nlab)": [[105, "neurotools.nlab.uniform"], [295, "neurotools.nlab.uniform"]], "vonmises() (in module neurotools.nlab)": [[105, "neurotools.nlab.vonmises"], [295, "neurotools.nlab.vonmises"]], "wald() (in module neurotools.nlab)": [[105, "neurotools.nlab.wald"], [295, "neurotools.nlab.wald"]], "weibull() (in module neurotools.nlab)": [[105, "neurotools.nlab.weibull"], [295, "neurotools.nlab.weibull"]], "zipf() (in module neurotools.nlab)": [[105, "neurotools.nlab.zipf"], [295, "neurotools.nlab.zipf"]], "neurotools.obsolete": [[106, "module-neurotools.obsolete"], [296, "module-neurotools.obsolete"]], "neurotools.obsolete.encoding": [[107, "module-neurotools.obsolete.encoding"], [297, "module-neurotools.obsolete.encoding"]], "huffman (class in neurotools.obsolete.encoding.huffman)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman"], [298, "neurotools.obsolete.encoding.Huffman.Huffman"]], "huffman.leaf (class in neurotools.obsolete.encoding.huffman)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.Leaf"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.Leaf"]], "huffman.node (class in neurotools.obsolete.encoding.huffman)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.Node"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.Node"]], "decode() (neurotools.obsolete.encoding.huffman.huffman method)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.decode"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.decode"]], "encode() (neurotools.obsolete.encoding.huffman.huffman method)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.encode"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.encode"]], "encode_packets() (neurotools.obsolete.encoding.huffman.huffman method)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.encode_packets"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.encode_packets"]], "neurotools.obsolete.encoding.huffman": [[108, "module-neurotools.obsolete.encoding.Huffman"], [298, "module-neurotools.obsolete.encoding.Huffman"]], "walk() (neurotools.obsolete.encoding.huffman.huffman.node method)": [[108, "neurotools.obsolete.encoding.Huffman.Huffman.Node.walk"], [298, "neurotools.obsolete.encoding.Huffman.Huffman.Node.walk"]], "naryhuffman (class in neurotools.obsolete.encoding.naryhuffman)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman"]], "naryhuffman.leaf (class in neurotools.obsolete.encoding.naryhuffman)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Leaf"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Leaf"]], "naryhuffman.node (class in neurotools.obsolete.encoding.naryhuffman)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Node"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Node"]], "decode() (neurotools.obsolete.encoding.naryhuffman.naryhuffman method)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.decode"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.decode"]], "encode() (neurotools.obsolete.encoding.naryhuffman.naryhuffman method)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.encode"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.encode"]], "encode_packets() (neurotools.obsolete.encoding.naryhuffman.naryhuffman method)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.encode_packets"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.encode_packets"]], "neurotools.obsolete.encoding.naryhuffman": [[109, "module-neurotools.obsolete.encoding.NaryHuffman"], [299, "module-neurotools.obsolete.encoding.NaryHuffman"]], "walk() (neurotools.obsolete.encoding.naryhuffman.naryhuffman.node method)": [[109, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Node.walk"], [299, "neurotools.obsolete.encoding.NaryHuffman.NaryHuffman.Node.walk"]], "neurotools.obsolete.gpu": [[110, "module-neurotools.obsolete.gpu"], [300, "module-neurotools.obsolete.gpu"]], "missing() (in module neurotools.obsolete.gpu.cl)": [[111, "neurotools.obsolete.gpu.cl.missing"], [301, "neurotools.obsolete.gpu.cl.missing"]], "neurotools.obsolete.gpu.cl": [[111, "module-neurotools.obsolete.gpu.cl"], [301, "module-neurotools.obsolete.gpu.cl"]], "neurotools.obsolete.gpu.cpu": [[115, "module-neurotools.obsolete.gpu.cpu"], [305, "module-neurotools.obsolete.gpu.cpu"]], "cmap() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.cmap"], [306, "neurotools.obsolete.gpu.cpu.util.cmap"]], "compose() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.compose"], [306, "neurotools.obsolete.gpu.cpu.util.compose"]], "corr() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.corr"], [306, "neurotools.obsolete.gpu.cpu.util.corr"]], "cov() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.cov"], [306, "neurotools.obsolete.gpu.cpu.util.cov"]], "cut() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.cut"], [306, "neurotools.obsolete.gpu.cpu.util.cut"]], "document() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.document"], [306, "neurotools.obsolete.gpu.cpu.util.document"]], "dot() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.dot"], [306, "neurotools.obsolete.gpu.cpu.util.dot"]], "elem() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.elem"], [306, "neurotools.obsolete.gpu.cpu.util.elem"]], "fancy() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.fancy"], [306, "neurotools.obsolete.gpu.cpu.util.fancy"]], "flat() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.flat"], [306, "neurotools.obsolete.gpu.cpu.util.flat"]], "idivup() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.idivup"], [306, "neurotools.obsolete.gpu.cpu.util.idivup"]], "ldif() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.ldif"], [306, "neurotools.obsolete.gpu.cpu.util.ldif"]], "ldif2() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.ldif2"], [306, "neurotools.obsolete.gpu.cpu.util.ldif2"]], "ldiv() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.ldiv"], [306, "neurotools.obsolete.gpu.cpu.util.ldiv"]], "ldiv2() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.ldiv2"], [306, "neurotools.obsolete.gpu.cpu.util.ldiv2"]], "length() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.length"], [306, "neurotools.obsolete.gpu.cpu.util.length"]], "lmul() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lmul"], [306, "neurotools.obsolete.gpu.cpu.util.lmul"]], "lmul2() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lmul2"], [306, "neurotools.obsolete.gpu.cpu.util.lmul2"]], "lpow() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lpow"], [306, "neurotools.obsolete.gpu.cpu.util.lpow"]], "lpow2() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lpow2"], [306, "neurotools.obsolete.gpu.cpu.util.lpow2"]], "lsum() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lsum"], [306, "neurotools.obsolete.gpu.cpu.util.lsum"]], "lsum2() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.lsum2"], [306, "neurotools.obsolete.gpu.cpu.util.lsum2"]], "mdif() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mdif"], [306, "neurotools.obsolete.gpu.cpu.util.mdif"]], "mdiv() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mdiv"], [306, "neurotools.obsolete.gpu.cpu.util.mdiv"]], "mean() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mean"], [306, "neurotools.obsolete.gpu.cpu.util.mean"]], "mmap() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mmap"], [306, "neurotools.obsolete.gpu.cpu.util.mmap"]], "mmean() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mmean"], [306, "neurotools.obsolete.gpu.cpu.util.mmean"]], "mmul() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mmul"], [306, "neurotools.obsolete.gpu.cpu.util.mmul"]], "mpow() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mpow"], [306, "neurotools.obsolete.gpu.cpu.util.mpow"]], "mstd() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mstd"], [306, "neurotools.obsolete.gpu.cpu.util.mstd"]], "msum() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.msum"], [306, "neurotools.obsolete.gpu.cpu.util.msum"]], "mu() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mu"], [306, "neurotools.obsolete.gpu.cpu.util.mu"]], "mvar() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.mvar"], [306, "neurotools.obsolete.gpu.cpu.util.mvar"]], "neurotools.obsolete.gpu.cpu.util": [[116, "module-neurotools.obsolete.gpu.cpu.util"], [306, "module-neurotools.obsolete.gpu.cpu.util"]], "norm() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.norm"], [306, "neurotools.obsolete.gpu.cpu.util.norm"]], "rnorm() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.rnorm"], [306, "neurotools.obsolete.gpu.cpu.util.rnorm"]], "scale() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.scale"], [306, "neurotools.obsolete.gpu.cpu.util.scale"]], "sem() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.sem"], [306, "neurotools.obsolete.gpu.cpu.util.sem"]], "shift() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.shift"], [306, "neurotools.obsolete.gpu.cpu.util.shift"]], "sigma() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.sigma"], [306, "neurotools.obsolete.gpu.cpu.util.sigma"]], "sstd() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.sstd"], [306, "neurotools.obsolete.gpu.cpu.util.sstd"]], "std() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.std"], [306, "neurotools.obsolete.gpu.cpu.util.std"]], "svar() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.svar"], [306, "neurotools.obsolete.gpu.cpu.util.svar"]], "var() (in module neurotools.obsolete.gpu.cpu.util)": [[116, "neurotools.obsolete.gpu.cpu.util.var"], [306, "neurotools.obsolete.gpu.cpu.util.var"]], "neurotools.obsolete.gpu.cu": [[117, "module-neurotools.obsolete.gpu.cu"], [307, "module-neurotools.obsolete.gpu.cu"]], "gpuboxconv() (in module neurotools.obsolete.gpu.cu.convolution)": [[118, "neurotools.obsolete.gpu.cu.convolution.gpuboxconv"], [308, "neurotools.obsolete.gpu.cu.convolution.gpuboxconv"]], "gpuboxconv_core() (in module neurotools.obsolete.gpu.cu.convolution)": [[118, "neurotools.obsolete.gpu.cu.convolution.gpuboxconv_core"], [308, "neurotools.obsolete.gpu.cu.convolution.gpuboxconv_core"]], "neurotools.obsolete.gpu.cu.convolution": [[118, "module-neurotools.obsolete.gpu.cu.convolution"], [308, "module-neurotools.obsolete.gpu.cu.convolution"]], "card_info() (in module neurotools.obsolete.gpu.cu.device)": [[119, "neurotools.obsolete.gpu.cu.device.card_info"], [309, "neurotools.obsolete.gpu.cu.device.card_info"]], "estimateblocks() (in module neurotools.obsolete.gpu.cu.device)": [[119, "neurotools.obsolete.gpu.cu.device.estimateBlocks"], [309, "neurotools.obsolete.gpu.cu.device.estimateBlocks"]], "estimateloop() (in module neurotools.obsolete.gpu.cu.device)": [[119, "neurotools.obsolete.gpu.cu.device.estimateLoop"], [309, "neurotools.obsolete.gpu.cu.device.estimateLoop"]], "estimatethreadsperblock() (in module neurotools.obsolete.gpu.cu.device)": [[119, "neurotools.obsolete.gpu.cu.device.estimateThreadsPerBlock"], [309, "neurotools.obsolete.gpu.cu.device.estimateThreadsPerBlock"]], "missing() (in module neurotools.obsolete.gpu.cu.device)": [[119, "neurotools.obsolete.gpu.cu.device.missing"], [309, "neurotools.obsolete.gpu.cu.device.missing"]], "neurotools.obsolete.gpu.cu.device": [[119, "module-neurotools.obsolete.gpu.cu.device"], [309, "module-neurotools.obsolete.gpu.cu.device"]], "cpu() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.cpu"], [310, "neurotools.obsolete.gpu.cu.function.cpu"]], "expsub() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.expsub"], [310, "neurotools.obsolete.gpu.cu.function.expsub"]], "ezkern() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.ezkern"], [310, "neurotools.obsolete.gpu.cu.function.ezkern"]], "format() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.format"], [310, "neurotools.obsolete.gpu.cu.function.format"]], "gpubin() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpubin"], [310, "neurotools.obsolete.gpu.cu.function.gpubin"]], "gpubinaryeq() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpubinaryeq"], [310, "neurotools.obsolete.gpu.cu.function.gpubinaryeq"]], "gpufloat() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpufloat"], [310, "neurotools.obsolete.gpu.cu.function.gpufloat"]], "gpufloatmat() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpufloatmat"], [310, "neurotools.obsolete.gpu.cu.function.gpufloatmat"]], "gpufloatred() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpufloatred"], [310, "neurotools.obsolete.gpu.cu.function.gpufloatred"]], "gpuint() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpuint"], [310, "neurotools.obsolete.gpu.cu.function.gpuint"]], "gpuintmap() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpuintmap"], [310, "neurotools.obsolete.gpu.cu.function.gpuintmap"]], "gpuintmat() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpuintmat"], [310, "neurotools.obsolete.gpu.cu.function.gpuintmat"]], "gpuintred() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpuintred"], [310, "neurotools.obsolete.gpu.cu.function.gpuintred"]], "gpumap() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpumap"], [310, "neurotools.obsolete.gpu.cu.function.gpumap"]], "gpumapeq() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpumapeq"], [310, "neurotools.obsolete.gpu.cu.function.gpumapeq"]], "gpupointer() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpupointer"], [310, "neurotools.obsolete.gpu.cu.function.gpupointer"]], "gpuscalar() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.gpuscalar"], [310, "neurotools.obsolete.gpu.cu.function.gpuscalar"]], "guessgputype() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.guessGPUType"], [310, "neurotools.obsolete.gpu.cu.function.guessGPUType"]], "kernel() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.kernel"], [310, "neurotools.obsolete.gpu.cu.function.kernel"]], "neurotools.obsolete.gpu.cu.function": [[120, "module-neurotools.obsolete.gpu.cu.function"], [310, "module-neurotools.obsolete.gpu.cu.function"]], "printkernel() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.printKernel"], [310, "neurotools.obsolete.gpu.cu.function.printKernel"]], "togputype() (in module neurotools.obsolete.gpu.cu.function)": [[120, "neurotools.obsolete.gpu.cu.function.toGPUType"], [310, "neurotools.obsolete.gpu.cu.function.toGPUType"]], "gpuhill() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpuhill"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpuhill"]], "gpulcomb() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpulcomb"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpulcomb"]], "gpulogpdf() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpulogpdf"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpulogpdf"]], "gpumean() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpumean"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpumean"]], "gpunpdf() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpunpdf"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpunpdf"]], "gpurandexp() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpurandexp"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpurandexp"]], "gpurandf() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpurandf"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpurandf"]], "gpuuniform() (in module neurotools.obsolete.gpu.cu.gpufun)": [[121, "neurotools.obsolete.gpu.cu.gpufun.gpuuniform"], [311, "neurotools.obsolete.gpu.cu.gpufun.gpuuniform"]], "neurotools.obsolete.gpu.cu.gpufun": [[121, "module-neurotools.obsolete.gpu.cu.gpufun"], [311, "module-neurotools.obsolete.gpu.cu.gpufun"]], "connect_gaussian() (in module neurotools.obsolete.gpu.cu.graph)": [[122, "neurotools.obsolete.gpu.cu.graph.connect_gaussian"], [312, "neurotools.obsolete.gpu.cu.graph.connect_gaussian"]], "neurotools.obsolete.gpu.cu.graph": [[122, "module-neurotools.obsolete.gpu.cu.graph"], [312, "module-neurotools.obsolete.gpu.cu.graph"]], "random_point_sheet() (in module neurotools.obsolete.gpu.cu.graph)": [[122, "neurotools.obsolete.gpu.cu.graph.random_point_sheet"], [312, "neurotools.obsolete.gpu.cu.graph.random_point_sheet"]], "spherepoints() (in module neurotools.obsolete.gpu.cu.graph)": [[122, "neurotools.obsolete.gpu.cu.graph.spherepoints"], [312, "neurotools.obsolete.gpu.cu.graph.spherepoints"]], "uniform_point_sheet() (in module neurotools.obsolete.gpu.cu.graph)": [[122, "neurotools.obsolete.gpu.cu.graph.uniform_point_sheet"], [312, "neurotools.obsolete.gpu.cu.graph.uniform_point_sheet"]], "gpuand() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpuand"], [313, "neurotools.obsolete.gpu.cu.logic.gpuand"]], "gpueq() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpueq"], [313, "neurotools.obsolete.gpu.cu.logic.gpueq"]], "gpugt() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpugt"], [313, "neurotools.obsolete.gpu.cu.logic.gpugt"]], "gpugteq() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpugteq"], [313, "neurotools.obsolete.gpu.cu.logic.gpugteq"]], "gpuhzero() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpuhzero"], [313, "neurotools.obsolete.gpu.cu.logic.gpuhzero"]], "gpult() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpult"], [313, "neurotools.obsolete.gpu.cu.logic.gpult"]], "gpulteq() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpulteq"], [313, "neurotools.obsolete.gpu.cu.logic.gpulteq"]], "gpuneq() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpuneq"], [313, "neurotools.obsolete.gpu.cu.logic.gpuneq"]], "gpunor() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpunor"], [313, "neurotools.obsolete.gpu.cu.logic.gpunor"]], "gpunot() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpunot"], [313, "neurotools.obsolete.gpu.cu.logic.gpunot"]], "gpurange() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpurange"], [313, "neurotools.obsolete.gpu.cu.logic.gpurange"]], "gpuyes() (in module neurotools.obsolete.gpu.cu.logic)": [[123, "neurotools.obsolete.gpu.cu.logic.gpuyes"], [313, "neurotools.obsolete.gpu.cu.logic.gpuyes"]], "neurotools.obsolete.gpu.cu.logic": [[123, "module-neurotools.obsolete.gpu.cu.logic"], [313, "module-neurotools.obsolete.gpu.cu.logic"]], "elementwisekernel() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.ElementwiseKernel"], [315, "neurotools.obsolete.gpu.cu.plot.ElementwiseKernel"]], "gpubarlinedata() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.gpubarlinedata"], [315, "neurotools.obsolete.gpu.cu.plot.gpubarlinedata"]], "gpuhistogram() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.gpuhistogram"], [315, "neurotools.obsolete.gpu.cu.plot.gpuhistogram"]], "missing() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.missing"], [315, "neurotools.obsolete.gpu.cu.plot.missing"]], "neurotools.obsolete.gpu.cu.plot": [[125, "module-neurotools.obsolete.gpu.cu.plot"], [315, "module-neurotools.obsolete.gpu.cu.plot"]], "sebarline() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.sebarline"], [315, "neurotools.obsolete.gpu.cu.plot.sebarline"]], "sebarline2() (in module neurotools.obsolete.gpu.cu.plot)": [[125, "neurotools.obsolete.gpu.cu.plot.sebarline2"], [315, "neurotools.obsolete.gpu.cu.plot.sebarline2"]], "frameeater() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.FrameEater"], [316, "neurotools.obsolete.gpu.cu.sequence.FrameEater"]], "gpuautometric() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.GPUAutometric"], [316, "neurotools.obsolete.gpu.cu.sequence.GPUAutometric"]], "gpudotmetric() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.GPUDotmetric"], [316, "neurotools.obsolete.gpu.cu.sequence.GPUDotmetric"]], "gpumagmetric() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.GPUMagmetric"], [316, "neurotools.obsolete.gpu.cu.sequence.GPUMagmetric"]], "gpupointautodistance() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.GPUPointAutoDistance"], [316, "neurotools.obsolete.gpu.cu.sequence.GPUPointAutoDistance"]], "gpusequenceautodetect() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.GPUSequenceAutoDetect"], [316, "neurotools.obsolete.gpu.cu.sequence.GPUSequenceAutoDetect"]], "deltamag() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.deltamag"], [316, "neurotools.obsolete.gpu.cu.sequence.deltamag"]], "fitgaussbimodal() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.fitgaussbimodal"], [316, "neurotools.obsolete.gpu.cu.sequence.fitgaussbimodal"]], "fitgausstrimodal() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.fitgausstrimodal"], [316, "neurotools.obsolete.gpu.cu.sequence.fitgausstrimodal"]], "gpuderivative() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpuderivative"], [316, "neurotools.obsolete.gpu.cu.sequence.gpuderivative"]], "gpulognpdf() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpulognpdf"], [316, "neurotools.obsolete.gpu.cu.sequence.gpulognpdf"]], "gpunpdf() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpunpdf"], [316, "neurotools.obsolete.gpu.cu.sequence.gpunpdf"]], "gpusmooth() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpusmooth"], [316, "neurotools.obsolete.gpu.cu.sequence.gpusmooth"]], "gpusubsetgfit() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpusubsetgfit"], [316, "neurotools.obsolete.gpu.cu.sequence.gpusubsetgfit"]], "gpusubsetmean() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gpusubsetmean"], [316, "neurotools.obsolete.gpu.cu.sequence.gpusubsetmean"]], "gputhing() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.gputhing"], [316, "neurotools.obsolete.gpu.cu.sequence.gputhing"]], "mulmag() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.mulmag"], [316, "neurotools.obsolete.gpu.cu.sequence.mulmag"]], "neurotools.obsolete.gpu.cu.sequence": [[126, "module-neurotools.obsolete.gpu.cu.sequence"], [316, "module-neurotools.obsolete.gpu.cu.sequence"]], "summag() (in module neurotools.obsolete.gpu.cu.sequence)": [[126, "neurotools.obsolete.gpu.cu.sequence.summag"], [316, "neurotools.obsolete.gpu.cu.sequence.summag"]], "neurotools.obsolete.models": [[128, "module-neurotools.obsolete.models"], [318, "module-neurotools.obsolete.models"]], "du_izh() (in module neurotools.obsolete.models.izh)": [[129, "neurotools.obsolete.models.izh.du_izh"], [319, "neurotools.obsolete.models.izh.du_izh"]], "dv_izh() (in module neurotools.obsolete.models.izh)": [[129, "neurotools.obsolete.models.izh.dv_izh"], [319, "neurotools.obsolete.models.izh.dv_izh"]], "neurotools.obsolete.models.izh": [[129, "module-neurotools.obsolete.models.izh"], [319, "module-neurotools.obsolete.models.izh"]], "sim_izh() (in module neurotools.obsolete.models.izh)": [[129, "neurotools.obsolete.models.izh.sim_izh"], [319, "neurotools.obsolete.models.izh.sim_izh"]], "update_izh() (in module neurotools.obsolete.models.izh)": [[129, "neurotools.obsolete.models.izh.update_izh"], [319, "neurotools.obsolete.models.izh.update_izh"]], "euler_integrate_lif() (in module neurotools.obsolete.models.lif)": [[130, "neurotools.obsolete.models.lif.euler_integrate_LIF"], [320, "neurotools.obsolete.models.lif.euler_integrate_LIF"]], "exponential_integrate_lif() (in module neurotools.obsolete.models.lif)": [[130, "neurotools.obsolete.models.lif.exponential_integrate_LIF"], [320, "neurotools.obsolete.models.lif.exponential_integrate_LIF"]], "exponential_moving_average() (in module neurotools.obsolete.models.lif)": [[130, "neurotools.obsolete.models.lif.exponential_moving_average"], [320, "neurotools.obsolete.models.lif.exponential_moving_average"]], "neurotools.obsolete.models.lif": [[130, "module-neurotools.obsolete.models.lif"], [320, "module-neurotools.obsolete.models.lif"]], "amp() (in module neurotools.signal)": [[140, "neurotools.signal.amp"], [329, "neurotools.signal.amp"]], "ang() (in module neurotools.signal)": [[140, "neurotools.signal.ang"], [329, "neurotools.signal.ang"]], "arenear() (in module neurotools.signal)": [[140, "neurotools.signal.arenear"], [329, "neurotools.signal.arenear"]], "aresafe() (in module neurotools.signal)": [[140, "neurotools.signal.aresafe"], [329, "neurotools.signal.aresafe"]], "autocorrelation() (in module neurotools.signal)": [[140, "neurotools.signal.autocorrelation"], [329, "neurotools.signal.autocorrelation"]], "band_stop_line_noise_removal() (in module neurotools.signal)": [[140, "neurotools.signal.band_stop_line_noise_removal"], [329, "neurotools.signal.band_stop_line_noise_removal"]], "bandpass_filter() (in module neurotools.signal)": [[140, "neurotools.signal.bandpass_filter"], [329, "neurotools.signal.bandpass_filter"]], "box_filter() (in module neurotools.signal)": [[140, "neurotools.signal.box_filter"], [329, "neurotools.signal.box_filter"]], "circular_cosine_basis() (in module neurotools.signal)": [[140, "neurotools.signal.circular_cosine_basis"], [329, "neurotools.signal.circular_cosine_basis"]], "circular_gaussian_smooth() (in module neurotools.signal)": [[140, "neurotools.signal.circular_gaussian_smooth"], [329, "neurotools.signal.circular_gaussian_smooth"]], "circular_gaussian_smooth_2d() (in module neurotools.signal)": [[140, "neurotools.signal.circular_gaussian_smooth_2D"], [329, "neurotools.signal.circular_gaussian_smooth_2D"]], "complex_to_nan() (in module neurotools.signal)": [[140, "neurotools.signal.complex_to_nan"], [329, "neurotools.signal.complex_to_nan"]], "deltaovermean() (in module neurotools.signal)": [[140, "neurotools.signal.deltaovermean"], [329, "neurotools.signal.deltaovermean"]], "drop_nonfinite() (in module neurotools.signal)": [[140, "neurotools.signal.drop_nonfinite"], [329, "neurotools.signal.drop_nonfinite"]], "estimate_padding() (in module neurotools.signal)": [[140, "neurotools.signal.estimate_padding"], [329, "neurotools.signal.estimate_padding"]], "fdiff() (in module neurotools.signal)": [[140, "neurotools.signal.fdiff"], [329, "neurotools.signal.fdiff"]], "fftacorr1d() (in module neurotools.signal)": [[140, "neurotools.signal.fftacorr1d"], [329, "neurotools.signal.fftacorr1d"]], "fftsta() (in module neurotools.signal)": [[140, "neurotools.signal.fftsta"], [329, "neurotools.signal.fftsta"]], "fm_mod() (in module neurotools.signal)": [[140, "neurotools.signal.fm_mod"], [329, "neurotools.signal.fm_mod"]], "fudge_derivative() (in module neurotools.signal)": [[140, "neurotools.signal.fudge_derivative"], [329, "neurotools.signal.fudge_derivative"]], "gaussian_kernel() (in module neurotools.signal)": [[140, "neurotools.signal.gaussian_kernel"], [329, "neurotools.signal.gaussian_kernel"]], "gaussian_smooth() (in module neurotools.signal)": [[140, "neurotools.signal.gaussian_smooth"], [329, "neurotools.signal.gaussian_smooth"]], "gaussianize() (in module neurotools.signal)": [[140, "neurotools.signal.gaussianize"], [329, "neurotools.signal.gaussianize"]], "geometric_window() (in module neurotools.signal)": [[140, "neurotools.signal.geometric_window"], [329, "neurotools.signal.geometric_window"]], "get_edges() (in module neurotools.signal)": [[140, "neurotools.signal.get_edges"], [329, "neurotools.signal.get_edges"]], "get_snips() (in module neurotools.signal)": [[140, "neurotools.signal.get_snips"], [329, "neurotools.signal.get_snips"]], "get_triggered_stats() (in module neurotools.signal)": [[140, "neurotools.signal.get_triggered_stats"], [329, "neurotools.signal.get_triggered_stats"]], "highpass_filter() (in module neurotools.signal)": [[140, "neurotools.signal.highpass_filter"], [329, "neurotools.signal.highpass_filter"]], "ifreq() (in module neurotools.signal)": [[140, "neurotools.signal.ifreq"], [329, "neurotools.signal.ifreq"]], "interpmax1d() (in module neurotools.signal)": [[140, "neurotools.signal.interpmax1d"], [329, "neurotools.signal.interpmax1d"]], "interpolate_nan() (in module neurotools.signal)": [[140, "neurotools.signal.interpolate_NaN"], [329, "neurotools.signal.interpolate_NaN"]], "interpolate_nan_quadratic() (in module neurotools.signal)": [[140, "neurotools.signal.interpolate_NaN_quadratic"], [329, "neurotools.signal.interpolate_NaN_quadratic"]], "invert_uniformize() (in module neurotools.signal)": [[140, "neurotools.signal.invert_uniformize"], [329, "neurotools.signal.invert_uniformize"]], "killspikes() (in module neurotools.signal)": [[140, "neurotools.signal.killSpikes"], [329, "neurotools.signal.killSpikes"]], "linear_cosine_basis() (in module neurotools.signal)": [[140, "neurotools.signal.linear_cosine_basis"], [329, "neurotools.signal.linear_cosine_basis"]], "linfilter() (in module neurotools.signal)": [[140, "neurotools.signal.linfilter"], [329, "neurotools.signal.linfilter"]], "local_maxima() (in module neurotools.signal)": [[140, "neurotools.signal.local_maxima"], [329, "neurotools.signal.local_maxima"]], "local_minima() (in module neurotools.signal)": [[140, "neurotools.signal.local_minima"], [329, "neurotools.signal.local_minima"]], "local_peak_within() (in module neurotools.signal)": [[140, "neurotools.signal.local_peak_within"], [329, "neurotools.signal.local_peak_within"]], "lowpass_filter() (in module neurotools.signal)": [[140, "neurotools.signal.lowpass_filter"], [329, "neurotools.signal.lowpass_filter"]], "make_lagged() (in module neurotools.signal)": [[140, "neurotools.signal.make_lagged"], [329, "neurotools.signal.make_lagged"]], "make_rebroadcast_slice() (in module neurotools.signal)": [[140, "neurotools.signal.make_rebroadcast_slice"], [329, "neurotools.signal.make_rebroadcast_slice"]], "mean_block() (in module neurotools.signal)": [[140, "neurotools.signal.mean_block"], [329, "neurotools.signal.mean_block"]], "median_block() (in module neurotools.signal)": [[140, "neurotools.signal.median_block"], [329, "neurotools.signal.median_block"]], "median_filter() (in module neurotools.signal)": [[140, "neurotools.signal.median_filter"], [329, "neurotools.signal.median_filter"]], "ndargmax() (in module neurotools.signal)": [[140, "neurotools.signal.ndargmax"], [329, "neurotools.signal.ndargmax"]], "neurotools.signal": [[140, "module-neurotools.signal"], [329, "module-neurotools.signal"]], "nice_interp() (in module neurotools.signal)": [[140, "neurotools.signal.nice_interp"], [329, "neurotools.signal.nice_interp"]], "nonnegative_bandpass_filter() (in module neurotools.signal)": [[140, "neurotools.signal.nonnegative_bandpass_filter"], [329, "neurotools.signal.nonnegative_bandpass_filter"]], "pad_signal() (in module neurotools.signal)": [[140, "neurotools.signal.pad_signal"], [329, "neurotools.signal.pad_signal"]], "padin() (in module neurotools.signal)": [[140, "neurotools.signal.padin"], [329, "neurotools.signal.padin"]], "padout() (in module neurotools.signal)": [[140, "neurotools.signal.padout"], [329, "neurotools.signal.padout"]], "pdiff() (in module neurotools.signal)": [[140, "neurotools.signal.pdiff"], [329, "neurotools.signal.pdiff"]], "peak_within() (in module neurotools.signal)": [[140, "neurotools.signal.peak_within"], [329, "neurotools.signal.peak_within"]], "percentile_filter() (in module neurotools.signal)": [[140, "neurotools.signal.percentile_filter"], [329, "neurotools.signal.percentile_filter"]], "pghilbert() (in module neurotools.signal)": [[140, "neurotools.signal.pghilbert"], [329, "neurotools.signal.pghilbert"]], "phase_randomize() (in module neurotools.signal)": [[140, "neurotools.signal.phase_randomize"], [329, "neurotools.signal.phase_randomize"]], "phase_randomize_from_amplitudes() (in module neurotools.signal)": [[140, "neurotools.signal.phase_randomize_from_amplitudes"], [329, "neurotools.signal.phase_randomize_from_amplitudes"]], "phase_rotate() (in module neurotools.signal)": [[140, "neurotools.signal.phase_rotate"], [329, "neurotools.signal.phase_rotate"]], "pieces() (in module neurotools.signal)": [[140, "neurotools.signal.pieces"], [329, "neurotools.signal.pieces"]], "randband() (in module neurotools.signal)": [[140, "neurotools.signal.randband"], [329, "neurotools.signal.randband"]], "remove_gaps() (in module neurotools.signal)": [[140, "neurotools.signal.remove_gaps"], [329, "neurotools.signal.remove_gaps"]], "remove_short() (in module neurotools.signal)": [[140, "neurotools.signal.remove_short"], [329, "neurotools.signal.remove_short"]], "rewrap() (in module neurotools.signal)": [[140, "neurotools.signal.rewrap"], [329, "neurotools.signal.rewrap"]], "set_edges() (in module neurotools.signal)": [[140, "neurotools.signal.set_edges"], [329, "neurotools.signal.set_edges"]], "sign_preserving_amplitude_demodulate() (in module neurotools.signal)": [[140, "neurotools.signal.sign_preserving_amplitude_demodulate"], [329, "neurotools.signal.sign_preserving_amplitude_demodulate"]], "spaced_derivative() (in module neurotools.signal)": [[140, "neurotools.signal.spaced_derivative"], [329, "neurotools.signal.spaced_derivative"]], "span() (in module neurotools.signal)": [[140, "neurotools.signal.span"], [329, "neurotools.signal.span"]], "split_into_groups() (in module neurotools.signal)": [[140, "neurotools.signal.split_into_groups"], [329, "neurotools.signal.split_into_groups"]], "stats_block() (in module neurotools.signal)": [[140, "neurotools.signal.stats_block"], [329, "neurotools.signal.stats_block"]], "topercentiles() (in module neurotools.signal)": [[140, "neurotools.signal.topercentiles"], [329, "neurotools.signal.topercentiles"]], "triggered_average() (in module neurotools.signal)": [[140, "neurotools.signal.triggered_average"], [329, "neurotools.signal.triggered_average"]], "uniformize() (in module neurotools.signal)": [[140, "neurotools.signal.uniformize"], [329, "neurotools.signal.uniformize"]], "unit_length() (in module neurotools.signal)": [[140, "neurotools.signal.unit_length"], [329, "neurotools.signal.unit_length"]], "unitscale() (in module neurotools.signal)": [[140, "neurotools.signal.unitscale"], [329, "neurotools.signal.unitscale"]], "unwrap() (in module neurotools.signal)": [[140, "neurotools.signal.unwrap"], [329, "neurotools.signal.unwrap"]], "upsample() (in module neurotools.signal)": [[140, "neurotools.signal.upsample"], [329, "neurotools.signal.upsample"]], "var_block() (in module neurotools.signal)": [[140, "neurotools.signal.var_block"], [329, "neurotools.signal.var_block"]], "variance_filter() (in module neurotools.signal)": [[140, "neurotools.signal.variance_filter"], [329, "neurotools.signal.variance_filter"]], "virtual_reference_line_noise_removal() (in module neurotools.signal)": [[140, "neurotools.signal.virtual_reference_line_noise_removal"], [329, "neurotools.signal.virtual_reference_line_noise_removal"]], "zeromean() (in module neurotools.signal)": [[140, "neurotools.signal.zeromean"], [329, "neurotools.signal.zeromean"]], "zgrid() (in module neurotools.signal)": [[140, "neurotools.signal.zgrid"], [329, "neurotools.signal.zgrid"]], "zscore() (in module neurotools.signal)": [[140, "neurotools.signal.zscore"], [329, "neurotools.signal.zscore"]], "coherence_pvalue() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.coherence_pvalue"], [330, "neurotools.signal.coherence.coherence_pvalue"]], "morlet_population_synchrony_spectrum() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.morlet_population_synchrony_spectrum"], [330, "neurotools.signal.coherence.morlet_population_synchrony_spectrum"]], "multitaper_coherence() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.multitaper_coherence"], [330, "neurotools.signal.coherence.multitaper_coherence"]], "multitaper_multitrial_coherence() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.multitaper_multitrial_coherence"], [330, "neurotools.signal.coherence.multitaper_multitrial_coherence"]], "neurotools.signal.coherence": [[141, "module-neurotools.signal.coherence"], [330, "module-neurotools.signal.coherence"]], "population_coherence_matrix() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.population_coherence_matrix"], [330, "neurotools.signal.coherence.population_coherence_matrix"]], "population_eigencoherence() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.population_eigencoherence"], [330, "neurotools.signal.coherence.population_eigencoherence"]], "sliding_multitaper_coherence() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.sliding_multitaper_coherence"], [330, "neurotools.signal.coherence.sliding_multitaper_coherence"]], "sliding_multitaper_coherence_parallel() (in module neurotools.signal.coherence)": [[141, "neurotools.signal.coherence.sliding_multitaper_coherence_parallel"], [330, "neurotools.signal.coherence.sliding_multitaper_coherence_parallel"]], "convolve2dct() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.convolve2dct"], [331, "neurotools.signal.conv.convolve2dct"]], "gausskern1d() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.gausskern1d"], [331, "neurotools.signal.conv.gausskern1d"]], "gausskern2d() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.gausskern2d"], [331, "neurotools.signal.conv.gausskern2d"]], "mirror2d() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.mirror2d"], [331, "neurotools.signal.conv.mirror2d"]], "neurotools.signal.conv": [[142, "module-neurotools.signal.conv"], [331, "module-neurotools.signal.conv"]], "reflect2d() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.reflect2D"], [331, "neurotools.signal.conv.reflect2D"]], "reflect2d_1() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.reflect2D_1"], [331, "neurotools.signal.conv.reflect2D_1"]], "separable2d() (in module neurotools.signal.conv)": [[142, "neurotools.signal.conv.separable2d"], [331, "neurotools.signal.conv.separable2d"]], "fft_cwt() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.fft_cwt"], [332, "neurotools.signal.morlet.fft_cwt"]], "fft_cwt_transposed() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.fft_cwt_transposed"], [332, "neurotools.signal.morlet.fft_cwt_transposed"]], "fft_cwt_transposed_logspaced() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.fft_cwt_transposed_logspaced"], [332, "neurotools.signal.morlet.fft_cwt_transposed_logspaced"]], "logfreqs() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.logfreqs"], [332, "neurotools.signal.morlet.logfreqs"]], "neurotools.signal.morlet": [[144, "module-neurotools.signal.morlet"], [332, "module-neurotools.signal.morlet"]], "normalized_morlet() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.normalized_morlet"], [332, "neurotools.signal.morlet.normalized_morlet"]], "population_synchrony_spectrum() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.population_synchrony_spectrum"], [332, "neurotools.signal.morlet.population_synchrony_spectrum"]], "prepare_wavelet_fft_basis() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.prepare_wavelet_fft_basis"], [332, "neurotools.signal.morlet.prepare_wavelet_fft_basis"]], "prepare_wavelet_fft_basis_logspace() (in module neurotools.signal.morlet)": [[144, "neurotools.signal.morlet.prepare_wavelet_fft_basis_logspace"], [332, "neurotools.signal.morlet.prepare_wavelet_fft_basis_logspace"]], "dpss_cached() (in module neurotools.signal.multitaper)": [[146, "neurotools.signal.multitaper.dpss_cached"], [333, "neurotools.signal.multitaper.dpss_cached"]], "multitaper_population_eigencoherence() (in module neurotools.signal.multitaper)": [[146, "neurotools.signal.multitaper.multitaper_population_eigencoherence"], [333, "neurotools.signal.multitaper.multitaper_population_eigencoherence"]], "multitaper_spectrum() (in module neurotools.signal.multitaper)": [[146, "neurotools.signal.multitaper.multitaper_spectrum"], [333, "neurotools.signal.multitaper.multitaper_spectrum"]], "multitaper_squared_spectrum() (in module neurotools.signal.multitaper)": [[146, "neurotools.signal.multitaper.multitaper_squared_spectrum"], [333, "neurotools.signal.multitaper.multitaper_squared_spectrum"]], "neurotools.signal.multitaper": [[146, "module-neurotools.signal.multitaper"], [333, "module-neurotools.signal.multitaper"]], "sliding_multitaper_spectrum() (in module neurotools.signal.multitaper)": [[146, "neurotools.signal.multitaper.sliding_multitaper_spectrum"], [333, "neurotools.signal.multitaper.sliding_multitaper_spectrum"]], "discard_spikes_closer_than_delta() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.discard_spikes_closer_than_delta"], [334, "neurotools.signal.ppc.discard_spikes_closer_than_delta"]], "estimate_bias_in_uncorrected_ppc() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.estimate_bias_in_uncorrected_ppc"], [334, "neurotools.signal.ppc.estimate_bias_in_uncorrected_ppc"]], "fftppc() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.fftppc"], [334, "neurotools.signal.ppc.fftppc"]], "fftppc_biased() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.fftppc_biased"], [334, "neurotools.signal.ppc.fftppc_biased"]], "fftppc_biased_multitaper() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.fftppc_biased_multitaper"], [334, "neurotools.signal.ppc.fftppc_biased_multitaper"]], "fftppc_multitaper() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.fftppc_multitaper"], [334, "neurotools.signal.ppc.fftppc_multitaper"]], "neurotools.signal.ppc": [[147, "module-neurotools.signal.ppc"], [334, "module-neurotools.signal.ppc"]], "pairwise_phase_consistancy() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.pairwise_phase_consistancy"], [334, "neurotools.signal.ppc.pairwise_phase_consistancy"]], "phase_randomize() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.phase_randomize"], [334, "neurotools.signal.ppc.phase_randomize"]], "phase_randomized_bias_correction() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.phase_randomized_bias_correction"], [334, "neurotools.signal.ppc.phase_randomized_bias_correction"]], "ppc_chance_level() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.ppc_chance_level"], [334, "neurotools.signal.ppc.ppc_chance_level"]], "ppc_phase_randomize_chance_level_sample() (in module neurotools.signal.ppc)": [[147, "neurotools.signal.ppc.ppc_phase_randomize_chance_level_sample"], [334, "neurotools.signal.ppc.ppc_phase_randomize_chance_level_sample"]], "sgkern() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGKern"], [335, "neurotools.signal.savitskygolay.SGKern"]], "sgkerna() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGKernA"], [335, "neurotools.signal.savitskygolay.SGKernA"]], "sgkernj() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGKernJ"], [335, "neurotools.signal.savitskygolay.SGKernJ"]], "sgkernv() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGKernV"], [335, "neurotools.signal.savitskygolay.SGKernV"]], "sgord() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGOrd"], [335, "neurotools.signal.savitskygolay.SGOrd"]], "sgaccelerate() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGaccelerate"], [335, "neurotools.signal.savitskygolay.SGaccelerate"]], "sgdifferentiate() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGdifferentiate"], [335, "neurotools.signal.savitskygolay.SGdifferentiate"]], "sgfilt() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGfilt"], [335, "neurotools.signal.savitskygolay.SGfilt"]], "sgfilta() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGfiltA"], [335, "neurotools.signal.savitskygolay.SGfiltA"]], "sgfiltj() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGfiltJ"], [335, "neurotools.signal.savitskygolay.SGfiltJ"]], "sgfiltv() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGfiltV"], [335, "neurotools.signal.savitskygolay.SGfiltV"]], "sgjerk() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGjerk"], [335, "neurotools.signal.savitskygolay.SGjerk"]], "sgsmooth() (in module neurotools.signal.savitskygolay)": [[149, "neurotools.signal.savitskygolay.SGsmooth"], [335, "neurotools.signal.savitskygolay.SGsmooth"]], "neurotools.signal.savitskygolay": [[149, "module-neurotools.signal.savitskygolay"], [335, "module-neurotools.signal.savitskygolay"]], "neurotools.signal.sde": [[150, "module-neurotools.signal.sde"], [336, "module-neurotools.signal.sde"]], "sample_ou_process() (in module neurotools.signal.sde)": [[150, "neurotools.signal.sde.sample_ou_process"], [336, "neurotools.signal.sde.sample_ou_process"]], "sample_wiener_process() (in module neurotools.signal.sde)": [[150, "neurotools.signal.sde.sample_wiener_process"], [336, "neurotools.signal.sde.sample_wiener_process"]], "brute_force_local_2d_maxima() (in module neurotools.spatial)": [[152, "neurotools.spatial.brute_force_local_2d_maxima"], [337, "neurotools.spatial.brute_force_local_2d_maxima"]], "neurotools.spatial": [[152, "module-neurotools.spatial"], [337, "module-neurotools.spatial"]], "array_average_amplitude() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_average_amplitude"], [338, "neurotools.spatial.array.array_average_amplitude"]], "array_count_centers() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_count_centers"], [338, "neurotools.spatial.array.array_count_centers"]], "array_count_critical() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_count_critical"], [338, "neurotools.spatial.array.array_count_critical"]], "array_kuramoto() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_kuramoto"], [338, "neurotools.spatial.array.array_kuramoto"]], "array_kuramoto_pgd() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_kuramoto_pgd"], [338, "neurotools.spatial.array.array_kuramoto_pgd"]], "array_kuramoto_pgd_standard_deviation() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_kuramoto_pgd_standard_deviation"], [338, "neurotools.spatial.array.array_kuramoto_pgd_standard_deviation"]], "array_kuramoto_standard_deviation() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_kuramoto_standard_deviation"], [338, "neurotools.spatial.array.array_kuramoto_standard_deviation"]], "array_phase_gradient() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phase_gradient"], [338, "neurotools.spatial.array.array_phase_gradient"]], "array_phasegradient_local() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phasegradient_local"], [338, "neurotools.spatial.array.array_phasegradient_local"]], "array_phasegradient_magnitude_cv() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phasegradient_magnitude_cv"], [338, "neurotools.spatial.array.array_phasegradient_magnitude_cv"]], "array_phasegradient_magnitude_sigma() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phasegradient_magnitude_sigma"], [338, "neurotools.spatial.array.array_phasegradient_magnitude_sigma"]], "array_phasegradient_pgd_threshold() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phasegradient_pgd_threshold"], [338, "neurotools.spatial.array.array_phasegradient_pgd_threshold"]], "array_phasegradient_planar() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_phasegradient_planar"], [338, "neurotools.spatial.array.array_phasegradient_planar"]], "array_speed_local() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_speed_local"], [338, "neurotools.spatial.array.array_speed_local"]], "array_speed_pgd_threshold() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_speed_pgd_threshold"], [338, "neurotools.spatial.array.array_speed_pgd_threshold"]], "array_synchrony() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_synchrony"], [338, "neurotools.spatial.array.array_synchrony"]], "array_synchrony_pgd() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_synchrony_pgd"], [338, "neurotools.spatial.array.array_synchrony_pgd"]], "array_synchrony_pgd_standard_deviation() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_synchrony_pgd_standard_deviation"], [338, "neurotools.spatial.array.array_synchrony_pgd_standard_deviation"]], "array_synchrony_standard_deviation() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_synchrony_standard_deviation"], [338, "neurotools.spatial.array.array_synchrony_standard_deviation"]], "array_wavelength_local() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_wavelength_local"], [338, "neurotools.spatial.array.array_wavelength_local"]], "array_wavelength_local_pgd_threshold() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_wavelength_local_pgd_threshold"], [338, "neurotools.spatial.array.array_wavelength_local_pgd_threshold"]], "array_wavelength_pgd_threshold() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_wavelength_pgd_threshold"], [338, "neurotools.spatial.array.array_wavelength_pgd_threshold"]], "array_wavelength_planar() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.array_wavelength_planar"], [338, "neurotools.spatial.array.array_wavelength_planar"]], "neurotools.spatial.array": [[153, "module-neurotools.spatial.array"], [338, "module-neurotools.spatial.array"]], "pack_array_data() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.pack_array_data"], [338, "neurotools.spatial.array.pack_array_data"]], "trim_array() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.trim_array"], [338, "neurotools.spatial.array.trim_array"]], "trim_array_as_if() (in module neurotools.spatial.array)": [[153, "neurotools.spatial.array.trim_array_as_if"], [338, "neurotools.spatial.array.trim_array_as_if"]], "dct_cut() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.dct_cut"], [339, "neurotools.spatial.dct.dct_cut"]], "dct_cut_antialias() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.dct_cut_antialias"], [339, "neurotools.spatial.dct.dct_cut_antialias"]], "dct_cut_downsampled() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.dct_cut_downsampled"], [339, "neurotools.spatial.dct.dct_cut_downsampled"]], "dct_upsample() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.dct_upsample"], [339, "neurotools.spatial.dct.dct_upsample"]], "dct_upsample_notrim() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.dct_upsample_notrim"], [339, "neurotools.spatial.dct.dct_upsample_notrim"]], "get_mask() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.get_mask"], [339, "neurotools.spatial.dct.get_mask"]], "get_mask_antialiased() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.get_mask_antialiased"], [339, "neurotools.spatial.dct.get_mask_antialiased"]], "iterated_upsample() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.iterated_upsample"], [339, "neurotools.spatial.dct.iterated_upsample"]], "neurotools.spatial.dct": [[154, "module-neurotools.spatial.dct"], [339, "module-neurotools.spatial.dct"]], "outer_complex() (in module neurotools.spatial.dct)": [[154, "neurotools.spatial.dct.outer_complex"], [339, "neurotools.spatial.dct.outer_complex"]], "distance_angular_deviation() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.distance_angular_deviation"], [340, "neurotools.spatial.distance.distance_angular_deviation"]], "get_average_synchrony_length_constant_parallel() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.get_average_synchrony_length_constant_parallel"], [340, "neurotools.spatial.distance.get_average_synchrony_length_constant_parallel"]], "get_averaged_angular_distance() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.get_averaged_angular_distance"], [340, "neurotools.spatial.distance.get_averaged_angular_distance"]], "get_length_constant_trial() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.get_length_constant_trial"], [340, "neurotools.spatial.distance.get_length_constant_trial"]], "get_pair_distance() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.get_pair_distance"], [340, "neurotools.spatial.distance.get_pair_distance"]], "neurotools.spatial.distance": [[155, "module-neurotools.spatial.distance"], [340, "module-neurotools.spatial.distance"]], "synchrony_length_constant_areas_summary() (in module neurotools.spatial.distance)": [[155, "neurotools.spatial.distance.synchrony_length_constant_areas_summary"], [340, "neurotools.spatial.distance.synchrony_length_constant_areas_summary"]], "coalesce() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.coalesce"], [341, "neurotools.spatial.fftzeros.coalesce"]], "coalesce_points() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.coalesce_points"], [341, "neurotools.spatial.fftzeros.coalesce_points"]], "cut_array_data() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.cut_array_data"], [341, "neurotools.spatial.fftzeros.cut_array_data"]], "dphidx() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.dPhidx"], [341, "neurotools.spatial.fftzeros.dPhidx"]], "dphidy() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.dPhidy"], [341, "neurotools.spatial.fftzeros.dPhidy"]], "find_critical_points() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.find_critical_points"], [341, "neurotools.spatial.fftzeros.find_critical_points"]], "find_critical_potential_points() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.find_critical_potential_points"], [341, "neurotools.spatial.fftzeros.find_critical_potential_points"]], "get_critical_spectra() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.get_critical_spectra"], [341, "neurotools.spatial.fftzeros.get_critical_spectra"]], "get_phase_gradient_as_complex() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.get_phase_gradient_as_complex"], [341, "neurotools.spatial.fftzeros.get_phase_gradient_as_complex"]], "getp() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.getp"], [341, "neurotools.spatial.fftzeros.getp"]], "getpeaks2d() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.getpeaks2d"], [341, "neurotools.spatial.fftzeros.getpeaks2d"]], "grad() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.grad"], [341, "neurotools.spatial.fftzeros.grad"]], "mirror2d() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.mirror2D"], [341, "neurotools.spatial.fftzeros.mirror2D"]], "neurotools.spatial.fftzeros": [[156, "module-neurotools.spatial.fftzeros"], [341, "module-neurotools.spatial.fftzeros"]], "plot_critical_points() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.plot_critical_points"], [341, "neurotools.spatial.fftzeros.plot_critical_points"]], "plot_critical_spectra() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.plot_critical_spectra"], [341, "neurotools.spatial.fftzeros.plot_critical_spectra"]], "plot_phase_direction() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.plot_phase_direction"], [341, "neurotools.spatial.fftzeros.plot_phase_direction"]], "plot_phase_gradient() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.plot_phase_gradient"], [341, "neurotools.spatial.fftzeros.plot_phase_gradient"]], "quickgrad() (in module neurotools.spatial.fftzeros)": [[156, "neurotools.spatial.fftzeros.quickgrad"], [341, "neurotools.spatial.fftzeros.quickgrad"]], "absorbing_gaussian() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.absorbing_gaussian"], [343, "neurotools.spatial.kernels.absorbing_gaussian"]], "absorbing_laplacian() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.absorbing_laplacian"], [343, "neurotools.spatial.kernels.absorbing_laplacian"]], "continuum_kernel() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.continuum_kernel"], [343, "neurotools.spatial.kernels.continuum_kernel"]], "cosine_kernel() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.cosine_kernel"], [343, "neurotools.spatial.kernels.cosine_kernel"]], "diffusion_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.diffusion_basis"], [343, "neurotools.spatial.kernels.diffusion_basis"]], "exponential_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.exponential_basis"], [343, "neurotools.spatial.kernels.exponential_basis"]], "gaussian_2d_kernel() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.gaussian_2D_kernel"], [343, "neurotools.spatial.kernels.gaussian_2D_kernel"]], "iterative_orthogonalize_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.iterative_orthogonalize_basis"], [343, "neurotools.spatial.kernels.iterative_orthogonalize_basis"]], "laplace_kernel() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.laplace_kernel"], [343, "neurotools.spatial.kernels.laplace_kernel"]], "laplacian() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.laplacian"], [343, "neurotools.spatial.kernels.laplacian"]], "log_cosine_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.log_cosine_basis"], [343, "neurotools.spatial.kernels.log_cosine_basis"]], "log_spline_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.log_spline_basis"], [343, "neurotools.spatial.kernels.log_spline_basis"]], "magickernel() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.magickernel"], [343, "neurotools.spatial.kernels.magickernel"]], "magicsharp() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.magicsharp"], [343, "neurotools.spatial.kernels.magicsharp"]], "make_cosine_basis() (in module neurotools.spatial.kernels)": [[158, "neurotools.spatial.kernels.make_cosine_basis"], [343, "neurotools.spatial.kernels.make_cosine_basis"]], "neurotools.spatial.kernels": [[158, "module-neurotools.spatial.kernels"], [343, "module-neurotools.spatial.kernels"]], "analytic_signal_coherence() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.analytic_signal_coherence"], [345, "neurotools.spatial.phase.analytic_signal_coherence"]], "neurotools.spatial.phase": [[160, "module-neurotools.spatial.phase"], [345, "module-neurotools.spatial.phase"]], "population_average_amplitude() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_average_amplitude"], [345, "neurotools.spatial.phase.population_average_amplitude"]], "population_kuramoto() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_kuramoto"], [345, "neurotools.spatial.phase.population_kuramoto"]], "population_median_frequency() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_median_frequency"], [345, "neurotools.spatial.phase.population_median_frequency"]], "population_median_phase_velocity() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_median_phase_velocity"], [345, "neurotools.spatial.phase.population_median_phase_velocity"]], "population_normalized_sliding_signal_coherence() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_normalized_sliding_signal_coherence"], [345, "neurotools.spatial.phase.population_normalized_sliding_signal_coherence"]], "population_phase_coherence() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_phase_coherence"], [345, "neurotools.spatial.phase.population_phase_coherence"]], "population_phase_relative_sliding_kuramoto() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_phase_relative_sliding_kuramoto"], [345, "neurotools.spatial.phase.population_phase_relative_sliding_kuramoto"]], "population_polar_std() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_polar_std"], [345, "neurotools.spatial.phase.population_polar_std"]], "population_signal_amplitude_dispersion() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_amplitude_dispersion"], [345, "neurotools.spatial.phase.population_signal_amplitude_dispersion"]], "population_signal_amplitude_precision() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_amplitude_precision"], [345, "neurotools.spatial.phase.population_signal_amplitude_precision"]], "population_signal_amplitude_std() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_amplitude_std"], [345, "neurotools.spatial.phase.population_signal_amplitude_std"]], "population_signal_concentration() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_concentration"], [345, "neurotools.spatial.phase.population_signal_concentration"]], "population_signal_description() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_description"], [345, "neurotools.spatial.phase.population_signal_description"]], "population_signal_dispersion() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_dispersion"], [345, "neurotools.spatial.phase.population_signal_dispersion"]], "population_signal_phase_dispersion() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_phase_dispersion"], [345, "neurotools.spatial.phase.population_signal_phase_dispersion"]], "population_signal_phase_precision() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_phase_precision"], [345, "neurotools.spatial.phase.population_signal_phase_precision"]], "population_signal_phase_std() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_phase_std"], [345, "neurotools.spatial.phase.population_signal_phase_std"]], "population_signal_precision() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_signal_precision"], [345, "neurotools.spatial.phase.population_signal_precision"]], "population_sliding_signal_coherence() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_sliding_signal_coherence"], [345, "neurotools.spatial.phase.population_sliding_signal_coherence"]], "population_synchrony() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_synchrony"], [345, "neurotools.spatial.phase.population_synchrony"]], "population_synchrony_linear() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.population_synchrony_linear"], [345, "neurotools.spatial.phase.population_synchrony_linear"]], "sliding_population_signal_coherence() (in module neurotools.spatial.phase)": [[160, "neurotools.spatial.phase.sliding_population_signal_coherence"], [345, "neurotools.spatial.phase.sliding_population_signal_coherence"]], "c2p() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.c2p"], [346, "neurotools.spatial.points.c2p"]], "closest() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.closest"], [346, "neurotools.spatial.points.closest"]], "neurotools.spatial.points": [[161, "module-neurotools.spatial.points"], [346, "module-neurotools.spatial.points"]], "p2c() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.p2c"], [346, "neurotools.spatial.points.p2c"]], "pair_neighbors() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.pair_neighbors"], [346, "neurotools.spatial.points.pair_neighbors"]], "paired_distances() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.paired_distances"], [346, "neurotools.spatial.points.paired_distances"]], "to_xypoint() (in module neurotools.spatial.points)": [[161, "neurotools.spatial.points.to_xypoint"], [346, "neurotools.spatial.points.to_xypoint"]], "interp_bin() (in module neurotools.spatial.spiking)": [[163, "neurotools.spatial.spiking.interp_bin"], [347, "neurotools.spatial.spiking.interp_bin"]], "neurotools.spatial.spiking": [[163, "module-neurotools.spatial.spiking"], [347, "module-neurotools.spatial.spiking"]], "coalesce() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.coalesce"], [348, "neurotools.spatial.triangulation.coalesce"]], "edgesnearby() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.edgesNearby"], [348, "neurotools.spatial.triangulation.edgesNearby"]], "mergenearby() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.mergeNearby"], [348, "neurotools.spatial.triangulation.mergeNearby"]], "neurotools.spatial.triangulation": [[164, "module-neurotools.spatial.triangulation"], [348, "module-neurotools.spatial.triangulation"]], "plot_edges() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.plot_edges"], [348, "neurotools.spatial.triangulation.plot_edges"]], "plot_triangles() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.plot_triangles"], [348, "neurotools.spatial.triangulation.plot_triangles"]], "trianglestoedges() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.trianglesToEdges"], [348, "neurotools.spatial.triangulation.trianglesToEdges"]], "uniquerow() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.uniquerow"], [348, "neurotools.spatial.triangulation.uniquerow"]], "z2xy() (in module neurotools.spatial.triangulation)": [[164, "neurotools.spatial.triangulation.z2xy"], [348, "neurotools.spatial.triangulation.z2xy"]], "neurotools.spikes": [[166, "module-neurotools.spikes"], [349, "module-neurotools.spikes"]], "bin_spike_times() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.bin_spike_times"], [350, "neurotools.spikes.spikes.bin_spike_times"]], "bin_spikes_raster() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.bin_spikes_raster"], [350, "neurotools.spikes.spikes.bin_spikes_raster"]], "cut_spikes() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.cut_spikes"], [350, "neurotools.spikes.spikes.cut_spikes"]], "neurotools.spikes.spikes": [[167, "module-neurotools.spikes.spikes"], [350, "module-neurotools.spikes.spikes"]], "pack_cross_correlation_matrix() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.pack_cross_correlation_matrix"], [350, "neurotools.spikes.spikes.pack_cross_correlation_matrix"]], "pp_xcorr() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.pp_xcorr"], [350, "neurotools.spikes.spikes.pp_xcorr"]], "times_to_raster() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.times_to_raster"], [350, "neurotools.spikes.spikes.times_to_raster"]], "txcorr() (in module neurotools.spikes.spikes)": [[167, "neurotools.spikes.spikes.txcorr"], [350, "neurotools.spikes.spikes.txcorr"]], "getfwhm() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getFWHM"], [351, "neurotools.spikes.waveform.getFWHM"]], "getphp() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getPHP"], [351, "neurotools.spikes.waveform.getPHP"]], "getpt() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getPT"], [351, "neurotools.spikes.waveform.getPT"]], "getpthw() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getPTHW"], [351, "neurotools.spikes.waveform.getPTHW"]], "getpvt() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getPVT"], [351, "neurotools.spikes.waveform.getPVT"]], "getwahp() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.getWAHP"], [351, "neurotools.spikes.waveform.getWAHP"]], "is_thin() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.is_thin"], [351, "neurotools.spikes.waveform.is_thin"]], "is_thin_pvt() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.is_thin_pvt"], [351, "neurotools.spikes.waveform.is_thin_pvt"]], "minmax() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.minmax"], [351, "neurotools.spikes.waveform.minmax"]], "neurotools.spikes.waveform": [[168, "module-neurotools.spikes.waveform"], [351, "module-neurotools.spikes.waveform"]], "normalized_waveform() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.normalized_waveform"], [351, "neurotools.spikes.waveform.normalized_waveform"]], "process() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.process"], [351, "neurotools.spikes.waveform.process"]], "realign() (in module neurotools.spikes.waveform)": [[168, "neurotools.spikes.waveform.realign"], [351, "neurotools.spikes.waveform.realign"]], "description (class in neurotools.stats)": [[169, "neurotools.stats.Description"], [352, "neurotools.stats.Description"]], "add_constant() (in module neurotools.stats)": [[169, "neurotools.stats.add_constant"], [352, "neurotools.stats.add_constant"]], "auc_to_g2() (in module neurotools.stats)": [[169, "neurotools.stats.auc_to_g2"], [352, "neurotools.stats.auc_to_g2"]], "block_shuffle() (in module neurotools.stats)": [[169, "neurotools.stats.block_shuffle"], [352, "neurotools.stats.block_shuffle"]], "covariance() (in module neurotools.stats)": [[169, "neurotools.stats.covariance"], [352, "neurotools.stats.covariance"]], "crossvalidated_least_squares() (in module neurotools.stats)": [[169, "neurotools.stats.crossvalidated_least_squares"], [352, "neurotools.stats.crossvalidated_least_squares"]], "fraction_explained_deviance() (in module neurotools.stats)": [[169, "neurotools.stats.fraction_explained_deviance"], [352, "neurotools.stats.fraction_explained_deviance"]], "glmfit() (in module neurotools.stats)": [[169, "neurotools.stats.glmfit"], [352, "neurotools.stats.glmfit"]], "neurotools.stats": [[169, "module-neurotools.stats"], [352, "module-neurotools.stats"]], "nrmse() (in module neurotools.stats)": [[169, "neurotools.stats.nrmse"], [352, "neurotools.stats.nrmse"]], "outliers() (in module neurotools.stats)": [[169, "neurotools.stats.outliers"], [352, "neurotools.stats.outliers"]], "partition_data() (in module neurotools.stats)": [[169, "neurotools.stats.partition_data"], [352, "neurotools.stats.partition_data"]], "partition_data_for_crossvalidation() (in module neurotools.stats)": [[169, "neurotools.stats.partition_data_for_crossvalidation"], [352, "neurotools.stats.partition_data_for_crossvalidation"]], "partition_trials_for_crossvalidation() (in module neurotools.stats)": [[169, "neurotools.stats.partition_trials_for_crossvalidation"], [352, "neurotools.stats.partition_trials_for_crossvalidation"]], "pca() (in module neurotools.stats)": [[169, "neurotools.stats.pca"], [352, "neurotools.stats.pca"]], "polar_error() (in module neurotools.stats)": [[169, "neurotools.stats.polar_error"], [352, "neurotools.stats.polar_error"]], "print_stats() (in module neurotools.stats)": [[169, "neurotools.stats.print_stats"], [352, "neurotools.stats.print_stats"]], "reject_outliers() (in module neurotools.stats)": [[169, "neurotools.stats.reject_outliers"], [352, "neurotools.stats.reject_outliers"]], "short() (neurotools.stats.description method)": [[169, "neurotools.stats.Description.short"], [352, "neurotools.stats.Description.short"]], "trial_crossvalidated_least_squares() (in module neurotools.stats)": [[169, "neurotools.stats.trial_crossvalidated_least_squares"], [352, "neurotools.stats.trial_crossvalidated_least_squares"]], "weighted_avg_and_std() (in module neurotools.stats)": [[169, "neurotools.stats.weighted_avg_and_std"], [352, "neurotools.stats.weighted_avg_and_std"]], "abspolar_stats() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.abspolar_stats"], [353, "neurotools.stats.circular.abspolar_stats"]], "complex_gaussian() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.complex_gaussian"], [353, "neurotools.stats.circular.complex_gaussian"]], "fit_vonmises() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.fit_vonmises"], [353, "neurotools.stats.circular.fit_vonmises"]], "logpolar_gaussian() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.logpolar_gaussian"], [353, "neurotools.stats.circular.logpolar_gaussian"]], "logpolar_stats() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.logpolar_stats"], [353, "neurotools.stats.circular.logpolar_stats"]], "neurotools.stats.circular": [[172, "module-neurotools.stats.circular"], [353, "module-neurotools.stats.circular"]], "squared_first_circular_moment() (in module neurotools.stats.circular)": [[172, "neurotools.stats.circular.squared_first_circular_moment"], [353, "neurotools.stats.circular.squared_first_circular_moment"]], "autocorrelation_bayes() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.autocorrelation_bayes"], [354, "neurotools.stats.convolutional.autocorrelation_bayes"]], "blockccm() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.blockccm"], [354, "neurotools.stats.convolutional.blockccm"]], "blocksta() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.blocksta"], [354, "neurotools.stats.convolutional.blocksta"]], "ccm() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.ccm"], [354, "neurotools.stats.convolutional.ccm"]], "ccor() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.ccor"], [354, "neurotools.stats.convolutional.ccor"]], "construct_lowpass_operator() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.construct_lowpass_operator"], [354, "neurotools.stats.convolutional.construct_lowpass_operator"]], "create_spectral_model() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.create_spectral_model"], [354, "neurotools.stats.convolutional.create_spectral_model"]], "cspect() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.cspect"], [354, "neurotools.stats.convolutional.cspect"]], "cspectm() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.cspectm"], [354, "neurotools.stats.convolutional.cspectm"]], "neurotools.stats.convolutional": [[173, "module-neurotools.stats.convolutional"], [354, "module-neurotools.stats.convolutional"]], "reconstruct() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.reconstruct"], [354, "neurotools.stats.convolutional.reconstruct"]], "spectreconstruct() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.spectreconstruct"], [354, "neurotools.stats.convolutional.spectreconstruct"]], "spike_lfp_filters() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.spike_lfp_filters"], [354, "neurotools.stats.convolutional.spike_lfp_filters"]], "sta() (in module neurotools.stats.convolutional)": [[173, "neurotools.stats.convolutional.sta"], [354, "neurotools.stats.convolutional.sta"]], "adaptive_density_grid() (in module neurotools.stats.density)": [[174, "neurotools.stats.density.adaptive_density_grid"], [355, "neurotools.stats.density.adaptive_density_grid"]], "gridhist() (in module neurotools.stats.density)": [[174, "neurotools.stats.density.gridhist"], [355, "neurotools.stats.density.gridhist"]], "kdepeak() (in module neurotools.stats.density)": [[174, "neurotools.stats.density.kdepeak"], [355, "neurotools.stats.density.kdepeak"]], "knn_1d_density() (in module neurotools.stats.density)": [[174, "neurotools.stats.density.knn_1d_density"], [355, "neurotools.stats.density.knn_1d_density"]], "neurotools.stats.density": [[174, "module-neurotools.stats.density"], [355, "module-neurotools.stats.density"]], "explogpdf() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.explogpdf"], [356, "neurotools.stats.distributions.explogpdf"]], "gaussian_logpdf() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.gaussian_logpdf"], [356, "neurotools.stats.distributions.gaussian_logpdf"]], "gaussian_pdf() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.gaussian_pdf"], [356, "neurotools.stats.distributions.gaussian_pdf"]], "neurotools.stats.distributions": [[175, "module-neurotools.stats.distributions"], [356, "module-neurotools.stats.distributions"]], "poisson_logpdf() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.poisson_logpdf"], [356, "neurotools.stats.distributions.poisson_logpdf"]], "poisson_pdf() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.poisson_pdf"], [356, "neurotools.stats.distributions.poisson_pdf"]], "sample_categorical() (in module neurotools.stats.distributions)": [[175, "neurotools.stats.distributions.sample_categorical"], [356, "neurotools.stats.distributions.sample_categorical"]], "fast_kde() (in module neurotools.stats.fast_kde)": [[177, "neurotools.stats.fast_kde.fast_kde"], [357, "neurotools.stats.fast_kde.fast_kde"]], "image_cov() (in module neurotools.stats.fast_kde)": [[177, "neurotools.stats.fast_kde.image_cov"], [357, "neurotools.stats.fast_kde.image_cov"]], "neurotools.stats.fast_kde": [[177, "module-neurotools.stats.fast_kde"], [357, "module-neurotools.stats.fast_kde"]], "gaussian (class in neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.Gaussian"], [179, "neurotools.stats.gaussian.Gaussian"], [180, "neurotools.stats.gaussian.Gaussian"], [181, "neurotools.stats.gaussian.Gaussian"], [182, "neurotools.stats.gaussian.Gaussian"], [183, "neurotools.stats.gaussian.Gaussian"], [184, "neurotools.stats.gaussian.Gaussian"], [185, "neurotools.stats.gaussian.Gaussian"], [186, "neurotools.stats.gaussian.Gaussian"], [358, "neurotools.stats.gaussian.Gaussian"]], "mvg_dkl() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_DKL"], [179, "neurotools.stats.gaussian.MVG_DKL"], [180, "neurotools.stats.gaussian.MVG_DKL"], [181, "neurotools.stats.gaussian.MVG_DKL"], [182, "neurotools.stats.gaussian.MVG_DKL"], [183, "neurotools.stats.gaussian.MVG_DKL"], [184, "neurotools.stats.gaussian.MVG_DKL"], [185, "neurotools.stats.gaussian.MVG_DKL"], [186, "neurotools.stats.gaussian.MVG_DKL"], [358, "neurotools.stats.gaussian.MVG_DKL"]], "mvg_dkl_cp() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_DKL_CP"], [179, "neurotools.stats.gaussian.MVG_DKL_CP"], [180, "neurotools.stats.gaussian.MVG_DKL_CP"], [181, "neurotools.stats.gaussian.MVG_DKL_CP"], [182, "neurotools.stats.gaussian.MVG_DKL_CP"], [183, "neurotools.stats.gaussian.MVG_DKL_CP"], [184, "neurotools.stats.gaussian.MVG_DKL_CP"], [185, "neurotools.stats.gaussian.MVG_DKL_CP"], [186, "neurotools.stats.gaussian.MVG_DKL_CP"], [358, "neurotools.stats.gaussian.MVG_DKL_CP"]], "mvg_pdf() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_PDF"], [179, "neurotools.stats.gaussian.MVG_PDF"], [180, "neurotools.stats.gaussian.MVG_PDF"], [181, "neurotools.stats.gaussian.MVG_PDF"], [182, "neurotools.stats.gaussian.MVG_PDF"], [183, "neurotools.stats.gaussian.MVG_PDF"], [184, "neurotools.stats.gaussian.MVG_PDF"], [185, "neurotools.stats.gaussian.MVG_PDF"], [186, "neurotools.stats.gaussian.MVG_PDF"], [358, "neurotools.stats.gaussian.MVG_PDF"]], "mvg_check() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_check"], [179, "neurotools.stats.gaussian.MVG_check"], [180, "neurotools.stats.gaussian.MVG_check"], [181, "neurotools.stats.gaussian.MVG_check"], [182, "neurotools.stats.gaussian.MVG_check"], [183, "neurotools.stats.gaussian.MVG_check"], [184, "neurotools.stats.gaussian.MVG_check"], [185, "neurotools.stats.gaussian.MVG_check"], [186, "neurotools.stats.gaussian.MVG_check"], [358, "neurotools.stats.gaussian.MVG_check"]], "mvg_conditional() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_conditional"], [179, "neurotools.stats.gaussian.MVG_conditional"], [180, "neurotools.stats.gaussian.MVG_conditional"], [181, "neurotools.stats.gaussian.MVG_conditional"], [182, "neurotools.stats.gaussian.MVG_conditional"], [183, "neurotools.stats.gaussian.MVG_conditional"], [184, "neurotools.stats.gaussian.MVG_conditional"], [185, "neurotools.stats.gaussian.MVG_conditional"], [186, "neurotools.stats.gaussian.MVG_conditional"], [358, "neurotools.stats.gaussian.MVG_conditional"]], "mvg_divide() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_divide"], [179, "neurotools.stats.gaussian.MVG_divide"], [180, "neurotools.stats.gaussian.MVG_divide"], [181, "neurotools.stats.gaussian.MVG_divide"], [182, "neurotools.stats.gaussian.MVG_divide"], [183, "neurotools.stats.gaussian.MVG_divide"], [184, "neurotools.stats.gaussian.MVG_divide"], [185, "neurotools.stats.gaussian.MVG_divide"], [186, "neurotools.stats.gaussian.MVG_divide"], [358, "neurotools.stats.gaussian.MVG_divide"]], "mvg_entropy() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_entropy"], [179, "neurotools.stats.gaussian.MVG_entropy"], [180, "neurotools.stats.gaussian.MVG_entropy"], [181, "neurotools.stats.gaussian.MVG_entropy"], [182, "neurotools.stats.gaussian.MVG_entropy"], [183, "neurotools.stats.gaussian.MVG_entropy"], [184, "neurotools.stats.gaussian.MVG_entropy"], [185, "neurotools.stats.gaussian.MVG_entropy"], [186, "neurotools.stats.gaussian.MVG_entropy"], [358, "neurotools.stats.gaussian.MVG_entropy"]], "mvg_kalman() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_kalman"], [179, "neurotools.stats.gaussian.MVG_kalman"], [180, "neurotools.stats.gaussian.MVG_kalman"], [181, "neurotools.stats.gaussian.MVG_kalman"], [182, "neurotools.stats.gaussian.MVG_kalman"], [183, "neurotools.stats.gaussian.MVG_kalman"], [184, "neurotools.stats.gaussian.MVG_kalman"], [185, "neurotools.stats.gaussian.MVG_kalman"], [186, "neurotools.stats.gaussian.MVG_kalman"], [358, "neurotools.stats.gaussian.MVG_kalman"]], "mvg_kalman_p_inversea() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [179, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [180, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [181, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [182, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [183, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [184, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [185, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [186, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"], [358, "neurotools.stats.gaussian.MVG_kalman_P_inverseA"]], "mvg_kalman_joint() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_kalman_joint"], [179, "neurotools.stats.gaussian.MVG_kalman_joint"], [180, "neurotools.stats.gaussian.MVG_kalman_joint"], [181, "neurotools.stats.gaussian.MVG_kalman_joint"], [182, "neurotools.stats.gaussian.MVG_kalman_joint"], [183, "neurotools.stats.gaussian.MVG_kalman_joint"], [184, "neurotools.stats.gaussian.MVG_kalman_joint"], [185, "neurotools.stats.gaussian.MVG_kalman_joint"], [186, "neurotools.stats.gaussian.MVG_kalman_joint"], [358, "neurotools.stats.gaussian.MVG_kalman_joint"]], "mvg_kalman_joint_p() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [179, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [180, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [181, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [182, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [183, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [184, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [185, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [186, "neurotools.stats.gaussian.MVG_kalman_joint_P"], [358, "neurotools.stats.gaussian.MVG_kalman_joint_P"]], "mvg_logpdf() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_logPDF"], [179, "neurotools.stats.gaussian.MVG_logPDF"], [180, "neurotools.stats.gaussian.MVG_logPDF"], [181, "neurotools.stats.gaussian.MVG_logPDF"], [182, "neurotools.stats.gaussian.MVG_logPDF"], [183, "neurotools.stats.gaussian.MVG_logPDF"], [184, "neurotools.stats.gaussian.MVG_logPDF"], [185, "neurotools.stats.gaussian.MVG_logPDF"], [186, "neurotools.stats.gaussian.MVG_logPDF"], [358, "neurotools.stats.gaussian.MVG_logPDF"]], "mvg_multiply() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_multiply"], [179, "neurotools.stats.gaussian.MVG_multiply"], [180, "neurotools.stats.gaussian.MVG_multiply"], [181, "neurotools.stats.gaussian.MVG_multiply"], [182, "neurotools.stats.gaussian.MVG_multiply"], [183, "neurotools.stats.gaussian.MVG_multiply"], [184, "neurotools.stats.gaussian.MVG_multiply"], [185, "neurotools.stats.gaussian.MVG_multiply"], [186, "neurotools.stats.gaussian.MVG_multiply"], [358, "neurotools.stats.gaussian.MVG_multiply"]], "mvg_multiply_c() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_multiply_C"], [179, "neurotools.stats.gaussian.MVG_multiply_C"], [180, "neurotools.stats.gaussian.MVG_multiply_C"], [181, "neurotools.stats.gaussian.MVG_multiply_C"], [182, "neurotools.stats.gaussian.MVG_multiply_C"], [183, "neurotools.stats.gaussian.MVG_multiply_C"], [184, "neurotools.stats.gaussian.MVG_multiply_C"], [185, "neurotools.stats.gaussian.MVG_multiply_C"], [186, "neurotools.stats.gaussian.MVG_multiply_C"], [358, "neurotools.stats.gaussian.MVG_multiply_C"]], "mvg_projection() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_projection"], [179, "neurotools.stats.gaussian.MVG_projection"], [180, "neurotools.stats.gaussian.MVG_projection"], [181, "neurotools.stats.gaussian.MVG_projection"], [182, "neurotools.stats.gaussian.MVG_projection"], [183, "neurotools.stats.gaussian.MVG_projection"], [184, "neurotools.stats.gaussian.MVG_projection"], [185, "neurotools.stats.gaussian.MVG_projection"], [186, "neurotools.stats.gaussian.MVG_projection"], [358, "neurotools.stats.gaussian.MVG_projection"]], "mvg_sample() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.MVG_sample"], [179, "neurotools.stats.gaussian.MVG_sample"], [180, "neurotools.stats.gaussian.MVG_sample"], [181, "neurotools.stats.gaussian.MVG_sample"], [182, "neurotools.stats.gaussian.MVG_sample"], [183, "neurotools.stats.gaussian.MVG_sample"], [184, "neurotools.stats.gaussian.MVG_sample"], [185, "neurotools.stats.gaussian.MVG_sample"], [186, "neurotools.stats.gaussian.MVG_sample"], [358, "neurotools.stats.gaussian.MVG_sample"]], "gaussian_quadrature() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.gaussian_quadrature"], [179, "neurotools.stats.gaussian.gaussian_quadrature"], [180, "neurotools.stats.gaussian.gaussian_quadrature"], [181, "neurotools.stats.gaussian.gaussian_quadrature"], [182, "neurotools.stats.gaussian.gaussian_quadrature"], [183, "neurotools.stats.gaussian.gaussian_quadrature"], [184, "neurotools.stats.gaussian.gaussian_quadrature"], [185, "neurotools.stats.gaussian.gaussian_quadrature"], [186, "neurotools.stats.gaussian.gaussian_quadrature"], [358, "neurotools.stats.gaussian.gaussian_quadrature"]], "gaussian_quadrature_logarithmic() (in module neurotools.stats.gaussian)": [[178, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [179, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [180, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [181, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [182, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [183, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [184, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [185, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [186, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"], [358, "neurotools.stats.gaussian.gaussian_quadrature_logarithmic"]], "logpdf() (neurotools.stats.gaussian.gaussian method)": [[178, "neurotools.stats.gaussian.Gaussian.logpdf"], [179, "neurotools.stats.gaussian.Gaussian.logpdf"], [180, "neurotools.stats.gaussian.Gaussian.logpdf"], [181, "neurotools.stats.gaussian.Gaussian.logpdf"], [182, "neurotools.stats.gaussian.Gaussian.logpdf"], [183, "neurotools.stats.gaussian.Gaussian.logpdf"], [184, "neurotools.stats.gaussian.Gaussian.logpdf"], [185, "neurotools.stats.gaussian.Gaussian.logpdf"], [186, "neurotools.stats.gaussian.Gaussian.logpdf"], [358, "neurotools.stats.gaussian.Gaussian.logpdf"]], "m (neurotools.stats.gaussian.gaussian attribute)": [[178, "neurotools.stats.gaussian.Gaussian.m"], [179, "neurotools.stats.gaussian.Gaussian.m"], [180, "neurotools.stats.gaussian.Gaussian.m"], [181, "neurotools.stats.gaussian.Gaussian.m"], [182, "neurotools.stats.gaussian.Gaussian.m"], [183, "neurotools.stats.gaussian.Gaussian.m"], [184, "neurotools.stats.gaussian.Gaussian.m"], [185, "neurotools.stats.gaussian.Gaussian.m"], [186, "neurotools.stats.gaussian.Gaussian.m"], [358, "neurotools.stats.gaussian.Gaussian.m"]], "neurotools.stats.gaussian": [[178, "module-neurotools.stats.gaussian"], [179, "module-neurotools.stats.gaussian"], [180, "module-neurotools.stats.gaussian"], [181, "module-neurotools.stats.gaussian"], [182, "module-neurotools.stats.gaussian"], [183, "module-neurotools.stats.gaussian"], [184, "module-neurotools.stats.gaussian"], [185, "module-neurotools.stats.gaussian"], [186, "module-neurotools.stats.gaussian"], [358, "module-neurotools.stats.gaussian"]], "t (neurotools.stats.gaussian.gaussian attribute)": [[178, "neurotools.stats.gaussian.Gaussian.t"], [179, "neurotools.stats.gaussian.Gaussian.t"], [180, "neurotools.stats.gaussian.Gaussian.t"], [181, "neurotools.stats.gaussian.Gaussian.t"], [182, "neurotools.stats.gaussian.Gaussian.t"], [183, "neurotools.stats.gaussian.Gaussian.t"], [184, "neurotools.stats.gaussian.Gaussian.t"], [185, "neurotools.stats.gaussian.Gaussian.t"], [186, "neurotools.stats.gaussian.Gaussian.t"], [358, "neurotools.stats.gaussian.Gaussian.t"]], "glmpenaltybernoulli() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.GLMPenaltyBernoulli"], [359, "neurotools.stats.glm.GLMPenaltyBernoulli"]], "glmpenaltyl2() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.GLMPenaltyL2"], [359, "neurotools.stats.glm.GLMPenaltyL2"]], "glmpenaltypoisson() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.GLMPenaltyPoisson"], [359, "neurotools.stats.glm.GLMPenaltyPoisson"]], "cosine_kernel() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.cosine_kernel"], [359, "neurotools.stats.glm.cosine_kernel"]], "crossvalidatedauc() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.crossvalidatedAUC"], [359, "neurotools.stats.glm.crossvalidatedAUC"]], "fitglm() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.fitGLM"], [359, "neurotools.stats.glm.fitGLM"]], "gradientglmfit() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.gradientglmfit"], [359, "neurotools.stats.glm.gradientglmfit"]], "log_cosine_basis() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.log_cosine_basis"], [359, "neurotools.stats.glm.log_cosine_basis"]], "make_cosine_basis() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.make_cosine_basis"], [359, "neurotools.stats.glm.make_cosine_basis"]], "neurotools.stats.glm": [[187, "module-neurotools.stats.glm"], [359, "module-neurotools.stats.glm"]], "numeric_grad() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.numeric_grad"], [359, "neurotools.stats.glm.numeric_grad"]], "numeric_hess() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.numeric_hess"], [359, "neurotools.stats.glm.numeric_hess"]], "ppglmfit() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.ppglmfit"], [359, "neurotools.stats.glm.ppglmfit"]], "sexp() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.sexp"], [359, "neurotools.stats.glm.sexp"]], "sigmoid() (in module neurotools.stats.glm)": [[187, "neurotools.stats.glm.sigmoid"], [359, "neurotools.stats.glm.sigmoid"]], "grid_search() (in module neurotools.stats.grid_search)": [[189, "neurotools.stats.grid_search.grid_search"], [360, "neurotools.stats.grid_search.grid_search"]], "neurotools.stats.grid_search": [[189, "module-neurotools.stats.grid_search"], [360, "module-neurotools.stats.grid_search"]], "bernoulliobservationapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.BernoulliObservationApproximator"], [361, "neurotools.stats.hmm.BernoulliObservationApproximator"]], "bernoulliobservationmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.BernoulliObservationModel"], [361, "neurotools.stats.hmm.BernoulliObservationModel"]], "chisquarecoxapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.ChisquareCoxApproximator"], [361, "neurotools.stats.hmm.ChisquareCoxApproximator"]], "chisquarecoxmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.ChisquareCoxModel"], [361, "neurotools.stats.hmm.ChisquareCoxModel"]], "diffusiongaussian (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.DiffusionGaussian"], [361, "neurotools.stats.hmm.DiffusionGaussian"]], "gaussiancoxapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.GaussianCoxApproximator"], [361, "neurotools.stats.hmm.GaussianCoxApproximator"]], "gaussiancoxmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.GaussianCoxModel"], [361, "neurotools.stats.hmm.GaussianCoxModel"]], "loggaussiancoxapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.LogGaussianCoxApproximator"], [361, "neurotools.stats.hmm.LogGaussianCoxApproximator"]], "loggaussiancoxmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.LogGaussianCoxModel"], [361, "neurotools.stats.hmm.LogGaussianCoxModel"]], "mvgouupdate (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.MVGOUUpdate"], [361, "neurotools.stats.hmm.MVGOUUpdate"]], "mvgupdate (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.MVGUpdate"], [361, "neurotools.stats.hmm.MVGUpdate"]], "mvgaussian (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.MVGaussian"], [361, "neurotools.stats.hmm.MVGaussian"]], "mvloggaussiancox (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.MVLogGaussianCox"], [361, "neurotools.stats.hmm.MVLogGaussianCox"]], "mvloggaussiancox.mvpoissonapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.MVLogGaussianCox.MVPoissonApproximator"], [361, "neurotools.stats.hmm.MVLogGaussianCox.MVPoissonApproximator"]], "ougaussian (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.OUGaussian"], [361, "neurotools.stats.hmm.OUGaussian"]], "poissonobservationapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.PoissonObservationApproximator"], [361, "neurotools.stats.hmm.PoissonObservationApproximator"]], "poissonobservationmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.PoissonObservationModel"], [361, "neurotools.stats.hmm.PoissonObservationModel"]], "truncatedloggaussiancoxapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.TruncatedLogGaussianCoxApproximator"], [361, "neurotools.stats.hmm.TruncatedLogGaussianCoxApproximator"]], "truncatedloggaussiancoxmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.TruncatedLogGaussianCoxModel"], [361, "neurotools.stats.hmm.TruncatedLogGaussianCoxModel"]], "truncatedpoissonobservationapproximator (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.TruncatedPoissonObservationApproximator"], [361, "neurotools.stats.hmm.TruncatedPoissonObservationApproximator"]], "truncatedpoissonobservationmodel (class in neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.TruncatedPoissonObservationModel"], [361, "neurotools.stats.hmm.TruncatedPoissonObservationModel"]], "backward_abstract() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.backward_abstract"], [361, "neurotools.stats.hmm.backward_abstract"]], "baum_welch() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.baum_welch"], [361, "neurotools.stats.hmm.baum_welch"]], "bwd() (neurotools.stats.hmm.diffusiongaussian method)": [[191, "neurotools.stats.hmm.DiffusionGaussian.bwd"], [361, "neurotools.stats.hmm.DiffusionGaussian.bwd"]], "bwd() (neurotools.stats.hmm.mvgouupdate method)": [[191, "neurotools.stats.hmm.MVGOUUpdate.bwd"], [361, "neurotools.stats.hmm.MVGOUUpdate.bwd"]], "bwd() (neurotools.stats.hmm.mvgupdate method)": [[191, "neurotools.stats.hmm.MVGUpdate.bwd"], [361, "neurotools.stats.hmm.MVGUpdate.bwd"]], "bwd() (neurotools.stats.hmm.ougaussian method)": [[191, "neurotools.stats.hmm.OUGaussian.bwd"], [361, "neurotools.stats.hmm.OUGaussian.bwd"]], "forward_abstract() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.forward_abstract"], [361, "neurotools.stats.hmm.forward_abstract"]], "forward_backward() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.forward_backward"], [361, "neurotools.stats.hmm.forward_backward"]], "forward_backward_abstract() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.forward_backward_abstract"], [361, "neurotools.stats.hmm.forward_backward_abstract"]], "fwd() (neurotools.stats.hmm.diffusiongaussian method)": [[191, "neurotools.stats.hmm.DiffusionGaussian.fwd"], [361, "neurotools.stats.hmm.DiffusionGaussian.fwd"]], "fwd() (neurotools.stats.hmm.mvgouupdate method)": [[191, "neurotools.stats.hmm.MVGOUUpdate.fwd"], [361, "neurotools.stats.hmm.MVGOUUpdate.fwd"]], "fwd() (neurotools.stats.hmm.mvgupdate method)": [[191, "neurotools.stats.hmm.MVGUpdate.fwd"], [361, "neurotools.stats.hmm.MVGUpdate.fwd"]], "fwd() (neurotools.stats.hmm.ougaussian method)": [[191, "neurotools.stats.hmm.OUGaussian.fwd"], [361, "neurotools.stats.hmm.OUGaussian.fwd"]], "hasnan() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.hasNaN"], [361, "neurotools.stats.hmm.hasNaN"]], "jump() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.jump"], [361, "neurotools.stats.hmm.jump"]], "lgcp_observation_minimizer() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.lgcp_observation_minimizer"], [361, "neurotools.stats.hmm.lgcp_observation_minimizer"]], "log_likelihood() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.log_likelihood"], [361, "neurotools.stats.hmm.log_likelihood"]], "neurotools.stats.hmm": [[191, "module-neurotools.stats.hmm"], [361, "module-neurotools.stats.hmm"]], "poisson_baum_welch() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.poisson_baum_welch"], [361, "neurotools.stats.hmm.poisson_baum_welch"]], "poisson_parameter_guess() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.poisson_parameter_guess"], [361, "neurotools.stats.hmm.poisson_parameter_guess"]], "poisson_viterbi_state_infer() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.poisson_viterbi_state_infer"], [361, "neurotools.stats.hmm.poisson_viterbi_state_infer"]], "sample() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.sample"], [361, "neurotools.stats.hmm.sample"]], "viterbi() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.viterbi"], [361, "neurotools.stats.hmm.viterbi"]], "viterbi_log() (in module neurotools.stats.hmm)": [[191, "neurotools.stats.hmm.viterbi_log"], [361, "neurotools.stats.hmm.viterbi_log"]], "dkl_discrete() (in module neurotools.stats.information)": [[192, "neurotools.stats.information.DKL_discrete"], [362, "neurotools.stats.information.DKL_discrete"]], "discrete_entropy_distribution() (in module neurotools.stats.information)": [[192, "neurotools.stats.information.discrete_entropy_distribution"], [362, "neurotools.stats.information.discrete_entropy_distribution"]], "discrete_entropy_samples() (in module neurotools.stats.information)": [[192, "neurotools.stats.information.discrete_entropy_samples"], [362, "neurotools.stats.information.discrete_entropy_samples"]], "neurotools.stats.information": [[192, "module-neurotools.stats.information"], [362, "module-neurotools.stats.information"]], "poisson_entropy_nats() (in module neurotools.stats.information)": [[192, "neurotools.stats.information.poisson_entropy_nats"], [362, "neurotools.stats.information.poisson_entropy_nats"]], "regularized_discrete_entropy() (in module neurotools.stats.information)": [[192, "neurotools.stats.information.regularized_discrete_entropy"], [362, "neurotools.stats.information.regularized_discrete_entropy"]], "monte_carlo_expectation() (in module neurotools.stats.mcint)": [[196, "neurotools.stats.mcint.monte_carlo_expectation"], [363, "neurotools.stats.mcint.monte_carlo_expectation"]], "monte_carlo_moments() (in module neurotools.stats.mcint)": [[196, "neurotools.stats.mcint.monte_carlo_moments"], [363, "neurotools.stats.mcint.monte_carlo_moments"]], "neurotools.stats.mcint": [[196, "module-neurotools.stats.mcint"], [363, "module-neurotools.stats.mcint"]], "failureerror": [[197, "neurotools.stats.minimize.FailureError"], [261, "stats.minimize.FailureError"], [364, "neurotools.stats.minimize.FailureError"]], "minimize_retry() (in module neurotools.stats.minimize)": [[197, "neurotools.stats.minimize.minimize_retry"], [364, "neurotools.stats.minimize.minimize_retry"]], "neurotools.stats.minimize": [[197, "module-neurotools.stats.minimize"], [364, "module-neurotools.stats.minimize"]], "neurotools.stats.mixtures": [[198, "module-neurotools.stats.mixtures"], [365, "module-neurotools.stats.mixtures"]], "two_class_poisson_mixture_model() (in module neurotools.stats.mixtures)": [[198, "neurotools.stats.mixtures.two_class_poisson_mixture_model"], [365, "neurotools.stats.mixtures.two_class_poisson_mixture_model"]], "logmode() (in module neurotools.stats.modefind)": [[199, "neurotools.stats.modefind.logmode"], [366, "neurotools.stats.modefind.logmode"]], "logmodeplot() (in module neurotools.stats.modefind)": [[199, "neurotools.stats.modefind.logmodeplot"], [366, "neurotools.stats.modefind.logmodeplot"]], "modefind() (in module neurotools.stats.modefind)": [[199, "neurotools.stats.modefind.modefind"], [366, "neurotools.stats.modefind.modefind"]], "neurotools.stats.modefind": [[199, "module-neurotools.stats.modefind"], [366, "module-neurotools.stats.modefind"]], "peakfinder5() (in module neurotools.stats.modefind)": [[199, "neurotools.stats.modefind.peakfinder5"], [366, "neurotools.stats.modefind.peakfinder5"]], "benjamini_hochberg_positive_correlations() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.benjamini_hochberg_positive_correlations"], [367, "neurotools.stats.pvalues.benjamini_hochberg_positive_correlations"]], "bootstrap_compare_mean() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_compare_mean"], [367, "neurotools.stats.pvalues.bootstrap_compare_mean"]], "bootstrap_compare_median() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_compare_median"], [367, "neurotools.stats.pvalues.bootstrap_compare_median"]], "bootstrap_compare_statistic_two_sided() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_compare_statistic_two_sided"], [367, "neurotools.stats.pvalues.bootstrap_compare_statistic_two_sided"]], "bootstrap_compare_statistic_two_sided_parallel() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_compare_statistic_two_sided_parallel"], [367, "neurotools.stats.pvalues.bootstrap_compare_statistic_two_sided_parallel"]], "bootstrap_mean() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_mean"], [367, "neurotools.stats.pvalues.bootstrap_mean"]], "bootstrap_median() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_median"], [367, "neurotools.stats.pvalues.bootstrap_median"]], "bootstrap_statistic_two_sided() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.bootstrap_statistic_two_sided"], [367, "neurotools.stats.pvalues.bootstrap_statistic_two_sided"]], "correct_pvalues() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.correct_pvalues"], [367, "neurotools.stats.pvalues.correct_pvalues"]], "correct_pvalues_positive_dependent() (in module neurotools.stats.pvalues)": [[201, "neurotools.stats.pvalues.correct_pvalues_positive_dependent"], [367, "neurotools.stats.pvalues.correct_pvalues_positive_dependent"]], "neurotools.stats.pvalues": [[201, "module-neurotools.stats.pvalues"], [367, "module-neurotools.stats.pvalues"]], "damped_cosine() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.damped_cosine"], [368, "neurotools.stats.regressions.damped_cosine"]], "exponential_decay() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.exponential_decay"], [368, "neurotools.stats.regressions.exponential_decay"]], "gaussian_function() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.gaussian_function"], [368, "neurotools.stats.regressions.gaussian_function"]], "half_gaussian_function() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.half_gaussian_function"], [368, "neurotools.stats.regressions.half_gaussian_function"]], "neurotools.stats.regressions": [[202, "module-neurotools.stats.regressions"], [368, "module-neurotools.stats.regressions"]], "power_law() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.power_law"], [368, "neurotools.stats.regressions.power_law"]], "robust_line() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.robust_line"], [368, "neurotools.stats.regressions.robust_line"]], "weighted_least_squares() (in module neurotools.stats.regressions)": [[202, "neurotools.stats.regressions.weighted_least_squares"], [368, "neurotools.stats.regressions.weighted_least_squares"]], "neurotools.util": [[209, "module-neurotools.util"], [369, "module-neurotools.util"]], "dsigmoid() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.dsigmoid"], [371, "neurotools.util.functions.dsigmoid"]], "f() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.f"], [371, "neurotools.util.functions.f"]], "f1() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.f1"], [371, "neurotools.util.functions.f1"]], "f2() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.f2"], [371, "neurotools.util.functions.f2"]], "g() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.g"], [371, "neurotools.util.functions.g"]], "inversesigmoid() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.inversesigmoid"], [371, "neurotools.util.functions.inversesigmoid"]], "log_factorial() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.log_factorial"], [371, "neurotools.util.functions.log_factorial"]], "neurotools.util.functions": [[211, "module-neurotools.util.functions"], [371, "module-neurotools.util.functions"]], "npdf() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.npdf"], [371, "neurotools.util.functions.npdf"]], "sexp() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.sexp"], [371, "neurotools.util.functions.sexp"]], "sigmoid() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.sigmoid"], [371, "neurotools.util.functions.sigmoid"]], "slog() (in module neurotools.util.functions)": [[211, "neurotools.util.functions.slog"], [371, "neurotools.util.functions.slog"]], "ftwthr() (in module neurotools.util.getfftw)": [[212, "neurotools.util.getfftw.ftwthr"], [372, "neurotools.util.getfftw.ftwthr"]], "neurotools.util.getfftw": [[212, "module-neurotools.util.getfftw"], [372, "module-neurotools.util.getfftw"]], "gethdf() (in module neurotools.util.hdfmat)": [[213, "neurotools.util.hdfmat.getHDF"], [373, "neurotools.util.hdfmat.getHDF"]], "gethdfvalue() (in module neurotools.util.hdfmat)": [[213, "neurotools.util.hdfmat.getHDFvalue"], [373, "neurotools.util.hdfmat.getHDFvalue"]], "hdf2dict() (in module neurotools.util.hdfmat)": [[213, "neurotools.util.hdfmat.hdf2dict"], [373, "neurotools.util.hdfmat.hdf2dict"]], "neurotools.util.hdfmat": [[213, "module-neurotools.util.hdfmat"], [373, "module-neurotools.util.hdfmat"]], "printmathdf5() (in module neurotools.util.hdfmat)": [[213, "neurotools.util.hdfmat.printmatHDF5"], [373, "neurotools.util.hdfmat.printmatHDF5"]], "recursive_printmathdf5() (in module neurotools.util.hdfmat)": [[213, "neurotools.util.hdfmat.recursive_printmatHDF5"], [373, "neurotools.util.hdfmat.recursive_printmatHDF5"]], "eformat() (in module neurotools.util.string)": [[214, "neurotools.util.string.eformat"], [374, "neurotools.util.string.eformat"]], "hcat() (in module neurotools.util.string)": [[214, "neurotools.util.string.hcat"], [374, "neurotools.util.string.hcat"]], "incolumns() (in module neurotools.util.string)": [[214, "neurotools.util.string.incolumns"], [374, "neurotools.util.string.incolumns"]], "isint() (in module neurotools.util.string)": [[214, "neurotools.util.string.isInt"], [374, "neurotools.util.string.isInt"]], "neurotools.util.string": [[214, "module-neurotools.util.string"], [374, "module-neurotools.util.string"]], "nicetable() (in module neurotools.util.string)": [[214, "neurotools.util.string.nicetable"], [374, "neurotools.util.string.nicetable"]], "percent() (in module neurotools.util.string)": [[214, "neurotools.util.string.percent"], [374, "neurotools.util.string.percent"]], "shortscientific() (in module neurotools.util.string)": [[214, "neurotools.util.string.shortscientific"], [374, "neurotools.util.string.shortscientific"]], "v2str() (in module neurotools.util.string)": [[214, "neurotools.util.string.v2str"], [374, "neurotools.util.string.v2str"]], "v2str_long() (in module neurotools.util.string)": [[214, "neurotools.util.string.v2str_long"], [374, "neurotools.util.string.v2str_long"]], "wordwrap() (in module neurotools.util.string)": [[214, "neurotools.util.string.wordwrap"], [374, "neurotools.util.string.wordwrap"]], "execfile() (in module neurotools.util.system)": [[215, "neurotools.util.system.execfile"], [375, "neurotools.util.system.execfile"]], "neurotools.util.system": [[215, "module-neurotools.util.system"], [375, "module-neurotools.util.system"]], "query_yes_no() (in module neurotools.util.system)": [[215, "neurotools.util.system.query_yes_no"], [375, "neurotools.util.system.query_yes_no"]], "current_milli_time() (in module neurotools.util.time)": [[216, "neurotools.util.time.current_milli_time"], [376, "neurotools.util.time.current_milli_time"]], "neurotools.util.time": [[216, "module-neurotools.util.time"], [376, "module-neurotools.util.time"]], "now() (in module neurotools.util.time)": [[216, "neurotools.util.time.now"], [376, "neurotools.util.time.now"]], "tic() (in module neurotools.util.time)": [[216, "neurotools.util.time.tic"], [376, "neurotools.util.time.tic"]], "toc() (in module neurotools.util.time)": [[216, "neurotools.util.time.toc"], [376, "neurotools.util.time.toc"]], "today() (in module neurotools.util.time)": [[216, "neurotools.util.time.today"], [376, "neurotools.util.time.today"]], "waitfor() (in module neurotools.util.time)": [[216, "neurotools.util.time.waitfor"], [376, "neurotools.util.time.waitfor"]], "aap() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.aap"], [377, "neurotools.util.tools.aap"]], "add() (neurotools.util.tools.stuff method)": [[217, "neurotools.util.tools.stuff.add"], [377, "neurotools.util.tools.stuff.add"]], "amap() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.amap"], [377, "neurotools.util.tools.amap"]], "arraymap() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.arraymap"], [377, "neurotools.util.tools.arraymap"]], "asiterable() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.asiterable"], [377, "neurotools.util.tools.asiterable"]], "c2p() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.c2p"], [377, "neurotools.util.tools.c2p"]], "camel2underscore() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.camel2underscore"], [377, "neurotools.util.tools.camel2underscore"]], "clear() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.clear"], [377, "neurotools.util.tools.clear"]], "debug() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.debug"], [377, "neurotools.util.tools.debug"]], "dowarn() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.dowarn"], [377, "neurotools.util.tools.dowarn"]], "emitter (class in neurotools.util.tools)": [[217, "neurotools.util.tools.emitter"], [377, "neurotools.util.tools.emitter"]], "ensure_dir() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.ensure_dir"], [377, "neurotools.util.tools.ensure_dir"]], "exists() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.exists"], [377, "neurotools.util.tools.exists"]], "ezip() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.ezip"], [377, "neurotools.util.tools.ezip"]], "find() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.find"], [377, "neurotools.util.tools.find"]], "find_all_extension() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.find_all_extension"], [377, "neurotools.util.tools.find_all_extension"]], "getvariable() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.getVariable"], [377, "neurotools.util.tools.getVariable"]], "getdict() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.getdict"], [377, "neurotools.util.tools.getdict"]], "getsize() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.getsize"], [377, "neurotools.util.tools.getsize"]], "globalize() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.globalize"], [377, "neurotools.util.tools.globalize"]], "history() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.history"], [377, "neurotools.util.tools.history"]], "invert_permutation() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.invert_permutation"], [377, "neurotools.util.tools.invert_permutation"]], "lap() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.lap"], [377, "neurotools.util.tools.lap"]], "lmap() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.lmap"], [377, "neurotools.util.tools.lmap"]], "mapdict() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.mapdict"], [377, "neurotools.util.tools.mapdict"]], "matlab() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.matlab"], [377, "neurotools.util.tools.matlab"]], "metaloadmat() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.metaloadmat"], [377, "neurotools.util.tools.metaloadmat"]], "neurotools.util.tools": [[217, "module-neurotools.util.tools"], [377, "module-neurotools.util.tools"]], "nowarn() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.nowarn"], [377, "neurotools.util.tools.nowarn"]], "okwarn() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.okwarn"], [377, "neurotools.util.tools.okwarn"]], "oneslike() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.oneslike"], [377, "neurotools.util.tools.oneslike"]], "p2c() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.p2c"], [377, "neurotools.util.tools.p2c"]], "piper (class in neurotools.util.tools)": [[217, "neurotools.util.tools.piper"], [377, "neurotools.util.tools.piper"]], "restorecontext() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.restoreContext"], [377, "neurotools.util.tools.restoreContext"]], "savecontext() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.saveContext"], [377, "neurotools.util.tools.saveContext"]], "setinrange() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.setinrange"], [377, "neurotools.util.tools.setinrange"]], "slist() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.slist"], [377, "neurotools.util.tools.slist"]], "sls() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.sls"], [377, "neurotools.util.tools.sls"]], "stuff (class in neurotools.util.tools)": [[217, "neurotools.util.tools.stuff"], [377, "neurotools.util.tools.stuff"]], "underscore2camel() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.underscore2camel"], [377, "neurotools.util.tools.underscore2camel"]], "varexists() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.varexists"], [377, "neurotools.util.tools.varexists"]], "wait() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.wait"], [377, "neurotools.util.tools.wait"]], "warn() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.warn"], [377, "neurotools.util.tools.warn"]], "zeroslike() (in module neurotools.util.tools)": [[217, "neurotools.util.tools.zeroslike"], [377, "neurotools.util.tools.zeroslike"]], "beta() (in module nlab)": [[218, "nlab.beta"]], "binomial() (in module nlab)": [[218, "nlab.binomial"]], "chisquare() (in module nlab)": [[218, "nlab.chisquare"]], "choice() (in module nlab)": [[218, "nlab.choice"]], "dirichlet() (in module nlab)": [[218, "nlab.dirichlet"]], "exponential() (in module nlab)": [[218, "nlab.exponential"]], "f() (in module nlab)": [[218, "nlab.f"]], "gamma() (in module nlab)": [[218, "nlab.gamma"]], "geometric() (in module nlab)": [[218, "nlab.geometric"]], "get_state() (in module nlab)": [[218, "nlab.get_state"]], "gumbel() (in module nlab)": [[218, "nlab.gumbel"]], "hypergeometric() (in module nlab)": [[218, "nlab.hypergeometric"]], "laplace() (in module nlab)": [[218, "nlab.laplace"]], "logistic() (in module nlab)": [[218, "nlab.logistic"]], "lognormal() (in module nlab)": [[218, "nlab.lognormal"]], "logseries() (in module nlab)": [[218, "nlab.logseries"]], "multinomial() (in module nlab)": [[218, "nlab.multinomial"]], "multivariate_normal() (in module nlab)": [[218, "nlab.multivariate_normal"]], "negative_binomial() (in module nlab)": [[218, "nlab.negative_binomial"]], "nlab": [[218, "module-nlab"]], "noncentral_chisquare() (in module nlab)": [[218, "nlab.noncentral_chisquare"]], "noncentral_f() (in module nlab)": [[218, "nlab.noncentral_f"]], "normal() (in module nlab)": [[218, "nlab.normal"]], "pareto() (in module nlab)": [[218, "nlab.pareto"]], "permutation() (in module nlab)": [[218, "nlab.permutation"]], "poisson() (in module nlab)": [[218, "nlab.poisson"]], "power() (in module nlab)": [[218, "nlab.power"]], "rand() (in module nlab)": [[218, "nlab.rand"]], "randint() (in module nlab)": [[218, "nlab.randint"]], "randn() (in module nlab)": [[218, "nlab.randn"]], "random() (in module nlab)": [[218, "nlab.random"]], "random_integers() (in module nlab)": [[218, "nlab.random_integers"]], "random_sample() (in module nlab)": [[218, "nlab.random_sample"]], "rayleigh() (in module nlab)": [[218, "nlab.rayleigh"]], "seed() (in module nlab)": [[218, "nlab.seed"]], "set_state() (in module nlab)": [[218, "nlab.set_state"]], "shuffle() (in module nlab)": [[218, "nlab.shuffle"]], "standard_cauchy() (in module nlab)": [[218, "nlab.standard_cauchy"]], "standard_exponential() (in module nlab)": [[218, "nlab.standard_exponential"]], "standard_gamma() (in module nlab)": [[218, "nlab.standard_gamma"]], "standard_normal() (in module nlab)": [[218, "nlab.standard_normal"]], "standard_t() (in module nlab)": [[218, "nlab.standard_t"]], "triangular() (in module nlab)": [[218, "nlab.triangular"]], "uniform() (in module nlab)": [[218, "nlab.uniform"]], "vonmises() (in module nlab)": [[218, "nlab.vonmises"]], "wald() (in module nlab)": [[218, "nlab.wald"]], "weibull() (in module nlab)": [[218, "nlab.weibull"]], "zipf() (in module nlab)": [[218, "nlab.zipf"]], "handlers (class in signal)": [[220, "signal.Handlers"]], "itimererror (in module signal)": [[220, "signal.ItimerError"]], "sigabrt (signal.signals attribute)": [[220, "signal.Signals.SIGABRT"]], "sigalrm (signal.signals attribute)": [[220, "signal.Signals.SIGALRM"]], "sigbus (signal.signals attribute)": [[220, "signal.Signals.SIGBUS"]], "sigchld (signal.signals attribute)": [[220, "signal.Signals.SIGCHLD"]], "sigcld (signal.signals attribute)": [[220, "signal.Signals.SIGCLD"]], "sigcont (signal.signals attribute)": [[220, "signal.Signals.SIGCONT"]], "sigfpe (signal.signals attribute)": [[220, "signal.Signals.SIGFPE"]], "sighup (signal.signals attribute)": [[220, "signal.Signals.SIGHUP"]], "sigill (signal.signals attribute)": [[220, "signal.Signals.SIGILL"]], "sigint (signal.signals attribute)": [[220, "signal.Signals.SIGINT"]], "sigio (signal.signals attribute)": [[220, "signal.Signals.SIGIO"]], "sigiot (signal.signals attribute)": [[220, "signal.Signals.SIGIOT"]], "sigkill (signal.signals attribute)": [[220, "signal.Signals.SIGKILL"]], "sigpipe (signal.signals attribute)": [[220, "signal.Signals.SIGPIPE"]], "sigpoll (signal.signals attribute)": [[220, "signal.Signals.SIGPOLL"]], "sigprof (signal.signals attribute)": [[220, "signal.Signals.SIGPROF"]], "sigpwr (signal.signals attribute)": [[220, "signal.Signals.SIGPWR"]], "sigquit (signal.signals attribute)": [[220, "signal.Signals.SIGQUIT"]], "sigrtmax (signal.signals attribute)": [[220, "signal.Signals.SIGRTMAX"]], "sigrtmin (signal.signals attribute)": [[220, "signal.Signals.SIGRTMIN"]], "sigsegv (signal.signals attribute)": [[220, "signal.Signals.SIGSEGV"]], "sigstop (signal.signals attribute)": [[220, "signal.Signals.SIGSTOP"]], "sigsys (signal.signals attribute)": [[220, "signal.Signals.SIGSYS"]], "sigterm (signal.signals attribute)": [[220, "signal.Signals.SIGTERM"]], "sigtrap (signal.signals attribute)": [[220, "signal.Signals.SIGTRAP"]], "sigtstp (signal.signals attribute)": [[220, "signal.Signals.SIGTSTP"]], "sigttin (signal.signals attribute)": [[220, "signal.Signals.SIGTTIN"]], "sigttou (signal.signals attribute)": [[220, "signal.Signals.SIGTTOU"]], "sigurg (signal.signals attribute)": [[220, "signal.Signals.SIGURG"]], "sigusr1 (signal.signals attribute)": [[220, "signal.Signals.SIGUSR1"]], "sigusr2 (signal.signals attribute)": [[220, "signal.Signals.SIGUSR2"]], "sigvtalrm (signal.signals attribute)": [[220, "signal.Signals.SIGVTALRM"]], "sigwinch (signal.signals attribute)": [[220, "signal.Signals.SIGWINCH"]], "sigxcpu (signal.signals attribute)": [[220, "signal.Signals.SIGXCPU"]], "sigxfsz (signal.signals attribute)": [[220, "signal.Signals.SIGXFSZ"]], "sig_block (signal.sigmasks attribute)": [[220, "signal.Sigmasks.SIG_BLOCK"]], "sig_dfl (signal.handlers attribute)": [[220, "signal.Handlers.SIG_DFL"]], "sig_ign (signal.handlers attribute)": [[220, "signal.Handlers.SIG_IGN"]], "sig_setmask (signal.sigmasks attribute)": [[220, "signal.Sigmasks.SIG_SETMASK"]], "sig_unblock (signal.sigmasks attribute)": [[220, "signal.Sigmasks.SIG_UNBLOCK"]], "sigmasks (class in signal)": [[220, "signal.Sigmasks"]], "signals (class in signal)": [[220, "signal.Signals"]], "getsignal() (in module signal)": [[220, "signal.getsignal"]], "n_fields (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.n_fields"]], "n_sequence_fields (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.n_sequence_fields"]], "n_unnamed_fields (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.n_unnamed_fields"]], "pthread_sigmask() (in module signal)": [[220, "signal.pthread_sigmask"]], "si_band (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_band"]], "si_code (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_code"]], "si_errno (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_errno"]], "si_pid (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_pid"]], "si_signo (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_signo"]], "si_status (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_status"]], "si_uid (signal.struct_siginfo attribute)": [[220, "signal.struct_siginfo.si_uid"]], "signal": [[220, "module-signal"]], "signal() (in module signal)": [[220, "signal.signal"]], "sigpending() (in module signal)": [[220, "signal.sigpending"]], "sigwait() (in module signal)": [[220, "signal.sigwait"]], "struct_siginfo (class in signal)": [[220, "signal.struct_siginfo"]], "valid_signals() (in module signal)": [[220, "signal.valid_signals"]], "signal.signal": [[230, "module-signal.signal"]], "brute_force_local_2d_maxima() (in module spatial)": [[231, "spatial.brute_force_local_2d_maxima"]], "spatial": [[231, "module-spatial"]], "array_average_amplitude() (in module spatial.array)": [[232, "spatial.array.array_average_amplitude"]], "array_count_centers() (in module spatial.array)": [[232, "spatial.array.array_count_centers"]], "array_count_critical() (in module spatial.array)": [[232, "spatial.array.array_count_critical"]], "array_kuramoto() (in module spatial.array)": [[232, "spatial.array.array_kuramoto"]], "array_kuramoto_pgd() (in module spatial.array)": [[232, "spatial.array.array_kuramoto_pgd"]], "array_kuramoto_pgd_standard_deviation() (in module spatial.array)": [[232, "spatial.array.array_kuramoto_pgd_standard_deviation"]], "array_kuramoto_standard_deviation() (in module spatial.array)": [[232, "spatial.array.array_kuramoto_standard_deviation"]], "array_phase_gradient() (in module spatial.array)": [[232, "spatial.array.array_phase_gradient"]], "array_phasegradient_local() (in module spatial.array)": [[232, "spatial.array.array_phasegradient_local"]], "array_phasegradient_magnitude_cv() (in module spatial.array)": [[232, "spatial.array.array_phasegradient_magnitude_cv"]], "array_phasegradient_magnitude_sigma() (in module spatial.array)": [[232, "spatial.array.array_phasegradient_magnitude_sigma"]], "array_phasegradient_pgd_threshold() (in module spatial.array)": [[232, "spatial.array.array_phasegradient_pgd_threshold"]], "array_phasegradient_planar() (in module spatial.array)": [[232, "spatial.array.array_phasegradient_planar"]], "array_speed_local() (in module spatial.array)": [[232, "spatial.array.array_speed_local"]], "array_speed_pgd_threshold() (in module spatial.array)": [[232, "spatial.array.array_speed_pgd_threshold"]], "array_synchrony() (in module spatial.array)": [[232, "spatial.array.array_synchrony"]], "array_synchrony_pgd() (in module spatial.array)": [[232, "spatial.array.array_synchrony_pgd"]], "array_synchrony_pgd_standard_deviation() (in module spatial.array)": [[232, "spatial.array.array_synchrony_pgd_standard_deviation"]], "array_synchrony_standard_deviation() (in module spatial.array)": [[232, "spatial.array.array_synchrony_standard_deviation"]], "array_wavelength_local() (in module spatial.array)": [[232, "spatial.array.array_wavelength_local"]], "array_wavelength_local_pgd_threshold() (in module spatial.array)": [[232, "spatial.array.array_wavelength_local_pgd_threshold"]], "array_wavelength_pgd_threshold() (in module spatial.array)": [[232, "spatial.array.array_wavelength_pgd_threshold"]], "array_wavelength_planar() (in module spatial.array)": [[232, "spatial.array.array_wavelength_planar"]], "pack_array_data() (in module spatial.array)": [[232, "spatial.array.pack_array_data"]], "spatial.array": [[232, "module-spatial.array"]], "trim_array() (in module spatial.array)": [[232, "spatial.array.trim_array"]], "trim_array_as_if() (in module spatial.array)": [[232, "spatial.array.trim_array_as_if"]], "dct_cut() (in module spatial.dct)": [[233, "spatial.dct.dct_cut"]], "dct_cut_antialias() (in module spatial.dct)": [[233, "spatial.dct.dct_cut_antialias"]], "dct_cut_downsampled() (in module spatial.dct)": [[233, "spatial.dct.dct_cut_downsampled"]], "dct_upsample() (in module spatial.dct)": [[233, "spatial.dct.dct_upsample"]], "dct_upsample_notrim() (in module spatial.dct)": [[233, "spatial.dct.dct_upsample_notrim"]], "get_mask() (in module spatial.dct)": [[233, "spatial.dct.get_mask"]], "get_mask_antialiased() (in module spatial.dct)": [[233, "spatial.dct.get_mask_antialiased"]], "iterated_upsample() (in module spatial.dct)": [[233, "spatial.dct.iterated_upsample"]], "outer_complex() (in module spatial.dct)": [[233, "spatial.dct.outer_complex"]], "spatial.dct": [[233, "module-spatial.dct"]], "distance_angular_deviation() (in module spatial.distance)": [[234, "spatial.distance.distance_angular_deviation"]], "get_average_synchrony_length_constant_parallel() (in module spatial.distance)": [[234, "spatial.distance.get_average_synchrony_length_constant_parallel"]], "get_averaged_angular_distance() (in module spatial.distance)": [[234, "spatial.distance.get_averaged_angular_distance"]], "get_length_constant_trial() (in module spatial.distance)": [[234, "spatial.distance.get_length_constant_trial"]], "get_pair_distance() (in module spatial.distance)": [[234, "spatial.distance.get_pair_distance"]], "spatial.distance": [[234, "module-spatial.distance"]], "synchrony_length_constant_areas_summary() (in module spatial.distance)": [[234, "spatial.distance.synchrony_length_constant_areas_summary"]], "coalesce() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.coalesce"]], "coalesce_points() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.coalesce_points"]], "cut_array_data() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.cut_array_data"]], "dphidx() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.dPhidx"]], "dphidy() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.dPhidy"]], "find_critical_points() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.find_critical_points"]], "find_critical_potential_points() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.find_critical_potential_points"]], "get_critical_spectra() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.get_critical_spectra"]], "get_phase_gradient_as_complex() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.get_phase_gradient_as_complex"]], "getp() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.getp"]], "getpeaks2d() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.getpeaks2d"]], "grad() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.grad"]], "mirror2d() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.mirror2D"]], "plot_critical_points() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.plot_critical_points"]], "plot_critical_spectra() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.plot_critical_spectra"]], "plot_phase_direction() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.plot_phase_direction"]], "plot_phase_gradient() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.plot_phase_gradient"]], "quickgrad() (in module spatial.fftzeros)": [[235, "spatial.fftzeros.quickgrad"]], "spatial.fftzeros": [[235, "module-spatial.fftzeros"]], "absorbing_gaussian() (in module spatial.kernels)": [[236, "spatial.kernels.absorbing_gaussian"]], "absorbing_laplacian() (in module spatial.kernels)": [[236, "spatial.kernels.absorbing_laplacian"]], "continuum_kernel() (in module spatial.kernels)": [[236, "spatial.kernels.continuum_kernel"]], "cosine_kernel() (in module spatial.kernels)": [[236, "spatial.kernels.cosine_kernel"]], "diffusion_basis() (in module spatial.kernels)": [[236, "spatial.kernels.diffusion_basis"]], "exponential_basis() (in module spatial.kernels)": [[236, "spatial.kernels.exponential_basis"]], "gaussian_2d_kernel() (in module spatial.kernels)": [[236, "spatial.kernels.gaussian_2D_kernel"]], "iterative_orthogonalize_basis() (in module spatial.kernels)": [[236, "spatial.kernels.iterative_orthogonalize_basis"]], "laplace_kernel() (in module spatial.kernels)": [[236, "spatial.kernels.laplace_kernel"]], "laplacian() (in module spatial.kernels)": [[236, "spatial.kernels.laplacian"]], "log_cosine_basis() (in module spatial.kernels)": [[236, "spatial.kernels.log_cosine_basis"]], "log_spline_basis() (in module spatial.kernels)": [[236, "spatial.kernels.log_spline_basis"]], "magickernel() (in module spatial.kernels)": [[236, "spatial.kernels.magickernel"]], "magicsharp() (in module spatial.kernels)": [[236, "spatial.kernels.magicsharp"]], "make_cosine_basis() (in module spatial.kernels)": [[236, "spatial.kernels.make_cosine_basis"]], "spatial.kernels": [[236, "module-spatial.kernels"]], "analytic_signal_coherence() (in module spatial.phase)": [[237, "spatial.phase.analytic_signal_coherence"]], "population_average_amplitude() (in module spatial.phase)": [[237, "spatial.phase.population_average_amplitude"]], "population_kuramoto() (in module spatial.phase)": [[237, "spatial.phase.population_kuramoto"]], "population_median_frequency() (in module spatial.phase)": [[237, "spatial.phase.population_median_frequency"]], "population_median_phase_velocity() (in module spatial.phase)": [[237, "spatial.phase.population_median_phase_velocity"]], "population_normalized_sliding_signal_coherence() (in module spatial.phase)": [[237, "spatial.phase.population_normalized_sliding_signal_coherence"]], "population_phase_coherence() (in module spatial.phase)": [[237, "spatial.phase.population_phase_coherence"]], "population_phase_relative_sliding_kuramoto() (in module spatial.phase)": [[237, "spatial.phase.population_phase_relative_sliding_kuramoto"]], "population_polar_std() (in module spatial.phase)": [[237, "spatial.phase.population_polar_std"]], "population_signal_amplitude_dispersion() (in module spatial.phase)": [[237, "spatial.phase.population_signal_amplitude_dispersion"]], "population_signal_amplitude_precision() (in module spatial.phase)": [[237, "spatial.phase.population_signal_amplitude_precision"]], "population_signal_amplitude_std() (in module spatial.phase)": [[237, "spatial.phase.population_signal_amplitude_std"]], "population_signal_concentration() (in module spatial.phase)": [[237, "spatial.phase.population_signal_concentration"]], "population_signal_description() (in module spatial.phase)": [[237, "spatial.phase.population_signal_description"]], "population_signal_dispersion() (in module spatial.phase)": [[237, "spatial.phase.population_signal_dispersion"]], "population_signal_phase_dispersion() (in module spatial.phase)": [[237, "spatial.phase.population_signal_phase_dispersion"]], "population_signal_phase_precision() (in module spatial.phase)": [[237, "spatial.phase.population_signal_phase_precision"]], "population_signal_phase_std() (in module spatial.phase)": [[237, "spatial.phase.population_signal_phase_std"]], "population_signal_precision() (in module spatial.phase)": [[237, "spatial.phase.population_signal_precision"]], "population_sliding_signal_coherence() (in module spatial.phase)": [[237, "spatial.phase.population_sliding_signal_coherence"]], "population_synchrony() (in module spatial.phase)": [[237, "spatial.phase.population_synchrony"]], "population_synchrony_linear() (in module spatial.phase)": [[237, "spatial.phase.population_synchrony_linear"]], "sliding_population_signal_coherence() (in module spatial.phase)": [[237, "spatial.phase.sliding_population_signal_coherence"]], "spatial.phase": [[237, "module-spatial.phase"]], "interp_bin() (in module spatial.spiking)": [[239, "spatial.spiking.interp_bin"]], "spatial.spiking": [[239, "module-spatial.spiking"]], "coalesce() (in module spatial.triangulation)": [[240, "spatial.triangulation.coalesce"]], "edgesnearby() (in module spatial.triangulation)": [[240, "spatial.triangulation.edgesNearby"]], "mergenearby() (in module spatial.triangulation)": [[240, "spatial.triangulation.mergeNearby"]], "plot_edges() (in module spatial.triangulation)": [[240, "spatial.triangulation.plot_edges"]], "plot_triangles() (in module spatial.triangulation)": [[240, "spatial.triangulation.plot_triangles"]], "spatial.triangulation": [[240, "module-spatial.triangulation"]], "trianglestoedges() (in module spatial.triangulation)": [[240, "spatial.triangulation.trianglesToEdges"]], "uniquerow() (in module spatial.triangulation)": [[240, "spatial.triangulation.uniquerow"]], "z2xy() (in module spatial.triangulation)": [[240, "spatial.triangulation.z2xy"]], "bin_spike_times() (in module spikes.spikes)": [[242, "spikes.spikes.bin_spike_times"]], "bin_spikes_raster() (in module spikes.spikes)": [[242, "spikes.spikes.bin_spikes_raster"]], "cut_spikes() (in module spikes.spikes)": [[242, "spikes.spikes.cut_spikes"]], "pack_cross_correlation_matrix() (in module spikes.spikes)": [[242, "spikes.spikes.pack_cross_correlation_matrix"]], "pp_xcorr() (in module spikes.spikes)": [[242, "spikes.spikes.pp_xcorr"]], "spikes.spikes": [[242, "module-spikes.spikes"]], "times_to_raster() (in module spikes.spikes)": [[242, "spikes.spikes.times_to_raster"]], "txcorr() (in module spikes.spikes)": [[242, "spikes.spikes.txcorr"]], "getfwhm() (in module spikes.waveform)": [[243, "spikes.waveform.getFWHM"]], "getphp() (in module spikes.waveform)": [[243, "spikes.waveform.getPHP"]], "getpt() (in module spikes.waveform)": [[243, "spikes.waveform.getPT"]], "getpthw() (in module spikes.waveform)": [[243, "spikes.waveform.getPTHW"]], "getpvt() (in module spikes.waveform)": [[243, "spikes.waveform.getPVT"]], "getwahp() (in module spikes.waveform)": [[243, "spikes.waveform.getWAHP"]], "is_thin() (in module spikes.waveform)": [[243, "spikes.waveform.is_thin"]], "is_thin_pvt() (in module spikes.waveform)": [[243, "spikes.waveform.is_thin_pvt"]], "minmax() (in module spikes.waveform)": [[243, "spikes.waveform.minmax"]], "normalized_waveform() (in module spikes.waveform)": [[243, "spikes.waveform.normalized_waveform"]], "process() (in module spikes.waveform)": [[243, "spikes.waveform.process"]], "realign() (in module spikes.waveform)": [[243, "spikes.waveform.realign"]], "spikes.waveform": [[243, "module-spikes.waveform"]], "abspolar_stats() (in module stats.circular)": [[246, "stats.circular.abspolar_stats"]], "complex_gaussian() (in module stats.circular)": [[246, "stats.circular.complex_gaussian"]], "fit_vonmises() (in module stats.circular)": [[246, "stats.circular.fit_vonmises"]], "logpolar_gaussian() (in module stats.circular)": [[246, "stats.circular.logpolar_gaussian"]], "logpolar_stats() (in module stats.circular)": [[246, "stats.circular.logpolar_stats"]], "squared_first_circular_moment() (in module stats.circular)": [[246, "stats.circular.squared_first_circular_moment"]], "stats.circular": [[246, "module-stats.circular"]], "autocorrelation_bayes() (in module stats.convolutional)": [[247, "stats.convolutional.autocorrelation_bayes"]], "blockccm() (in module stats.convolutional)": [[247, "stats.convolutional.blockccm"]], "blocksta() (in module stats.convolutional)": [[247, "stats.convolutional.blocksta"]], "ccm() (in module stats.convolutional)": [[247, "stats.convolutional.ccm"]], "ccor() (in module stats.convolutional)": [[247, "stats.convolutional.ccor"]], "construct_lowpass_operator() (in module stats.convolutional)": [[247, "stats.convolutional.construct_lowpass_operator"]], "create_spectral_model() (in module stats.convolutional)": [[247, "stats.convolutional.create_spectral_model"]], "cspect() (in module stats.convolutional)": [[247, "stats.convolutional.cspect"]], "cspectm() (in module stats.convolutional)": [[247, "stats.convolutional.cspectm"]], "reconstruct() (in module stats.convolutional)": [[247, "stats.convolutional.reconstruct"]], "spectreconstruct() (in module stats.convolutional)": [[247, "stats.convolutional.spectreconstruct"]], "spike_lfp_filters() (in module stats.convolutional)": [[247, "stats.convolutional.spike_lfp_filters"]], "sta() (in module stats.convolutional)": [[247, "stats.convolutional.sta"]], "stats.convolutional": [[247, "module-stats.convolutional"]], "adaptive_density_grid() (in module stats.density)": [[248, "stats.density.adaptive_density_grid"]], "gridhist() (in module stats.density)": [[248, "stats.density.gridhist"]], "kdepeak() (in module stats.density)": [[248, "stats.density.kdepeak"]], "knn_1d_density() (in module stats.density)": [[248, "stats.density.knn_1d_density"]], "stats.density": [[248, "module-stats.density"]], "explogpdf() (in module stats.distributions)": [[249, "stats.distributions.explogpdf"]], "gaussian_logpdf() (in module stats.distributions)": [[249, "stats.distributions.gaussian_logpdf"]], "gaussian_pdf() (in module stats.distributions)": [[249, "stats.distributions.gaussian_pdf"]], "poisson_logpdf() (in module stats.distributions)": [[249, "stats.distributions.poisson_logpdf"]], "poisson_pdf() (in module stats.distributions)": [[249, "stats.distributions.poisson_pdf"]], "sample_categorical() (in module stats.distributions)": [[249, "stats.distributions.sample_categorical"]], "stats.distributions": [[249, "module-stats.distributions"]], "fast_kde() (in module stats.fast_kde)": [[251, "stats.fast_kde.fast_kde"]], "image_cov() (in module stats.fast_kde)": [[251, "stats.fast_kde.image_cov"]], "stats.fast_kde": [[251, "module-stats.fast_kde"]], "glmpenaltybernoulli() (in module stats.glm)": [[252, "stats.glm.GLMPenaltyBernoulli"]], "glmpenaltyl2() (in module stats.glm)": [[252, "stats.glm.GLMPenaltyL2"]], "glmpenaltypoisson() (in module stats.glm)": [[252, "stats.glm.GLMPenaltyPoisson"]], "cosine_kernel() (in module stats.glm)": [[252, "stats.glm.cosine_kernel"]], "crossvalidatedauc() (in module stats.glm)": [[252, "stats.glm.crossvalidatedAUC"]], "fitglm() (in module stats.glm)": [[252, "stats.glm.fitGLM"]], "gradientglmfit() (in module stats.glm)": [[252, "stats.glm.gradientglmfit"]], "log_cosine_basis() (in module stats.glm)": [[252, "stats.glm.log_cosine_basis"]], "make_cosine_basis() (in module stats.glm)": [[252, "stats.glm.make_cosine_basis"]], "numeric_grad() (in module stats.glm)": [[252, "stats.glm.numeric_grad"]], "numeric_hess() (in module stats.glm)": [[252, "stats.glm.numeric_hess"]], "ppglmfit() (in module stats.glm)": [[252, "stats.glm.ppglmfit"]], "sexp() (in module stats.glm)": [[252, "stats.glm.sexp"]], "sigmoid() (in module stats.glm)": [[252, "stats.glm.sigmoid"]], "stats.glm": [[252, "module-stats.glm"]], "bernoulliobservationapproximator (class in stats.hmm)": [[255, "stats.hmm.BernoulliObservationApproximator"]], "bernoulliobservationmodel (class in stats.hmm)": [[255, "stats.hmm.BernoulliObservationModel"]], "chisquarecoxapproximator (class in stats.hmm)": [[255, "stats.hmm.ChisquareCoxApproximator"]], "chisquarecoxmodel (class in stats.hmm)": [[255, "stats.hmm.ChisquareCoxModel"]], "diffusiongaussian (class in stats.hmm)": [[255, "stats.hmm.DiffusionGaussian"]], "gaussiancoxapproximator (class in stats.hmm)": [[255, "stats.hmm.GaussianCoxApproximator"]], "gaussiancoxmodel (class in stats.hmm)": [[255, "stats.hmm.GaussianCoxModel"]], "loggaussiancoxapproximator (class in stats.hmm)": [[255, "stats.hmm.LogGaussianCoxApproximator"]], "loggaussiancoxmodel (class in stats.hmm)": [[255, "stats.hmm.LogGaussianCoxModel"]], "mvgouupdate (class in stats.hmm)": [[255, "stats.hmm.MVGOUUpdate"]], "mvgupdate (class in stats.hmm)": [[255, "stats.hmm.MVGUpdate"]], "mvgaussian (class in stats.hmm)": [[255, "stats.hmm.MVGaussian"]], "mvloggaussiancox (class in stats.hmm)": [[255, "stats.hmm.MVLogGaussianCox"]], "mvloggaussiancox.mvpoissonapproximator (class in stats.hmm)": [[255, "stats.hmm.MVLogGaussianCox.MVPoissonApproximator"]], "ougaussian (class in stats.hmm)": [[255, "stats.hmm.OUGaussian"]], "poissonobservationapproximator (class in stats.hmm)": [[255, "stats.hmm.PoissonObservationApproximator"]], "poissonobservationmodel (class in stats.hmm)": [[255, "stats.hmm.PoissonObservationModel"]], "truncatedloggaussiancoxapproximator (class in stats.hmm)": [[255, "stats.hmm.TruncatedLogGaussianCoxApproximator"]], "truncatedloggaussiancoxmodel (class in stats.hmm)": [[255, "stats.hmm.TruncatedLogGaussianCoxModel"]], "truncatedpoissonobservationapproximator (class in stats.hmm)": [[255, "stats.hmm.TruncatedPoissonObservationApproximator"]], "truncatedpoissonobservationmodel (class in stats.hmm)": [[255, "stats.hmm.TruncatedPoissonObservationModel"]], "backward_abstract() (in module stats.hmm)": [[255, "stats.hmm.backward_abstract"]], "baum_welch() (in module stats.hmm)": [[255, "stats.hmm.baum_welch"]], "bwd() (stats.hmm.diffusiongaussian method)": [[255, "stats.hmm.DiffusionGaussian.bwd"]], "bwd() (stats.hmm.mvgouupdate method)": [[255, "stats.hmm.MVGOUUpdate.bwd"]], "bwd() (stats.hmm.mvgupdate method)": [[255, "stats.hmm.MVGUpdate.bwd"]], "bwd() (stats.hmm.ougaussian method)": [[255, "stats.hmm.OUGaussian.bwd"]], "forward_abstract() (in module stats.hmm)": [[255, "stats.hmm.forward_abstract"]], "forward_backward() (in module stats.hmm)": [[255, "stats.hmm.forward_backward"]], "forward_backward_abstract() (in module stats.hmm)": [[255, "stats.hmm.forward_backward_abstract"]], "fwd() (stats.hmm.diffusiongaussian method)": [[255, "stats.hmm.DiffusionGaussian.fwd"]], "fwd() (stats.hmm.mvgouupdate method)": [[255, "stats.hmm.MVGOUUpdate.fwd"]], "fwd() (stats.hmm.mvgupdate method)": [[255, "stats.hmm.MVGUpdate.fwd"]], "fwd() (stats.hmm.ougaussian method)": [[255, "stats.hmm.OUGaussian.fwd"]], "hasnan() (in module stats.hmm)": [[255, "stats.hmm.hasNaN"]], "jump() (in module stats.hmm)": [[255, "stats.hmm.jump"]], "lgcp_observation_minimizer() (in module stats.hmm)": [[255, "stats.hmm.lgcp_observation_minimizer"]], "log_likelihood() (in module stats.hmm)": [[255, "stats.hmm.log_likelihood"]], "poisson_baum_welch() (in module stats.hmm)": [[255, "stats.hmm.poisson_baum_welch"]], "poisson_parameter_guess() (in module stats.hmm)": [[255, "stats.hmm.poisson_parameter_guess"]], "poisson_viterbi_state_infer() (in module stats.hmm)": [[255, "stats.hmm.poisson_viterbi_state_infer"]], "sample() (in module stats.hmm)": [[255, "stats.hmm.sample"]], "stats.hmm": [[255, "module-stats.hmm"]], "viterbi() (in module stats.hmm)": [[255, "stats.hmm.viterbi"]], "viterbi_log() (in module stats.hmm)": [[255, "stats.hmm.viterbi_log"]], "dkl_discrete() (in module stats.information)": [[256, "stats.information.DKL_discrete"]], "discrete_entropy_distribution() (in module stats.information)": [[256, "stats.information.discrete_entropy_distribution"]], "discrete_entropy_samples() (in module stats.information)": [[256, "stats.information.discrete_entropy_samples"]], "poisson_entropy_nats() (in module stats.information)": [[256, "stats.information.poisson_entropy_nats"]], "regularized_discrete_entropy() (in module stats.information)": [[256, "stats.information.regularized_discrete_entropy"]], "stats.information": [[256, "module-stats.information"]], "monte_carlo_expectation() (in module stats.mcint)": [[260, "stats.mcint.monte_carlo_expectation"]], "monte_carlo_moments() (in module stats.mcint)": [[260, "stats.mcint.monte_carlo_moments"]], "stats.mcint": [[260, "module-stats.mcint"]], "minimize_retry() (in module stats.minimize)": [[261, "stats.minimize.minimize_retry"]], "stats.minimize": [[261, "module-stats.minimize"]], "stats.mixtures": [[262, "module-stats.mixtures"]], "two_class_poisson_mixture_model() (in module stats.mixtures)": [[262, "stats.mixtures.two_class_poisson_mixture_model"]], "logmode() (in module stats.modefind)": [[263, "stats.modefind.logmode"]], "logmodeplot() (in module stats.modefind)": [[263, "stats.modefind.logmodeplot"]], "modefind() (in module stats.modefind)": [[263, "stats.modefind.modefind"]], "peakfinder5() (in module stats.modefind)": [[263, "stats.modefind.peakfinder5"]], "stats.modefind": [[263, "module-stats.modefind"]], "benjamini_hochberg_positive_correlations() (in module stats.pvalues)": [[265, "stats.pvalues.benjamini_hochberg_positive_correlations"]], "bootstrap_compare_mean() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_compare_mean"]], "bootstrap_compare_median() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_compare_median"]], "bootstrap_compare_statistic_two_sided() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_compare_statistic_two_sided"]], "bootstrap_compare_statistic_two_sided_parallel() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_compare_statistic_two_sided_parallel"]], "bootstrap_mean() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_mean"]], "bootstrap_median() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_median"]], "bootstrap_statistic_two_sided() (in module stats.pvalues)": [[265, "stats.pvalues.bootstrap_statistic_two_sided"]], "correct_pvalues() (in module stats.pvalues)": [[265, "stats.pvalues.correct_pvalues"]], "correct_pvalues_positive_dependent() (in module stats.pvalues)": [[265, "stats.pvalues.correct_pvalues_positive_dependent"]], "stats.pvalues": [[265, "module-stats.pvalues"]], "damped_cosine() (in module stats.regressions)": [[266, "stats.regressions.damped_cosine"]], "exponential_decay() (in module stats.regressions)": [[266, "stats.regressions.exponential_decay"]], "gaussian_function() (in module stats.regressions)": [[266, "stats.regressions.gaussian_function"]], "half_gaussian_function() (in module stats.regressions)": [[266, "stats.regressions.half_gaussian_function"]], "power_law() (in module stats.regressions)": [[266, "stats.regressions.power_law"]], "robust_line() (in module stats.regressions)": [[266, "stats.regressions.robust_line"]], "stats.regressions": [[266, "module-stats.regressions"]], "weighted_least_squares() (in module stats.regressions)": [[266, "stats.regressions.weighted_least_squares"]]}})