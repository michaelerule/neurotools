"""
This class also defines three hue wheel color maps of varying brightness

>>> lighthue = mcolors.ListedColormap(lighthues(NCMAP),'lighthue')
>>> medhue   = mcolors.ListedColormap(medhues  (NCMAP),'medhue')
>>> darkhue  = mcolors.ListedColormap(darkhues (NCMAP),'darkhue')
"""

from neurotools.tools  import *
from neurotools.signal import *

import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

from os.path    import expanduser
from matplotlib import cm


def hsv2rgb(h,s,v):
    h,s,v = map(float,(h,s,v))
    h60 = h/60.0
    h60f = math.floor(h60)
    hi = int(h60f)%6
    f = h60-h60f
    p = v*(1-s)
    q = v*(1-f*s)
    t = v*(1-(1-f)*s)
    v = min(1.,max(0.,v))
    t = min(1.,max(0.,t))
    p = min(1.,max(0.,p))
    q = min(1.,max(0.,q))
    return ((v,t,p),(q,v,p),(p,v,t),(p,q,v),(t,p,v),(v,p,q))[hi]

def lightness(r,g,b):
    x1 = 0.30
    x2 = 0.59
    x3 = 0.11
    LRGB = np.array([x1,x2,x3])
    LRGB = LRGB / np.sum(LRGB)
    return dot(LRGB,(r,g,b))

def hcl2rgb(h,c,l,target = 1.0):
    x1 = 0.30
    x2 = 0.59
    x3 = 0.11
    LRGB = np.array([x1,x2,x3])
    LRGB = LRGB / np.sum(LRGB)
    h = h*pi/180.0
    alpha = cos(h)
    beta = sin(h)*2/sqrt(3)
    B = l - x1*(alpha+beta/2)-x2*beta
    R = alpha + beta/2+B
    G = beta+B
    RGB = np.array([R,G,B])
    RGB = RGB/np.max(RGB)
    luminance = np.dot(LRGB,RGB)
    # luminance will be off target. 
    if luminance<target:
        # the color is not as bright as it needs to be. 
        # blend in white
        WHITE = ones(3)
        lw = np.dot(LRGB,WHITE)
        # solve convex combination:
        # alpha*luminance+(1-alpha)*lw = target
        # a*l+lw-a*lw = t
        # a*(l-lw)+lw = t
        # a*(l-lw) = t-lw
        # a = (t-lw)/(l-lw)
        a = (target-lw)/(luminance-lw)
        RGB = a*RGB + (1-a)*WHITE
    elif luminance>target:
        # the color is too bright, blend with black
        BLACK = zeros(3)
        lb = np.dot(LRGB,BLACK)
        # solve the convex combination
        # a*l+(1-a)*lb = t
        # a = (t-lb)/(l-lb)
        a = (target-lb)/(luminance-lb)
        RGB = a*RGB + (1-a)*BLACK
    return clip(RGB,0,1)

def isoluminance1(h,l=.5):
    return hcl2rgb(h,1,1,target=float(l))
    
def isoluminance2(h):
    return hcl2rgb(h,1,1.0,target=.5)*(1+(h%5))/5
    
def isoluminance3(h):
    return hcl2rgb(h,1,1.0,target=.5)*(1+(h%15))/15

def isoluminance4(h):
    return hcl2rgb(h,1,1.0,target=.5)*(1+(h%60))/60
        
def lighthues(N=10,l=0.7):
    return [isoluminance1(h,l) for h in linspace(0,360,N+1)[:-1]] 

def darkhues(N=10,l=0.4):
    return [isoluminance1(h,l) for h in linspace(0,360,N+1)[:-1]] 

def medhues(N=10,l=0.6):
    return [isoluminance1(h,l) for h in linspace(0,360,N+1)[:-1]] 

'''
imshow([[isoluminance1(h) for h in range(360)]],interpolation='nearest',aspect=360)
imshow([[isoluminance1(180/pi*(h+sin(pi/3+h))) for h in linspace(0,2*pi,361)[:-1]]],interpolation='nearest',aspect=360)
imshow([[isoluminance1(180/pi*(2*(sin(-h/2+.8)**7*cos(h/2-.8))+h)) for h in linspace(0,2*pi,361)[:-1]]],interpolation='nearest',aspect=360)
'''


NCMAP = 360
lighthue = mcolors.ListedColormap(lighthues(NCMAP),'lighthue')
medhue   = mcolors.ListedColormap(medhues  (NCMAP),'medhue')
darkhue  = mcolors.ListedColormap(darkhues (NCMAP),'darkhue')


WHITE = ones(3)
def radl2rgb(h,l=1.0):
    '''
    Slightly more optimized HSL conversion routine.
    Saturation fixed at 1
    '''
    x1 = 0.30
    x2 = 0.59
    x3 = 0.11
    LRGB  = array([x1,x2,x3])
    alpha = cos(h)
    beta  = sin(h)*2/sqrt(3)
    B = 1.0 - x1*(alpha+beta/2)-x2*beta
    R = alpha + beta/2+B
    G = beta+B
    RGB = array([R,G,B])
    RGB = RGB/np.max(RGB)
    luminance = dot(LRGB,RGB)
    if luminance<l:
        a = (l-1)/(luminance-1)
        RGB = a*RGB + (1-a)*WHITE
    elif luminance>l:
        RGB *= l/luminance 
    return clip(RGB,0,1)

__N_HL_LUT__ = 256
__HL_LUT__ = zeros((__N_HL_LUT__,__N_HL_LUT__,3),dtype=float32)
for ih,h in enum(linspace(0,2*pi,__N_HL_LUT__+1)[:-1]):
    for il,l in enum(linspace(0,1,__N_HL_LUT__)):
        r,g,b = radl2rgb(h,l)
        __HL_LUT__[ih,il] = r,g,b

def radl2rgbLUT(h,l=1.0):
    '''
    radl2rgb backed with a limited resolution lookup table
    '''
    N = __N_HL_LUT__
    return __HL_LUT__[int(h*N/(2*pi))%N,int(l*(N-1))]

def complexHLArr2RGB(z):
    ''' Performs bulk LUT for complex numbers, avoids loops'''
    N = __N_HL_LUT__
    h = ravel(int32(angle(z)*N/(2*pi))%N)
    v = ravel(int32(clip(abs(z),0,1)*(N-1)))
    return reshape(__HL_LUT__[h,v],shape(z)+(3,))

#  imshow([[radl2rgbLUT(x*2*pi+pi*3/4,x) for x in linspace(0,1,101)]],interpolation='nearest',aspect=100)

    
    
    
    

'''
execfile(expanduser('~/Dropbox/bin/signaltools.py'))

y = arr([radl2rgbLUT(((1-x)*pi*3.+pi/4),x) for x in linspace(0,1,1000)]).T
y = arr([bandfilter(q,None,3) for q in y])
clf()
r,g,b = y
r -= np.min(r)
g -= np.min(g)
b -= np.min(b)
r = r/np.max(r)
g = g/np.max(g)
b = b/np.max(b)
imshow(arr([[r,g,b]]).transpose((0,2,1)),aspect=500)
'''

'''
#x = arr([radl2rgbLUT(-pi/6-pi*6/3*x,x) for x in linspace(0,1,1000)])
x = arr([radl2rgbLUT((1-x)*pi*2.+pi/4,x) for x in linspace(0,1,256)])
y = arr([bandfilter(q,None,3) for q in x.T])
clf()
r,g,b = y
r = r/np.max(r)
g = g/np.max(g)
b = b/np.max(b)
luminance = mcolors.ListedColormap(arr([r,g,b]).T,'luminance')
'''









# pip install husl
# http://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/28790/versions/5/screenshot.jpg
# https://pypi.python.org/pypi/husl
# https://mycarta.wordpress.com/2014/10/30/new-matlab-isoluminant-colormap-for-azimuth-data/
# radius = 38; % chroma
# theta = linspace(0, 2*pi, 256)'; % hue
# a = radius * cos(theta);
# b = radius * sin(theta);
# L = (ones(1, 256)*65)'; % lightness
# Lab = [L, a, b];
# RGB=colorspace('RGB<-Lab',Lab(end:-1:1,:));
# https://mycarta.wordpress.com/





isolum_data = [
[0.8658,0.5133,0.6237],[0.8638,0.5137,0.6301],[0.8615,0.5141,0.6366],
[0.8591,0.5147,0.6430],[0.8566,0.5153,0.6494],[0.8538,0.5160,0.6557],
[0.8509,0.5168,0.6621],[0.8479,0.5176,0.6684],[0.8446,0.5185,0.6747],
[0.8412,0.5195,0.6810],[0.8376,0.5206,0.6872],[0.8338,0.5218,0.6934],
[0.8299,0.5230,0.6996],[0.8258,0.5243,0.7057],[0.8215,0.5257,0.7118],
[0.8171,0.5271,0.7178],[0.8125,0.5286,0.7237],[0.8077,0.5302,0.7296],
[0.8028,0.5318,0.7355],[0.7977,0.5335,0.7412],[0.7924,0.5352,0.7469],
[0.7870,0.5370,0.7525],[0.7814,0.5389,0.7581],[0.7756,0.5408,0.7635],
[0.7697,0.5427,0.7689],[0.7636,0.5447,0.7742],[0.7573,0.5467,0.7794],
[0.7509,0.5488,0.7845],[0.7443,0.5509,0.7895],[0.7376,0.5530,0.7944],
[0.7307,0.5552,0.7992],[0.7237,0.5574,0.8039],[0.7165,0.5596,0.8085],
[0.7092,0.5618,0.8130],[0.7017,0.5641,0.8173],[0.6940,0.5664,0.8216],
[0.6862,0.5687,0.8257],[0.6783,0.5710,0.8297],[0.6702,0.5733,0.8336],
[0.6620,0.5757,0.8373],[0.6536,0.5780,0.8409],[0.6451,0.5804,0.8444],
[0.6365,0.5828,0.8477],[0.6277,0.5851,0.8509],[0.6188,0.5875,0.8540],
[0.6097,0.5898,0.8569],[0.6005,0.5922,0.8597],[0.5912,0.5946,0.8623],
[0.5818,0.5969,0.8648],[0.5722,0.5992,0.8672],[0.5625,0.6016,0.8693],
[0.5527,0.6039,0.8714],[0.5427,0.6062,0.8733],[0.5326,0.6085,0.8750],
[0.5224,0.6107,0.8766],[0.5121,0.6130,0.8780],[0.5017,0.6152,0.8792],
[0.4911,0.6174,0.8803],[0.4804,0.6196,0.8813],[0.4696,0.6218,0.8820],
[0.4587,0.6239,0.8826],[0.4476,0.6260,0.8831],[0.4365,0.6281,0.8834],
[0.4252,0.6302,0.8835],[0.4138,0.6322,0.8835],[0.4022,0.6342,0.8833],
[0.3905,0.6362,0.8829],[0.3787,0.6381,0.8824],[0.3668,0.6400,0.8817],
[0.3547,0.6419,0.8809],[0.3425,0.6437,0.8799],[0.3301,0.6455,0.8787],
[0.3175,0.6473,0.8774],[0.3048,0.6491,0.8759],[0.2918,0.6508,0.8742],
[0.2787,0.6524,0.8724],[0.2653,0.6541,0.8705],[0.2517,0.6557,0.8684],
[0.2377,0.6572,0.8661],[0.2235,0.6588,0.8637],[0.2088,0.6602,0.8611],
[0.1937,0.6617,0.8584],[0.1781,0.6631,0.8556],[0.1617,0.6645,0.8526],
[0.1444,0.6658,0.8494],[0.1260,0.6671,0.8461],[0.1059,0.6684,0.8427],
[0.0832,0.6696,0.8391],[0.0560,0.6708,0.8354],[0.0206,0.6720,0.8316],
[0.0000,0.6739,0.8282],[0.0000,0.6767,0.8255],[0.0000,0.6794,0.8226],
[0.0000,0.6819,0.8194],[0.0000,0.6841,0.8161],[0.0000,0.6862,0.8124],
[0.0000,0.6880,0.8086],[0.0000,0.6897,0.8045],[0.0000,0.6912,0.8003],
[0.0000,0.6925,0.7958],[0.0000,0.6936,0.7911],[0.0000,0.6946,0.7862],
[0.0000,0.6953,0.7810],[0.0000,0.6959,0.7757],[0.0000,0.6964,0.7702],
[0.0000,0.6966,0.7645],[0.0000,0.6968,0.7586],[0.0000,0.6967,0.7525],
[0.0000,0.6965,0.7461],[0.0000,0.6962,0.7396],[0.0000,0.6957,0.7330],
[0.0000,0.6950,0.7261],[0.0000,0.6942,0.7190],[0.0000,0.6933,0.7118],
[0.0000,0.6922,0.7043],[0.0000,0.6909,0.6967],[0.0000,0.6896,0.6889],
[0.0221,0.6893,0.6821],[0.0525,0.6894,0.6757],[0.0765,0.6895,0.6693],
[0.0965,0.6895,0.6629],[0.1140,0.6895,0.6564],[0.1300,0.6895,0.6499],
[0.1448,0.6894,0.6434],[0.1588,0.6893,0.6369],[0.1720,0.6892,0.6304],
[0.1847,0.6890,0.6238],[0.1968,0.6889,0.6173],[0.2086,0.6886,0.6107],
[0.2200,0.6884,0.6042],[0.2311,0.6881,0.5976],[0.2419,0.6878,0.5911],
[0.2524,0.6874,0.5846],[0.2627,0.6870,0.5780],[0.2728,0.6866,0.5716],
[0.2827,0.6862,0.5651],[0.2925,0.6857,0.5587],[0.3020,0.6852,0.5523],
[0.3115,0.6846,0.5459],[0.3207,0.6841,0.5396],[0.3299,0.6835,0.5333],
[0.3389,0.6828,0.5271],[0.3478,0.6821,0.5209],[0.3566,0.6814,0.5147],
[0.3653,0.6807,0.5087],[0.3739,0.6799,0.5026],[0.3824,0.6791,0.4967],
[0.3908,0.6783,0.4908],[0.3992,0.6774,0.4850],[0.4074,0.6765,0.4793],
[0.4156,0.6756,0.4736],[0.4237,0.6746,0.4680],[0.4317,0.6736,0.4625],
[0.4397,0.6726,0.4571],[0.4476,0.6716,0.4518],[0.4554,0.6705,0.4466],
[0.4632,0.6693,0.4415],[0.4709,0.6682,0.4365],[0.4785,0.6670,0.4316],
[0.4861,0.6658,0.4268],[0.4937,0.6645,0.4221],[0.5012,0.6633,0.4176],
[0.5086,0.6619,0.4131],[0.5160,0.6606,0.4088],[0.5234,0.6592,0.4046],
[0.5306,0.6578,0.4005],[0.5379,0.6564,0.3966],[0.5451,0.6549,0.3928],
[0.5522,0.6534,0.3891],[0.5593,0.6519,0.3856],[0.5664,0.6503,0.3822],
[0.5734,0.6487,0.3790],[0.5803,0.6471,0.3759],[0.5872,0.6454,0.3730],
[0.5941,0.6437,0.3702],[0.6009,0.6420,0.3676],[0.6077,0.6403,0.3652],
[0.6144,0.6385,0.3629],[0.6211,0.6367,0.3607],[0.6277,0.6349,0.3588],
[0.6342,0.6331,0.3570],[0.6407,0.6312,0.3553],[0.6472,0.6293,0.3539],
[0.6536,0.6273,0.3526],[0.6600,0.6254,0.3515],[0.6662,0.6234,0.3505],
[0.6725,0.6214,0.3498],[0.6787,0.6194,0.3492],[0.6848,0.6174,0.3488],
[0.6908,0.6153,0.3485],[0.6968,0.6132,0.3485],[0.7027,0.6111,0.3486],
[0.7086,0.6090,0.3489],[0.7144,0.6069,0.3493],[0.7201,0.6047,0.3500],
[0.7258,0.6026,0.3508],[0.7314,0.6004,0.3518],[0.7369,0.5982,0.3529],
[0.7423,0.5960,0.3542],[0.7477,0.5938,0.3557],[0.7529,0.5916,0.3574],
[0.7581,0.5893,0.3592],[0.7633,0.5871,0.3612],[0.7683,0.5849,0.3633],
[0.7732,0.5827,0.3656],[0.7781,0.5804,0.3680],[0.7828,0.5782,0.3706],
[0.7875,0.5760,0.3734],[0.7921,0.5737,0.3763],[0.7966,0.5715,0.3793],
[0.8010,0.5693,0.3825],[0.8052,0.5671,0.3858],[0.8094,0.5649,0.3892],
[0.8135,0.5628,0.3928],[0.8175,0.5606,0.3965],[0.8213,0.5585,0.4004],
[0.8251,0.5564,0.4043],[0.8287,0.5543,0.4084],[0.8322,0.5522,0.4126],
[0.8356,0.5502,0.4169],[0.8389,0.5482,0.4214],[0.8421,0.5462,0.4259],
[0.8451,0.5443,0.4306],[0.8481,0.5424,0.4353],[0.8509,0.5405,0.4402],
[0.8535,0.5387,0.4451],[0.8561,0.5369,0.4502],[0.8585,0.5352,0.4553],
[0.8607,0.5335,0.4605],[0.8629,0.5318,0.4658],[0.8649,0.5303,0.4712],
[0.8667,0.5287,0.4767],[0.8685,0.5273,0.4822],[0.8700,0.5259,0.4879],
[0.8715,0.5245,0.4936],[0.8728,0.5232,0.4993],[0.8739,0.5220,0.5051],
[0.8749,0.5209,0.5110],[0.8757,0.5198,0.5170],[0.8764,0.5188,0.5230],
[0.8770,0.5178,0.5290],[0.8773,0.5170,0.5351],[0.8776,0.5162,0.5413],
[0.8776,0.5155,0.5475],[0.8775,0.5148,0.5537],[0.8773,0.5143,0.5599],
[0.8769,0.5138,0.5662],[0.8763,0.5134,0.5725],[0.8756,0.5131,0.5789],
[0.8747,0.5129,0.5853],[0.8736,0.5128,0.5916],[0.8724,0.5127,0.5980],
[0.8710,0.5127,0.6045],[0.8695,0.5128,0.6109],[0.8677,0.5130,0.6173],
[0.8658,0.5133,0.6237]]

isolum = matplotlib.colors.ListedColormap(isolum_data,'isolum')
plt.register_cmap(name='isolum', cmap=isolum)
isolum_data = float32(isolum_data)


















